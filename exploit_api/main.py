from exploit_api.titties.base import fetch_roblox_pid, initialize
from exploit_api.titties.bytecode import Bytecode as RBXBytecode
from exploit_api.titties.bridge import Bridge as RBXBridge
from exploit_api.titties.instance import Instance, FetchRenderView, Process, Offsets
import exploit_api.newb as newb
import threading
import time, os, base64, psutil # type: ignore
DEFAULT_CLIENT_INFO = [-1, None]
init_script_bytecode = None
init_script = """bG9jYWwgQ29udGVudFByb3ZpZGVyID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb250ZW50UHJvdmlkZXIiKQpsb2NhbCBIdHRwU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiSHR0cFNlcnZpY2UiKQoKLS0gVVRJTFMKCmxvY2FsIGNvcmVfZ3VpID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKbG9jYWwgY29yZV9wYWNrYWdlcyA9IGdhbWU6R2V0U2VydmljZSgiQ29yZVBhY2thZ2VzIikKCgpsb2NhbCBsb2FkID0gY29yb3V0aW5lLndyYXAoZnVuY3Rpb24oKQoJbG9jYWwgY29tcGlsZSA9IGNvcm91dGluZS53cmFwKGZ1bmN0aW9uKCkKCQlsb2NhbCBsdWFaID0ge30KCQlsb2NhbCBsdWFZID0ge30KCQlsb2NhbCBsdWFYID0ge30KCQlsb2NhbCBsdWFQID0ge30KCQlsb2NhbCBsdWFVID0ge30KCQlsb2NhbCBsdWFLID0ge30KCQlsb2NhbCBzaXplX3NpemVfdCA9IDgKCgkJbG9jYWwgZnVuY3Rpb24gbHVhX2Fzc2VydCh0ZXN0KQoJCQlpZiBub3QgdGVzdCB0aGVuIGVycm9yKCJhc3NlcnRpb24gZmFpbGVkISIpIGVuZAoJCWVuZAoKCQlmdW5jdGlvbiBsdWFaOm1ha2VfZ2V0UyhidWZmKQoJCQlsb2NhbCBiID0gYnVmZgoJCQlyZXR1cm4gZnVuY3Rpb24oKQoJCQkJaWYgbm90IGIgdGhlbiByZXR1cm4gbmlsIGVuZAoJCQkJbG9jYWwgZGF0YSA9IGIKCQkJCWIgPSBuaWwKCQkJCXJldHVybiBkYXRhCgkJCWVuZAoJCWVuZAoKCQlmdW5jdGlvbiBsdWFaOm1ha2VfZ2V0Rihzb3VyY2UpCgkJCWxvY2FsIExVQUxfQlVGRkVSU0laRSA9IDUxMgoJCQlsb2NhbCBwb3MgPSAxCgoJCQlyZXR1cm4gZnVuY3Rpb24oKSAtLSBjaHVuayByZWFkZXIgYW5vbnltb3VzIGZ1bmN0aW9uIGhlcmUKCQkJCWxvY2FsIGJ1ZmYgPSBzb3VyY2U6c3ViKHBvcywgcG9zICsgTFVBTF9CVUZGRVJTSVpFIC0gMSkKCQkJCXBvcyA9IG1hdGgubWluKCNzb3VyY2UgKyAxLCBwb3MgKyBMVUFMX0JVRkZFUlNJWkUpCgkJCQlyZXR1cm4gYnVmZgoJCQllbmQKCQllbmQKCgkJZnVuY3Rpb24gbHVhWjppbml0KHJlYWRlciwgZGF0YSkKCQkJaWYgbm90IHJlYWRlciB0aGVuIHJldHVybiBlbmQKCQkJbG9jYWwgeiA9IHt9CgkJCXoucmVhZGVyID0gcmVhZGVyCgkJCXouZGF0YSA9IGRhdGEgb3IgIiIKCQkJei5uYW1lID0gbmFtZQoJCQlpZiBub3QgZGF0YSBvciBkYXRhID09ICIiIHRoZW4gei5uID0gMCBlbHNlIHoubiA9ICNkYXRhIGVuZAoJCQl6LnAgPSAwCgkJCXJldHVybiB6CgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVo6ZmlsbCh6KQoJCQlsb2NhbCBidWZmID0gei5yZWFkZXIoKQoJCQl6LmRhdGEgPSBidWZmCgkJCWlmIG5vdCBidWZmIG9yIGJ1ZmYgPT0gIiIgdGhlbiByZXR1cm4gIkVPWiIgZW5kCgkJCXoubiwgei5wID0gI2J1ZmYgLSAxLCAxCgkJCXJldHVybiBzdHJpbmcuc3ViKGJ1ZmYsIDEsIDEpCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVo6emdldGMoeikKCQkJbG9jYWwgbiwgcCA9IHoubiwgei5wICsgMQoJCQlpZiBuID4gMCB0aGVuCgkJCQl6Lm4sIHoucCA9IG4gLSAxLCBwCgkJCQlyZXR1cm4gc3RyaW5nLnN1Yih6LmRhdGEsIHAsIHApCgkJCWVsc2UKCQkJCXJldHVybiBzZWxmOmZpbGwoeikKCQkJZW5kCgkJZW5kCgoJCWx1YVguUkVTRVJWRUQgPSBbWwpUS19BTkQgYW5kClRLX0JSRUFLIGJyZWFrClRLX0RPIGRvClRLX0VMU0UgZWxzZQpUS19FTFNFSUYgZWxzZWlmClRLX0VORCBlbmQKVEtfRkFMU0UgZmFsc2UKVEtfRk9SIGZvcgpUS19GVU5DVElPTiBmdW5jdGlvbgpUS19JRiBpZgpUS19JTiBpbgpUS19MT0NBTCBsb2NhbApUS19OSUwgbmlsClRLX05PVCBub3QKVEtfT1Igb3IKVEtfUkVQRUFUIHJlcGVhdApUS19SRVRVUk4gcmV0dXJuClRLX1RIRU4gdGhlbgpUS19UUlVFIHRydWUKVEtfVU5USUwgdW50aWwKVEtfV0hJTEUgd2hpbGUKVEtfQ09OQ0FUIC4uClRLX0RPVFMgLi4uClRLX0VRID09ClRLX0dFID49ClRLX0xFIDw9ClRLX05FIH49ClRLX05BTUUgPG5hbWU+ClRLX05VTUJFUiA8bnVtYmVyPgpUS19TVFJJTkcgPHN0cmluZz4KVEtfRU9TIDxlb2Y+XV0KCgkJbHVhWC5NQVhTUkMgPSA4MAoJCWx1YVguTUFYX0lOVCA9IDIxNDc0ODM2NDUKCQlsdWFYLkxVQV9RUyA9ICInJXMnIgoJCWx1YVguTFVBX0NPTVBBVF9MU1RSID0gMQoKCQlmdW5jdGlvbiBsdWFYOmluaXQoKQoJCQlsb2NhbCB0b2tlbnMsIGVudW1zID0ge30sIHt9CgkJCWZvciB2IGluIHN0cmluZy5nbWF0Y2goc2VsZi5SRVNFUlZFRCwgIlteXG5dKyIpIGRvCgkJCQlsb2NhbCBfLCBfLCB0b2ssIHN0ciA9IHN0cmluZy5maW5kKHYsICIoJVMrKSVzKyglUyspIikKCQkJCXRva2Vuc1t0b2tdID0gc3RyCgkJCQllbnVtc1tzdHJdID0gdG9rCgkJCWVuZAoJCQlzZWxmLnRva2VucyA9IHRva2VucwoJCQlzZWxmLmVudW1zID0gZW51bXMKCQllbmQKCgkJZnVuY3Rpb24gbHVhWDpjaHVua2lkKHNvdXJjZSwgYnVmZmxlbikKCQkJbG9jYWwgb3V0CgkJCWxvY2FsIGZpcnN0ID0gc3RyaW5nLnN1Yihzb3VyY2UsIDEsIDEpCgkJCWlmIGZpcnN0ID09ICI9IiB0aGVuCgkJCQlvdXQgPSBzdHJpbmcuc3ViKHNvdXJjZSwgMiwgYnVmZmxlbikKCQkJZWxzZQoJCQkJaWYgZmlyc3QgPT0gIkAiIHRoZW4KCQkJCQlzb3VyY2UgPSBzdHJpbmcuc3ViKHNvdXJjZSwgMikKCQkJCQlidWZmbGVuID0gYnVmZmxlbiAtICMiICcuLi4nICIKCQkJCQlsb2NhbCBsID0gI3NvdXJjZQoJCQkJCW91dCA9ICIiCgkJCQkJaWYgbCA+IGJ1ZmZsZW4gdGhlbgoJCQkJCQlzb3VyY2UgPSBzdHJpbmcuc3ViKHNvdXJjZSwgMSArIGwgLSBidWZmbGVuKSAKCQkJCQkJb3V0ID0gb3V0Li4iLi4uIgoJCQkJCWVuZAoJCQkJCW91dCA9IG91dC4uc291cmNlCgkJCQllbHNlIAoJCQkJCWxvY2FsIGxlbiA9IHN0cmluZy5maW5kKHNvdXJjZSwgIltcblxyXSIpIAoJCQkJCWxlbiA9IGxlbiBhbmQgKGxlbiAtIDEpIG9yICNzb3VyY2UKCQkJCQlidWZmbGVuID0gYnVmZmxlbiAtICMoIiBbc3RyaW5nIFwiLi4uXCJdICIpCgkJCQkJaWYgbGVuID4gYnVmZmxlbiB0aGVuIGxlbiA9IGJ1ZmZsZW4gZW5kCgkJCQkJb3V0ID0gIltzdHJpbmcgXCIiCgkJCQkJaWYgbGVuIDwgI3NvdXJjZSB0aGVuCgkJCQkJCW91dCA9IG91dC4uc3RyaW5nLnN1Yihzb3VyY2UsIDEsIGxlbikuLiIuLi4iCgkJCQkJZWxzZQoJCQkJCQlvdXQgPSBvdXQuLnNvdXJjZQoJCQkJCWVuZAoJCQkJCW91dCA9IG91dC4uIlwiXSIKCQkJCWVuZAoJCQllbmQKCQkJcmV0dXJuIG91dAoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOnRva2VuMnN0cihscywgdG9rZW4pCgkJCWlmIHN0cmluZy5zdWIodG9rZW4sIDEsIDMpIH49ICJUS18iIHRoZW4KCQkJCWlmIHN0cmluZy5maW5kKHRva2VuLCAiJWMiKSB0aGVuCgkJCQkJcmV0dXJuIHN0cmluZy5mb3JtYXQoImNoYXIoJWQpIiwgc3RyaW5nLmJ5dGUodG9rZW4pKQoJCQkJZW5kCgkJCQlyZXR1cm4gdG9rZW4KCQkJZWxzZQoJCQkJcmV0dXJuIHNlbGYudG9rZW5zW3Rva2VuXQoJCQllbmQKCQllbmQKCgkJZnVuY3Rpb24gbHVhWDpsZXhlcnJvcihscywgbXNnLCB0b2tlbikKCQkJbG9jYWwgZnVuY3Rpb24gdHh0VG9rZW4obHMsIHRva2VuKQoJCQkJaWYgdG9rZW4gPT0gIlRLX05BTUUiIG9yCgkJCQkJdG9rZW4gPT0gIlRLX1NUUklORyIgb3IKCQkJCQl0b2tlbiA9PSAiVEtfTlVNQkVSIiB0aGVuCgkJCQkJcmV0dXJuIGxzLmJ1ZmYKCQkJCWVsc2UKCQkJCQlyZXR1cm4gc2VsZjp0b2tlbjJzdHIobHMsIHRva2VuKQoJCQkJZW5kCgkJCWVuZAoJCQlsb2NhbCBidWZmID0gc2VsZjpjaHVua2lkKGxzLnNvdXJjZSwgc2VsZi5NQVhTUkMpCgkJCWxvY2FsIG1zZyA9IHN0cmluZy5mb3JtYXQoIiVzOiVkOiAlcyIsIGJ1ZmYsIGxzLmxpbmVudW1iZXIsIG1zZykKCQkJaWYgdG9rZW4gdGhlbgoJCQkJbXNnID0gc3RyaW5nLmZvcm1hdCgiJXMgbmVhciAiLi5zZWxmLkxVQV9RUywgbXNnLCB0eHRUb2tlbihscywgdG9rZW4pKQoJCQllbmQKCQkJZXJyb3IobXNnKQoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOnN5bnRheGVycm9yKGxzLCBtc2cpCgkJCXNlbGY6bGV4ZXJyb3IobHMsIG1zZywgbHMudC50b2tlbikKCQllbmQKCgkJZnVuY3Rpb24gbHVhWDpjdXJySXNOZXdsaW5lKGxzKQoJCQlyZXR1cm4gbHMuY3VycmVudCA9PSAiXG4iIG9yIGxzLmN1cnJlbnQgPT0gIlxyIgoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOmluY2xpbmVudW1iZXIobHMpCgkJCWxvY2FsIG9sZCA9IGxzLmN1cnJlbnQKCQkJc2VsZjpuZXh0YyhscykKCQkJaWYgc2VsZjpjdXJySXNOZXdsaW5lKGxzKSBhbmQgbHMuY3VycmVudCB+PSBvbGQgdGhlbgoJCQkJc2VsZjpuZXh0YyhscykKCQkJZW5kCgkJCWxzLmxpbmVudW1iZXIgPSBscy5saW5lbnVtYmVyICsgMQoJCQlpZiBscy5saW5lbnVtYmVyID49IHNlbGYuTUFYX0lOVCB0aGVuCgkJCQlzZWxmOnN5bnRheGVycm9yKGxzLCAiY2h1bmsgaGFzIHRvbyBtYW55IGxpbmVzIikKCQkJZW5kCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVg6c2V0aW5wdXQoTCwgbHMsIHosIHNvdXJjZSkKCQkJaWYgbm90IGxzIHRoZW4gbHMgPSB7fSBlbmQKCQkJaWYgbm90IGxzLmxvb2thaGVhZCB0aGVuIGxzLmxvb2thaGVhZCA9IHt9IGVuZAoJCQlpZiBub3QgbHMudCB0aGVuIGxzLnQgPSB7fSBlbmQKCQkJbHMuZGVjcG9pbnQgPSAiLiIKCQkJbHMuTCA9IEwKCQkJbHMubG9va2FoZWFkLnRva2VuID0gIlRLX0VPUyIgCgkJCWxzLnogPSB6CgkJCWxzLmZzID0gbmlsCgkJCWxzLmxpbmVudW1iZXIgPSAxCgkJCWxzLmxhc3RsaW5lID0gMQoJCQlscy5zb3VyY2UgPSBzb3VyY2UKCQkJc2VsZjpuZXh0YyhscykKCQllbmQKCgkJZnVuY3Rpb24gbHVhWDpjaGVja19uZXh0KGxzLCBzZXQpCgkJCWlmIG5vdCBzdHJpbmcuZmluZChzZXQsIGxzLmN1cnJlbnQsIDEsIDEpIHRoZW4KCQkJCXJldHVybiBmYWxzZQoJCQllbmQKCQkJc2VsZjpzYXZlX2FuZF9uZXh0KGxzKQoJCQlyZXR1cm4gdHJ1ZQoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOm5leHQobHMpCgkJCWxzLmxhc3RsaW5lID0gbHMubGluZW51bWJlcgoJCQlpZiBscy5sb29rYWhlYWQudG9rZW4gfj0gIlRLX0VPUyIgdGhlbgoJCQkJLS0gdGhpcyBtdXN0IGJlIGNvcHktYnktdmFsdWUKCQkJCWxzLnQuc2VtaW5mbyA9IGxzLmxvb2thaGVhZC5zZW1pbmZvIAoJCQkJbHMudC50b2tlbiA9IGxzLmxvb2thaGVhZC50b2tlbgoJCQkJbHMubG9va2FoZWFkLnRva2VuID0gIlRLX0VPUyIgCgkJCWVsc2UKCQkJCWxzLnQudG9rZW4gPSBzZWxmOmxsZXgobHMsIGxzLnQpIAoJCQllbmQKCQllbmQKCgkJZnVuY3Rpb24gbHVhWDpsb29rYWhlYWQobHMpCgoJCQlscy5sb29rYWhlYWQudG9rZW4gPSBzZWxmOmxsZXgobHMsIGxzLmxvb2thaGVhZCkKCQllbmQKCgkJZnVuY3Rpb24gbHVhWDpuZXh0YyhscykKCQkJbG9jYWwgYyA9IGx1YVo6emdldGMobHMueikKCQkJbHMuY3VycmVudCA9IGMKCQkJcmV0dXJuIGMKCQllbmQKCgkJZnVuY3Rpb24gbHVhWDpzYXZlKGxzLCBjKQoJCQlsb2NhbCBidWZmID0gbHMuYnVmZgoJCQlscy5idWZmID0gYnVmZi4uYwoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOnNhdmVfYW5kX25leHQobHMpCgkJCXNlbGY6c2F2ZShscywgbHMuY3VycmVudCkKCQkJcmV0dXJuIHNlbGY6bmV4dGMobHMpCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVg6c3RyMmQocykKCQkJbG9jYWwgcmVzdWx0ID0gdG9udW1iZXIocykKCQkJaWYgcmVzdWx0IHRoZW4gcmV0dXJuIHJlc3VsdCBlbmQKCQkJaWYgc3RyaW5nLmxvd2VyKHN0cmluZy5zdWIocywgMSwgMikpID09ICIweCIgdGhlbgoJCQkJcmVzdWx0ID0gdG9udW1iZXIocywgMTYpCgkJCQlpZiByZXN1bHQgdGhlbiByZXR1cm4gcmVzdWx0IGVuZAoJCQllbmQKCQkJcmV0dXJuIG5pbAoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOmJ1ZmZyZXBsYWNlKGxzLCBmcm9tLCB0bykKCQkJbG9jYWwgcmVzdWx0LCBidWZmID0gIiIsIGxzLmJ1ZmYKCQkJZm9yIHAgPSAxLCAjYnVmZiBkbwoJCQkJbG9jYWwgYyA9IHN0cmluZy5zdWIoYnVmZiwgcCwgcCkKCQkJCWlmIGMgPT0gZnJvbSB0aGVuIGMgPSB0byBlbmQKCQkJCXJlc3VsdCA9IHJlc3VsdC4uYwoJCQllbmQKCQkJbHMuYnVmZiA9IHJlc3VsdAoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOnRyeWRlY3BvaW50KGxzLCBUb2tlbikKCQkJbG9jYWwgb2xkID0gbHMuZGVjcG9pbnQKCQkJc2VsZjpidWZmcmVwbGFjZShscywgb2xkLCBscy5kZWNwb2ludCkKCQkJbG9jYWwgc2VtaW5mbyA9IHNlbGY6c3RyMmQobHMuYnVmZikKCQkJVG9rZW4uc2VtaW5mbyA9IHNlbWluZm8KCQkJaWYgbm90IHNlbWluZm8gdGhlbgoJCQkJc2VsZjpidWZmcmVwbGFjZShscywgbHMuZGVjcG9pbnQsICIuIikKCQkJCXNlbGY6bGV4ZXJyb3IobHMsICJtYWxmb3JtZWQgbnVtYmVyIiwgIlRLX05VTUJFUiIpCgkJCWVuZAoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOnJlYWRfbnVtZXJhbChscywgVG9rZW4pCgkJCXJlcGVhdAoJCQkJc2VsZjpzYXZlX2FuZF9uZXh0KGxzKQoJCQl1bnRpbCBzdHJpbmcuZmluZChscy5jdXJyZW50LCAiJUQiKSBhbmQgbHMuY3VycmVudCB+PSAiLiIKCQkJaWYgc2VsZjpjaGVja19uZXh0KGxzLCAiRWUiKSB0aGVuCgkJCQlzZWxmOmNoZWNrX25leHQobHMsICIrLSIpCgkJCWVuZAoJCQl3aGlsZSBzdHJpbmcuZmluZChscy5jdXJyZW50LCAiXiV3JCIpIG9yIGxzLmN1cnJlbnQgPT0gIl8iIGRvCgkJCQlzZWxmOnNhdmVfYW5kX25leHQobHMpCgkJCWVuZAoJCQlzZWxmOmJ1ZmZyZXBsYWNlKGxzLCAiLiIsIGxzLmRlY3BvaW50KQoJCQlsb2NhbCBzZW1pbmZvID0gc2VsZjpzdHIyZChscy5idWZmKQoJCQlUb2tlbi5zZW1pbmZvID0gc2VtaW5mbwoJCQlpZiBub3Qgc2VtaW5mbyB0aGVuCgkJCQlzZWxmOnRyeWRlY3BvaW50KGxzLCBUb2tlbikgCgkJCWVuZAoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOnNraXBfc2VwKGxzKQoJCQlsb2NhbCBjb3VudCA9IDAKCQkJbG9jYWwgcyA9IGxzLmN1cnJlbnQKCQkJc2VsZjpzYXZlX2FuZF9uZXh0KGxzKQoJCQl3aGlsZSBscy5jdXJyZW50ID09ICI9IiBkbwoJCQkJc2VsZjpzYXZlX2FuZF9uZXh0KGxzKQoJCQkJY291bnQgPSBjb3VudCArIDEKCQkJZW5kCgkJCXJldHVybiAobHMuY3VycmVudCA9PSBzKSBhbmQgY291bnQgb3IgKC1jb3VudCkgLSAxCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVg6cmVhZF9sb25nX3N0cmluZyhscywgVG9rZW4sIHNlcCkKCQkJbG9jYWwgY29udCA9IDAKCQkJc2VsZjpzYXZlX2FuZF9uZXh0KGxzKQoJCQlpZiBzZWxmOmN1cnJJc05ld2xpbmUobHMpIHRoZW4KCQkJCXNlbGY6aW5jbGluZW51bWJlcihscykKCQkJZW5kCgkJCXdoaWxlIHRydWUgZG8KCQkJCWxvY2FsIGMgPSBscy5jdXJyZW50CgkJCQlpZiBjID09ICJFT1oiIHRoZW4KCQkJCQlzZWxmOmxleGVycm9yKGxzLCBUb2tlbiBhbmQgInVuZmluaXNoZWQgbG9uZyBzdHJpbmciIG9yCgkJCQkJCSJ1bmZpbmlzaGVkIGxvbmcgY29tbWVudCIsICJUS19FT1MiKQoJCQkJZWxzZWlmIGMgPT0gIlsiIHRoZW4KCQkJCQlpZiBzZWxmLkxVQV9DT01QQVRfTFNUUiB0aGVuCgkJCQkJCWlmIHNlbGY6c2tpcF9zZXAobHMpID09IHNlcCB0aGVuCgkJCQkJCQlzZWxmOnNhdmVfYW5kX25leHQobHMpCgkJCQkJCQljb250ID0gY29udCArIDEKCQkJCQkJCWlmIHNlbGYuTFVBX0NPTVBBVF9MU1RSID09IDEgdGhlbgoJCQkJCQkJCWlmIHNlcCA9PSAwIHRoZW4KCQkJCQkJCQkJc2VsZjpsZXhlcnJvcihscywgIm5lc3Rpbmcgb2YgW1suLi5dXSBpcyBkZXByZWNhdGVkIiwgIlsiKQoJCQkJCQkJCWVuZAoJCQkJCQkJZW5kCgkJCQkJCWVuZAoJCQkJCWVuZAoJCQkJZWxzZWlmIGMgPT0gIl0iIHRoZW4KCQkJCQlpZiBzZWxmOnNraXBfc2VwKGxzKSA9PSBzZXAgdGhlbgoJCQkJCQlzZWxmOnNhdmVfYW5kX25leHQobHMpCgkJCQkJCWlmIHNlbGYuTFVBX0NPTVBBVF9MU1RSIGFuZCBzZWxmLkxVQV9DT01QQVRfTFNUUiA9PSAyIHRoZW4KCQkJCQkJCWNvbnQgPSBjb250IC0gMQoJCQkJCQkJaWYgc2VwID09IDAgYW5kIGNvbnQgPj0gMCB0aGVuIGJyZWFrIGVuZAoJCQkJCQllbmQKCQkJCQkJYnJlYWsKCQkJCQllbmQKCQkJCWVsc2VpZiBzZWxmOmN1cnJJc05ld2xpbmUobHMpIHRoZW4KCQkJCQlzZWxmOnNhdmUobHMsICJcbiIpCgkJCQkJc2VsZjppbmNsaW5lbnVtYmVyKGxzKQoJCQkJCWlmIG5vdCBUb2tlbiB0aGVuIGxzLmJ1ZmYgPSAiIiBlbmQKCQkJCWVsc2UKCQkJCQlpZiBUb2tlbiB0aGVuCgkJCQkJCXNlbGY6c2F2ZV9hbmRfbmV4dChscykKCQkJCQllbHNlCgkJCQkJCXNlbGY6bmV4dGMobHMpCgkJCQkJZW5kCgkJCQllbmQKCQkJZW5kCgkJCWlmIFRva2VuIHRoZW4KCQkJCWxvY2FsIHAgPSAzICsgc2VwCgkJCQlUb2tlbi5zZW1pbmZvID0gc3RyaW5nLnN1Yihscy5idWZmLCBwLCAtcCkKCQkJZW5kCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVg6cmVhZF9zdHJpbmcobHMsIGRlbCwgVG9rZW4pCgkJCXNlbGY6c2F2ZV9hbmRfbmV4dChscykKCQkJd2hpbGUgbHMuY3VycmVudCB+PSBkZWwgZG8KCQkJCWxvY2FsIGMgPSBscy5jdXJyZW50CgkJCQlpZiBjID09ICJFT1oiIHRoZW4KCQkJCQlzZWxmOmxleGVycm9yKGxzLCAidW5maW5pc2hlZCBzdHJpbmciLCAiVEtfRU9TIikKCQkJCWVsc2VpZiBzZWxmOmN1cnJJc05ld2xpbmUobHMpIHRoZW4KCQkJCQlzZWxmOmxleGVycm9yKGxzLCAidW5maW5pc2hlZCBzdHJpbmciLCAiVEtfU1RSSU5HIikKCQkJCWVsc2VpZiBjID09ICJcXCIgdGhlbgoJCQkJCWMgPSBzZWxmOm5leHRjKGxzKQoJCQkJCWlmIHNlbGY6Y3VycklzTmV3bGluZShscykgdGhlbiAKCQkJCQkJc2VsZjpzYXZlKGxzLCAiXG4iKQoJCQkJCQlzZWxmOmluY2xpbmVudW1iZXIobHMpCgkJCQkJZWxzZWlmIGMgfj0gIkVPWiIgdGhlbgoJCQkJCQlsb2NhbCBpID0gc3RyaW5nLmZpbmQoImFiZm5ydHYiLCBjLCAxLCAxKQoJCQkJCQlpZiBpIHRoZW4KCQkJCQkJCXNlbGY6c2F2ZShscywgc3RyaW5nLnN1YigiXGFcYlxmXG5cclx0XHYiLCBpLCBpKSkKCQkJCQkJCXNlbGY6bmV4dGMobHMpCgkJCQkJCWVsc2VpZiBub3Qgc3RyaW5nLmZpbmQoYywgIiVkIikgdGhlbgoJCQkJCQkJc2VsZjpzYXZlX2FuZF9uZXh0KGxzKQoJCQkJCQllbHNlCgkJCQkJCQljLCBpID0gMCwgMAoJCQkJCQkJcmVwZWF0CgkJCQkJCQkJYyA9IDEwICogYyArIGxzLmN1cnJlbnQKCQkJCQkJCQlzZWxmOm5leHRjKGxzKQoJCQkJCQkJCWkgPSBpICsgMQoJCQkJCQkJdW50aWwgaSA+PSAzIG9yIG5vdCBzdHJpbmcuZmluZChscy5jdXJyZW50LCAiJWQiKQoJCQkJCQkJaWYgYyA+IDI1NSB0aGVuCgkJCQkJCQkJc2VsZjpsZXhlcnJvcihscywgImVzY2FwZSBzZXF1ZW5jZSB0b28gbGFyZ2UiLCAiVEtfU1RSSU5HIikKCQkJCQkJCWVuZAoJCQkJCQkJc2VsZjpzYXZlKGxzLCBzdHJpbmcuY2hhcihjKSkKCQkJCQkJZW5kCgkJCQkJZW5kCgkJCQllbHNlCgkJCQkJc2VsZjpzYXZlX2FuZF9uZXh0KGxzKQoJCQkJZW5kCgkJCWVuZAoJCQlzZWxmOnNhdmVfYW5kX25leHQobHMpCgkJCVRva2VuLnNlbWluZm8gPSBzdHJpbmcuc3ViKGxzLmJ1ZmYsIDIsIC0yKQoJCWVuZAoKCQlmdW5jdGlvbiBsdWFYOmxsZXgobHMsIFRva2VuKQoJCQlscy5idWZmID0gIiIKCQkJd2hpbGUgdHJ1ZSBkbwoJCQkJbG9jYWwgYyA9IGxzLmN1cnJlbnQKCQkJCWlmIHNlbGY6Y3VycklzTmV3bGluZShscykgdGhlbgoJCQkJCXNlbGY6aW5jbGluZW51bWJlcihscykKCQkJCWVsc2VpZiBjID09ICItIiB0aGVuCgkJCQkJYyA9IHNlbGY6bmV4dGMobHMpCgkJCQkJaWYgYyB+PSAiLSIgdGhlbiByZXR1cm4gIi0iIGVuZAoJCQkJCWxvY2FsIHNlcCA9IC0xCgkJCQkJaWYgc2VsZjpuZXh0YyhscykgPT0gJ1snIHRoZW4KCQkJCQkJc2VwID0gc2VsZjpza2lwX3NlcChscykKCQkJCQkJbHMuYnVmZiA9ICIiCgkJCQkJZW5kCgkJCQkJaWYgc2VwID49IDAgdGhlbgoJCQkJCQlzZWxmOnJlYWRfbG9uZ19zdHJpbmcobHMsIG5pbCwgc2VwKQoJCQkJCQlscy5idWZmID0gIiIKCQkJCQllbHNlCgkJCQkJCXdoaWxlIG5vdCBzZWxmOmN1cnJJc05ld2xpbmUobHMpIGFuZCBscy5jdXJyZW50IH49ICJFT1oiIGRvCgkJCQkJCQlzZWxmOm5leHRjKGxzKQoJCQkJCQllbmQKCQkJCQllbmQKCQkJCWVsc2VpZiBjID09ICJbIiB0aGVuCgkJCQkJbG9jYWwgc2VwID0gc2VsZjpza2lwX3NlcChscykKCQkJCQlpZiBzZXAgPj0gMCB0aGVuCgkJCQkJCXNlbGY6cmVhZF9sb25nX3N0cmluZyhscywgVG9rZW4sIHNlcCkKCQkJCQkJcmV0dXJuICJUS19TVFJJTkciCgkJCQkJZWxzZWlmIHNlcCA9PSAtMSB0aGVuCgkJCQkJCXJldHVybiAiWyIKCQkJCQllbHNlCgkJCQkJCXNlbGY6bGV4ZXJyb3IobHMsICJpbnZhbGlkIGxvbmcgc3RyaW5nIGRlbGltaXRlciIsICJUS19TVFJJTkciKQoJCQkJCWVuZAoJCQkJZWxzZWlmIGMgPT0gIj0iIHRoZW4KCQkJCQljID0gc2VsZjpuZXh0YyhscykKCQkJCQlpZiBjIH49ICI9IiB0aGVuIHJldHVybiAiPSIKCQkJCQllbHNlIHNlbGY6bmV4dGMobHMpOyByZXR1cm4gIlRLX0VRIiBlbmQKCQkJCWVsc2VpZiBjID09ICI8IiB0aGVuCgkJCQkJYyA9IHNlbGY6bmV4dGMobHMpCgkJCQkJaWYgYyB+PSAiPSIgdGhlbiByZXR1cm4gIjwiCgkJCQkJZWxzZSBzZWxmOm5leHRjKGxzKTsgcmV0dXJuICJUS19MRSIgZW5kCgkJCQllbHNlaWYgYyA9PSAiPiIgdGhlbgoJCQkJCWMgPSBzZWxmOm5leHRjKGxzKQoJCQkJCWlmIGMgfj0gIj0iIHRoZW4gcmV0dXJuICI+IgoJCQkJCWVsc2Ugc2VsZjpuZXh0Yyhscyk7IHJldHVybiAiVEtfR0UiIGVuZAoJCQkJZWxzZWlmIGMgPT0gIn4iIHRoZW4KCQkJCQljID0gc2VsZjpuZXh0YyhscykKCQkJCQlpZiBjIH49ICI9IiB0aGVuIHJldHVybiAifiIKCQkJCQllbHNlIHNlbGY6bmV4dGMobHMpOyByZXR1cm4gIlRLX05FIiBlbmQKCQkJCWVsc2VpZiBjID09ICJcIiIgb3IgYyA9PSAiJyIgdGhlbgoJCQkJCXNlbGY6cmVhZF9zdHJpbmcobHMsIGMsIFRva2VuKQoJCQkJCXJldHVybiAiVEtfU1RSSU5HIgoJCQkJZWxzZWlmIGMgPT0gIi4iIHRoZW4KCQkJCQljID0gc2VsZjpzYXZlX2FuZF9uZXh0KGxzKQoJCQkJCWlmIHNlbGY6Y2hlY2tfbmV4dChscywgIi4iKSB0aGVuCgkJCQkJCWlmIHNlbGY6Y2hlY2tfbmV4dChscywgIi4iKSB0aGVuCgkJCQkJCQlyZXR1cm4gIlRLX0RPVFMiCgkJCQkJCWVsc2UgcmV0dXJuICJUS19DT05DQVQiCgkJCQkJCWVuZAoJCQkJCWVsc2VpZiBub3Qgc3RyaW5nLmZpbmQoYywgIiVkIikgdGhlbgoJCQkJCQlyZXR1cm4gIi4iCgkJCQkJZWxzZQoJCQkJCQlzZWxmOnJlYWRfbnVtZXJhbChscywgVG9rZW4pCgkJCQkJCXJldHVybiAiVEtfTlVNQkVSIgoJCQkJCWVuZAoJCQkJZWxzZWlmIGMgPT0gIkVPWiIgdGhlbgoJCQkJCXJldHVybiAiVEtfRU9TIgoJCQkJZWxzZQoJCQkJCWlmIHN0cmluZy5maW5kKGMsICIlcyIpIHRoZW4KCQkJCQkJc2VsZjpuZXh0YyhscykKCQkJCQllbHNlaWYgc3RyaW5nLmZpbmQoYywgIiVkIikgdGhlbgoJCQkJCQlzZWxmOnJlYWRfbnVtZXJhbChscywgVG9rZW4pCgkJCQkJCXJldHVybiAiVEtfTlVNQkVSIgoJCQkJCWVsc2VpZiBzdHJpbmcuZmluZChjLCAiW18lYV0iKSB0aGVuCgkJCQkJCXJlcGVhdAoJCQkJCQkJYyA9IHNlbGY6c2F2ZV9hbmRfbmV4dChscykKCQkJCQkJdW50aWwgYyA9PSAiRU9aIiBvciBub3Qgc3RyaW5nLmZpbmQoYywgIltfJXddIikKCQkJCQkJbG9jYWwgdHMgPSBscy5idWZmCgkJCQkJCWxvY2FsIHRvayA9IHNlbGYuZW51bXNbdHNdCgkJCQkJCWlmIHRvayB0aGVuIHJldHVybiB0b2sgZW5kCgkJCQkJCVRva2VuLnNlbWluZm8gPSB0cwoJCQkJCQlyZXR1cm4gIlRLX05BTUUiCgkJCQkJZWxzZQoJCQkJCQlzZWxmOm5leHRjKGxzKQoJCQkJCQlyZXR1cm4gYwoJCQkJCWVuZAoJCQkJZW5kCgkJCWVuZAoJCWVuZAoKCQlsdWFQLk9wTW9kZSA9IHsgaUFCQyA9IDAsIGlBQnggPSAxLCBpQXNCeCA9IDIgfQoKCQlsdWFQLlNJWkVfQyAgPSA5CgkJbHVhUC5TSVpFX0IgID0gOQoJCWx1YVAuU0laRV9CeCA9IGx1YVAuU0laRV9DICsgbHVhUC5TSVpFX0IKCQlsdWFQLlNJWkVfQSAgPSA4CgoJCWx1YVAuU0laRV9PUCA9IDYKCgkJbHVhUC5QT1NfT1AgPSAwCgkJbHVhUC5QT1NfQSAgPSBsdWFQLlBPU19PUCArIGx1YVAuU0laRV9PUAoJCWx1YVAuUE9TX0MgID0gbHVhUC5QT1NfQSArIGx1YVAuU0laRV9BCgkJbHVhUC5QT1NfQiAgPSBsdWFQLlBPU19DICsgbHVhUC5TSVpFX0MKCQlsdWFQLlBPU19CeCA9IGx1YVAuUE9TX0MKCgkJbHVhUC5NQVhBUkdfQnggID0gbWF0aC5sZGV4cCgxLCBsdWFQLlNJWkVfQngpIC0gMQoJCWx1YVAuTUFYQVJHX3NCeCA9IG1hdGguZmxvb3IobHVhUC5NQVhBUkdfQnggLyAyKQoKCQlsdWFQLk1BWEFSR19BID0gbWF0aC5sZGV4cCgxLCBsdWFQLlNJWkVfQSkgLSAxCgkJbHVhUC5NQVhBUkdfQiA9IG1hdGgubGRleHAoMSwgbHVhUC5TSVpFX0IpIC0gMQoJCWx1YVAuTUFYQVJHX0MgPSBtYXRoLmxkZXhwKDEsIGx1YVAuU0laRV9DKSAtIDEKCgkJZnVuY3Rpb24gbHVhUDpHRVRfT1BDT0RFKGkpIHJldHVybiBzZWxmLlJPcENvZGVbaS5PUF0gZW5kCgkJZnVuY3Rpb24gbHVhUDpTRVRfT1BDT0RFKGksIG8pIGkuT1AgPSBzZWxmLk9wQ29kZVtvXSBlbmQKCgkJZnVuY3Rpb24gbHVhUDpHRVRBUkdfQShpKSByZXR1cm4gaS5BIGVuZAoJCWZ1bmN0aW9uIGx1YVA6U0VUQVJHX0EoaSwgdSkgaS5BID0gdSBlbmQKCgkJZnVuY3Rpb24gbHVhUDpHRVRBUkdfQihpKSByZXR1cm4gaS5CIGVuZAoJCWZ1bmN0aW9uIGx1YVA6U0VUQVJHX0IoaSwgYikgaS5CID0gYiBlbmQKCgkJZnVuY3Rpb24gbHVhUDpHRVRBUkdfQyhpKSByZXR1cm4gaS5DIGVuZAoJCWZ1bmN0aW9uIGx1YVA6U0VUQVJHX0MoaSwgYikgaS5DID0gYiBlbmQKCgkJZnVuY3Rpb24gbHVhUDpHRVRBUkdfQngoaSkgcmV0dXJuIGkuQnggZW5kCgkJZnVuY3Rpb24gbHVhUDpTRVRBUkdfQngoaSwgYikgaS5CeCA9IGIgZW5kCgoJCWZ1bmN0aW9uIGx1YVA6R0VUQVJHX3NCeChpKSByZXR1cm4gaS5CeCAtIHNlbGYuTUFYQVJHX3NCeCBlbmQKCQlmdW5jdGlvbiBsdWFQOlNFVEFSR19zQngoaSwgYikgaS5CeCA9IGIgKyBzZWxmLk1BWEFSR19zQnggZW5kCgoJCWZ1bmN0aW9uIGx1YVA6Q1JFQVRFX0FCQyhvLGEsYixjKQoJCQlyZXR1cm4ge09QID0gc2VsZi5PcENvZGVbb10sIEEgPSBhLCBCID0gYiwgQyA9IGN9CgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVA6Q1JFQVRFX0FCeChvLGEsYmMpCgkJCXJldHVybiB7T1AgPSBzZWxmLk9wQ29kZVtvXSwgQSA9IGEsIEJ4ID0gYmN9CgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVA6Q1JFQVRFX0luc3QoYykKCQkJbG9jYWwgbyA9IGMgJSA2NAoJCQljID0gKGMgLSBvKSAvIDY0CgkJCWxvY2FsIGEgPSBjICUgMjU2CgkJCWMgPSAoYyAtIGEpIC8gMjU2CgkJCXJldHVybiBzZWxmOkNSRUFURV9BQngobywgYSwgYykKCQllbmQKCgkJZnVuY3Rpb24gbHVhUDpJbnN0cnVjdGlvbihpKQoJCQlpZiBpLkJ4IHRoZW4KCQkJCWkuQyA9IGkuQnggJSA1MTIKCQkJCWkuQiA9IChpLkJ4IC0gaS5DKSAvIDUxMgoJCQllbmQKCQkJbG9jYWwgSSA9IGkuQSAqIDY0ICsgaS5PUAoJCQlsb2NhbCBjMCA9IEkgJSAyNTYKCQkJSSA9IGkuQyAqIDY0ICsgKEkgLSBjMCkgLyAyNTYKCQkJbG9jYWwgYzEgPSBJICUgMjU2CgkJCUkgPSBpLkIgKiAxMjggKyAoSSAtIGMxKSAvIDI1NgoJCQlsb2NhbCBjMiA9IEkgJSAyNTYKCQkJbG9jYWwgYzMgPSAoSSAtIGMyKSAvIDI1NgoJCQlyZXR1cm4gc3RyaW5nLmNoYXIoYzAsIGMxLCBjMiwgYzMpCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVA6RGVjb2RlSW5zdCh4KQoJCQlsb2NhbCBieXRlID0gc3RyaW5nLmJ5dGUKCQkJbG9jYWwgaSA9IHt9CgkJCWxvY2FsIEkgPSBieXRlKHgsIDEpCgkJCWxvY2FsIG9wID0gSSAlIDY0CgkJCWkuT1AgPSBvcAoJCQlJID0gYnl0ZSh4LCAyKSAqIDQgKyAoSSAtIG9wKSAvIDY0CgkJCWxvY2FsIGEgPSBJICUgMjU2CgkJCWkuQSA9IGEKCQkJSSA9IGJ5dGUoeCwgMykgKiA0ICsgKEkgLSBhKSAvIDI1NgoJCQlsb2NhbCBjID0gSSAlIDUxMgoJCQlpLkMgPSBjCgkJCWkuQiA9IGJ5dGUoeCwgNCkgKiAyICsgKEkgLSBjKSAvIDUxMgoJCQlsb2NhbCBvcG1vZGUgPSBzZWxmLk9wTW9kZVt0b251bWJlcihzdHJpbmcuc3ViKHNlbGYub3Btb2Rlc1tvcCArIDFdLCA3LCA3KSldCgkJCWlmIG9wbW9kZSB+PSAiaUFCQyIgdGhlbgoJCQkJaS5CeCA9IGkuQiAqIDUxMiArIGkuQwoJCQllbmQKCQkJcmV0dXJuIGkKCQllbmQKCgkJbHVhUC5CSVRSSyA9IG1hdGgubGRleHAoMSwgbHVhUC5TSVpFX0IgLSAxKQoKCQlmdW5jdGlvbiBsdWFQOklTSyh4KSByZXR1cm4geCA+PSBzZWxmLkJJVFJLIGVuZAoKCQlmdW5jdGlvbiBsdWFQOklOREVYSyhyKSByZXR1cm4geCAtIHNlbGYuQklUUksgZW5kCgoJCWx1YVAuTUFYSU5ERVhSSyA9IGx1YVAuQklUUksgLSAxCgoJCWZ1bmN0aW9uIGx1YVA6UktBU0soeCkgcmV0dXJuIHggKyBzZWxmLkJJVFJLIGVuZAoKCQlsdWFQLk5PX1JFRyA9IGx1YVAuTUFYQVJHX0EKCgkJbHVhUC5vcG5hbWVzID0ge30gCgkJbHVhUC5PcENvZGUgPSB7fSAKCQlsdWFQLlJPcENvZGUgPSB7fSAKCgkJbG9jYWwgaSA9IDAKCQlmb3IgdiBpbiBzdHJpbmcuZ21hdGNoKFtbCk1PVkUgTE9BREsgTE9BREJPT0wgTE9BRE5JTCBHRVRVUFZBTApHRVRHTE9CQUwgR0VUVEFCTEUgU0VUR0xPQkFMIFNFVFVQVkFMIFNFVFRBQkxFCk5FV1RBQkxFIFNFTEYgQUREIFNVQiBNVUwKRElWIE1PRCBQT1cgVU5NIE5PVApMRU4gQ09OQ0FUIEpNUCBFUSBMVApMRSBURVNUIFRFU1RTRVQgQ0FMTCBUQUlMQ0FMTApSRVRVUk4gRk9STE9PUCBGT1JQUkVQIFRGT1JMT09QIFNFVExJU1QKQ0xPU0UgQ0xPU1VSRSBWQVJBUkcKXV0sICIlUysiKSBkbwoJCQlsb2NhbCBuID0gIk9QXyIuLnYKCQkJbHVhUC5vcG5hbWVzW2ldID0gdgoJCQlsdWFQLk9wQ29kZVtuXSA9IGkKCQkJbHVhUC5ST3BDb2RlW2ldID0gbgoJCQlpID0gaSArIDEKCQllbmQKCQlsdWFQLk5VTV9PUENPREVTID0gaQoJCWx1YVAuT3BBcmdNYXNrID0geyBPcEFyZ04gPSAwLCBPcEFyZ1UgPSAxLCBPcEFyZ1IgPSAyLCBPcEFyZ0sgPSAzIH0KCgkJZnVuY3Rpb24gbHVhUDpnZXRPcE1vZGUobSkKCQkJcmV0dXJuIHNlbGYub3Btb2Rlc1tzZWxmLk9wQ29kZVttXV0gJSA0CgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVA6Z2V0Qk1vZGUobSkKCQkJcmV0dXJuIG1hdGguZmxvb3Ioc2VsZi5vcG1vZGVzW3NlbGYuT3BDb2RlW21dXSAvIDE2KSAlIDQKCQllbmQKCgkJZnVuY3Rpb24gbHVhUDpnZXRDTW9kZShtKQoJCQlyZXR1cm4gbWF0aC5mbG9vcihzZWxmLm9wbW9kZXNbc2VsZi5PcENvZGVbbV1dIC8gNCkgJSA0CgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVA6dGVzdEFNb2RlKG0pCgkJCXJldHVybiBtYXRoLmZsb29yKHNlbGYub3Btb2Rlc1tzZWxmLk9wQ29kZVttXV0gLyA2NCkgJSAyCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVA6dGVzdFRNb2RlKG0pCgkJCXJldHVybiBtYXRoLmZsb29yKHNlbGYub3Btb2Rlc1tzZWxmLk9wQ29kZVttXV0gLyAxMjgpCgkJZW5kCgoJCWx1YVAuTEZJRUxEU19QRVJfRkxVU0ggPSA1MAoKCQlsb2NhbCBmdW5jdGlvbiBvcG1vZGUodCwgYSwgYiwgYywgbSkKCQkJbG9jYWwgbHVhUCA9IGx1YVAKCQkJcmV0dXJuIHQgKiAxMjggKyBhICogNjQgKwoJCQkJbHVhUC5PcEFyZ01hc2tbYl0gKiAxNiArIGx1YVAuT3BBcmdNYXNrW2NdICogNCArIGx1YVAuT3BNb2RlW21dCgkJZW5kCgoKCQlsdWFQLm9wbW9kZXMgPSB7CgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdLIiwgIk9wQXJnTiIsICJpQUJ4IiksIAoJCQlvcG1vZGUoMCwgMSwgIk9wQXJnVSIsICJPcEFyZ1UiLCAiaUFCQyIpLCAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdSIiwgIk9wQXJnTiIsICJpQUJDIiksICAgIAoJCQlvcG1vZGUoMCwgMSwgIk9wQXJnVSIsICJPcEFyZ04iLCAiaUFCQyIpLCAgICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdLIiwgIk9wQXJnTiIsICJpQUJ4IiksICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdSIiwgIk9wQXJnSyIsICJpQUJDIiksICAgICAKCQkJb3Btb2RlKDAsIDAsICJPcEFyZ0siLCAiT3BBcmdOIiwgImlBQngiKSwgICAgCgkJCW9wbW9kZSgwLCAwLCAiT3BBcmdVIiwgIk9wQXJnTiIsICJpQUJDIiksICAgIAoJCQlvcG1vZGUoMCwgMCwgIk9wQXJnSyIsICJPcEFyZ0siLCAiaUFCQyIpLCAgICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdVIiwgIk9wQXJnVSIsICJpQUJDIiksICAKCQkJb3Btb2RlKDAsIDEsICJPcEFyZ1IiLCAiT3BBcmdLIiwgImlBQkMiKSwgIAoJCQlvcG1vZGUoMCwgMSwgIk9wQXJnSyIsICJPcEFyZ0siLCAiaUFCQyIpLCAgIAoJCQlvcG1vZGUoMCwgMSwgIk9wQXJnSyIsICJPcEFyZ0siLCAiaUFCQyIpLCAgICAKCQkJb3Btb2RlKDAsIDEsICJPcEFyZ0siLCAiT3BBcmdLIiwgImlBQkMiKSwgICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdLIiwgIk9wQXJnSyIsICJpQUJDIiksICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdLIiwgIk9wQXJnSyIsICJpQUJDIiksICAgIAoJCQlvcG1vZGUoMCwgMSwgIk9wQXJnSyIsICJPcEFyZ0siLCAiaUFCQyIpLCAgICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdSIiwgIk9wQXJnTiIsICJpQUJDIiksICAgIAoJCQlvcG1vZGUoMCwgMSwgIk9wQXJnUiIsICJPcEFyZ04iLCAiaUFCQyIpLCAgICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdSIiwgIk9wQXJnTiIsICJpQUJDIiksICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdSIiwgIk9wQXJnUiIsICJpQUJDIiksCgkJCW9wbW9kZSgwLCAwLCAiT3BBcmdSIiwgIk9wQXJnTiIsICJpQXNCeCIpLCAKCQkJb3Btb2RlKDEsIDAsICJPcEFyZ0siLCAiT3BBcmdLIiwgImlBQkMiKSwgCgkJCW9wbW9kZSgxLCAwLCAiT3BBcmdLIiwgIk9wQXJnSyIsICJpQUJDIiksIAoJCQlvcG1vZGUoMSwgMCwgIk9wQXJnSyIsICJPcEFyZ0siLCAiaUFCQyIpLCAKCQkJb3Btb2RlKDEsIDEsICJPcEFyZ1IiLCAiT3BBcmdVIiwgImlBQkMiKSwgICAKCQkJb3Btb2RlKDEsIDEsICJPcEFyZ1IiLCAiT3BBcmdVIiwgImlBQkMiKSwgICAKCQkJb3Btb2RlKDAsIDEsICJPcEFyZ1UiLCAiT3BBcmdVIiwgImlBQkMiKSwgIAoJCQlvcG1vZGUoMCwgMSwgIk9wQXJnVSIsICJPcEFyZ1UiLCAiaUFCQyIpLCAgCgkJCW9wbW9kZSgwLCAwLCAiT3BBcmdVIiwgIk9wQXJnTiIsICJpQUJDIiksICAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdSIiwgIk9wQXJnTiIsICJpQXNCeCIpLCAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdSIiwgIk9wQXJnTiIsICJpQXNCeCIpLCAgIAoJCQlvcG1vZGUoMSwgMCwgIk9wQXJnTiIsICJPcEFyZ1UiLCAiaUFCQyIpLCAgICAKCQkJb3Btb2RlKDAsIDAsICJPcEFyZ1UiLCAiT3BBcmdVIiwgImlBQkMiKSwgICAKCQkJb3Btb2RlKDAsIDAsICJPcEFyZ04iLCAiT3BBcmdOIiwgImlBQkMiKSwgICAgIAoJCQlvcG1vZGUoMCwgMSwgIk9wQXJnVSIsICJPcEFyZ04iLCAiaUFCeCIpLCAgCgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdVIiwgIk9wQXJnTiIsICJpQUJDIiksICAgICAKCQl9CgoJCWx1YVAub3Btb2Rlc1swXSA9CgkJCW9wbW9kZSgwLCAxLCAiT3BBcmdSIiwgIk9wQXJnTiIsICJpQUJDIikKCgkJbHVhVS5MVUFfU0lHTkFUVVJFID0gIlwyN0x1YSIKCgkJbHVhVS5MVUFfVE5VTUJFUiAgPSAzCgkJbHVhVS5MVUFfVFNUUklORyAgPSA0CgkJbHVhVS5MVUFfVE5JTCAgICAgPSAwCgkJbHVhVS5MVUFfVEJPT0xFQU4gPSAxCgkJbHVhVS5MVUFfVE5PTkUgICAgPSAtMQoKCQlsdWFVLkxVQUNfVkVSU0lPTiAgICA9IDB4NTEgICAgCgkJbHVhVS5MVUFDX0ZPUk1BVCAgICAgPSAwICAgICAKCQlsdWFVLkxVQUNfSEVBREVSU0laRSA9IDEyICAgCgoJCWZ1bmN0aW9uIGx1YVU6bWFrZV9zZXRTKCkKCQkJbG9jYWwgYnVmZiA9IHt9CgkJCWJ1ZmYuZGF0YSA9ICIiCgkJCWxvY2FsIHdyaXRlciA9CgkJCQlmdW5jdGlvbihzLCBidWZmKQoJCQkJCWlmIG5vdCBzIHRoZW4gcmV0dXJuIDAgZW5kCgkJCQkJYnVmZi5kYXRhID0gYnVmZi5kYXRhLi5zCgkJCQkJcmV0dXJuIDAKCQkJCWVuZAoJCQlyZXR1cm4gd3JpdGVyLCBidWZmCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6bWFrZV9zZXRGKGZpbGVuYW1lKQoJCQlsb2NhbCBidWZmID0ge30KCQkJYnVmZi5oID0gaW8ub3BlbihmaWxlbmFtZSwgIndiIikKCQkJaWYgbm90IGJ1ZmYuaCB0aGVuIHJldHVybiBuaWwgZW5kCgkJCWxvY2FsIHdyaXRlciA9CgkJCQlmdW5jdGlvbihzLCBidWZmKSAgCgkJCQkJaWYgbm90IGJ1ZmYuaCB0aGVuIHJldHVybiAwIGVuZAoJCQkJCWlmIG5vdCBzIHRoZW4KCQkJCQlpZiBidWZmLmg6Y2xvc2UoKSB0aGVuIHJldHVybiAwIGVuZAoJCQkJZWxzZQoJCQkJCWlmIGJ1ZmYuaDp3cml0ZShzKSB0aGVuIHJldHVybiAwIGVuZAoJCQkJZW5kCgkJCQkJcmV0dXJuIDEKCQkJCWVuZAoJCQlyZXR1cm4gd3JpdGVyLCBidWZmCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6dHR5cGUobykKCQkJbG9jYWwgdHQgPSB0eXBlKG8udmFsdWUpCgkJCWlmIHR0ID09ICJudW1iZXIiIHRoZW4gcmV0dXJuIHNlbGYuTFVBX1ROVU1CRVIKCQkJZWxzZWlmIHR0ID09ICJzdHJpbmciIHRoZW4gcmV0dXJuIHNlbGYuTFVBX1RTVFJJTkcKCQkJZWxzZWlmIHR0ID09ICJuaWwiIHRoZW4gcmV0dXJuIHNlbGYuTFVBX1ROSUwKCQkJZWxzZWlmIHR0ID09ICJib29sZWFuIiB0aGVuIHJldHVybiBzZWxmLkxVQV9UQk9PTEVBTgoJCQllbHNlCgkJCQlyZXR1cm4gc2VsZi5MVUFfVE5PTkUKCQkJZW5kCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6ZnJvbV9kb3VibGUoeCkKCQkJbG9jYWwgZnVuY3Rpb24gZ3JhYl9ieXRlKHYpCgkJCQlsb2NhbCBjID0gdiAlIDI1NgoJCQkJcmV0dXJuICh2IC0gYykgLyAyNTYsIHN0cmluZy5jaGFyKGMpCgkJCWVuZAoJCQlsb2NhbCBzaWduID0gMAoJCQlpZiB4IDwgMCB0aGVuIHNpZ24gPSAxOyB4ID0gLXggZW5kCgkJCWxvY2FsIG1hbnRpc3NhLCBleHBvbmVudCA9IG1hdGguZnJleHAoeCkKCQkJaWYgeCA9PSAwIHRoZW4gCgkJCQltYW50aXNzYSwgZXhwb25lbnQgPSAwLCAwCgkJCWVsc2VpZiB4ID09IDEvMCB0aGVuCgkJCQltYW50aXNzYSwgZXhwb25lbnQgPSAwLCAyMDQ3CgkJCWVsc2UKCQkJCW1hbnRpc3NhID0gKG1hbnRpc3NhICogMiAtIDEpICogbWF0aC5sZGV4cCgwLjUsIDUzKQoJCQkJZXhwb25lbnQgPSBleHBvbmVudCArIDEwMjIKCQkJZW5kCgkJCWxvY2FsIHYsIGJ5dGUgPSAiIgoJCQl4ID0gbWF0aC5mbG9vcihtYW50aXNzYSkKCQkJZm9yIGkgPSAxLDYgZG8KCQkJCXgsIGJ5dGUgPSBncmFiX2J5dGUoeCk7IHYgPSB2Li5ieXRlIAoJCQllbmQKCQkJeCwgYnl0ZSA9IGdyYWJfYnl0ZShleHBvbmVudCAqIDE2ICsgeCk7IHYgPSB2Li5ieXRlCgkJCXgsIGJ5dGUgPSBncmFiX2J5dGUoc2lnbiAqIDEyOCArIHgpOyB2ID0gdi4uYnl0ZSAKCQkJcmV0dXJuIHYKCQllbmQKCgkJZnVuY3Rpb24gbHVhVTpmcm9tX2ludCh4KQoJCQlsb2NhbCB2ID0gIiIKCQkJeCA9IG1hdGguZmxvb3IoeCkKCQkJaWYgeCA8IDAgdGhlbiB4ID0gNDI5NDk2NzI5NiArIHggZW5kICAKCQkJZm9yIGkgPSAxLCA0IGRvCgkJCQlsb2NhbCBjID0geCAlIDI1NgoJCQkJdiA9IHYuLnN0cmluZy5jaGFyKGMpOyB4ID0gbWF0aC5mbG9vcih4IC8gMjU2KQoJCQllbmQKCQkJcmV0dXJuIHYKCQllbmQKCgkJZnVuY3Rpb24gbHVhVTpEdW1wQmxvY2soYiwgRCkKCQkJaWYgRC5zdGF0dXMgPT0gMCB0aGVuCgkJCQlELnN0YXR1cyA9IEQud3JpdGUoYiwgRC5kYXRhKQoJCQllbmQKCQllbmQKCgkJZnVuY3Rpb24gbHVhVTpEdW1wQ2hhcih5LCBEKQoJCQlzZWxmOkR1bXBCbG9jayhzdHJpbmcuY2hhcih5KSwgRCkKCQllbmQKCgkJZnVuY3Rpb24gbHVhVTpEdW1wSW50KHgsIEQpCgkJCXNlbGY6RHVtcEJsb2NrKHNlbGY6ZnJvbV9pbnQoeCksIEQpCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6RHVtcFNpemVUKHgsIEQpCgkJCXNlbGY6RHVtcEJsb2NrKHNlbGY6ZnJvbV9pbnQoeCksIEQpCgkJCWlmIHNpemVfc2l6ZV90ID09IDggdGhlbgoJCQkJc2VsZjpEdW1wQmxvY2soc2VsZjpmcm9tX2ludCgwKSwgRCkKCQkJZW5kCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6RHVtcE51bWJlcih4LCBEKQoJCQlzZWxmOkR1bXBCbG9jayhzZWxmOmZyb21fZG91YmxlKHgpLCBEKQoJCWVuZAoKCQlmdW5jdGlvbiBsdWFVOkR1bXBTdHJpbmcocywgRCkKCQkJaWYgcyA9PSBuaWwgdGhlbgoJCQkJc2VsZjpEdW1wU2l6ZVQoMCwgRCkKCQkJZWxzZQoJCQkJcyA9IHMuLiJcMCIKCQkJCXNlbGY6RHVtcFNpemVUKCNzLCBEKQoJCQkJc2VsZjpEdW1wQmxvY2socywgRCkKCQkJZW5kCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6RHVtcENvZGUoZiwgRCkKCQkJbG9jYWwgbiA9IGYuc2l6ZWNvZGUKCQkJc2VsZjpEdW1wSW50KG4sIEQpCgkJCWZvciBpID0gMCwgbiAtIDEgZG8KCQkJCXNlbGY6RHVtcEJsb2NrKGx1YVA6SW5zdHJ1Y3Rpb24oZi5jb2RlW2ldKSwgRCkKCQkJZW5kCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6RHVtcENvbnN0YW50cyhmLCBEKQoJCQlsb2NhbCBuID0gZi5zaXplawoJCQlzZWxmOkR1bXBJbnQobiwgRCkKCQkJZm9yIGkgPSAwLCBuIC0gMSBkbwoJCQkJbG9jYWwgbyA9IGYua1tpXSAKCQkJCWxvY2FsIHR0ID0gc2VsZjp0dHlwZShvKQoJCQkJc2VsZjpEdW1wQ2hhcih0dCwgRCkKCQkJCWlmIHR0ID09IHNlbGYuTFVBX1ROSUwgdGhlbgoJCQkJZWxzZWlmIHR0ID09IHNlbGYuTFVBX1RCT09MRUFOIHRoZW4KCQkJCQlzZWxmOkR1bXBDaGFyKG8udmFsdWUgYW5kIDEgb3IgMCwgRCkKCQkJCWVsc2VpZiB0dCA9PSBzZWxmLkxVQV9UTlVNQkVSIHRoZW4KCQkJCQlzZWxmOkR1bXBOdW1iZXIoby52YWx1ZSwgRCkKCQkJCWVsc2VpZiB0dCA9PSBzZWxmLkxVQV9UU1RSSU5HIHRoZW4KCQkJCQlzZWxmOkR1bXBTdHJpbmcoby52YWx1ZSwgRCkKCQkJCWVsc2UKCgkJCQllbmQKCQkJZW5kCgkJCW4gPSBmLnNpemVwCgkJCXNlbGY6RHVtcEludChuLCBEKQoJCQlmb3IgaSA9IDAsIG4gLSAxIGRvCgkJCQlzZWxmOkR1bXBGdW5jdGlvbihmLnBbaV0sIGYuc291cmNlLCBEKQoJCQllbmQKCQllbmQKCgkJZnVuY3Rpb24gbHVhVTpEdW1wRGVidWcoZiwgRCkKCQkJbG9jYWwgbgoJCQluID0gRC5zdHJpcCBhbmQgMCBvciBmLnNpemVsaW5laW5mbyAgICAgICAgCgkJCS0td2FzIER1bXBWZWN0b3IKCQkJc2VsZjpEdW1wSW50KG4sIEQpCgkJCWZvciBpID0gMCwgbiAtIDEgZG8KCQkJCXNlbGY6RHVtcEludChmLmxpbmVpbmZvW2ldLCBEKQoJCQllbmQKCQkJbiA9IEQuc3RyaXAgYW5kIDAgb3IgZi5zaXplbG9jdmFycyAgICAgIAoJCQlzZWxmOkR1bXBJbnQobiwgRCkKCQkJZm9yIGkgPSAwLCBuIC0gMSBkbwoJCQkJc2VsZjpEdW1wU3RyaW5nKGYubG9jdmFyc1tpXS52YXJuYW1lLCBEKQoJCQkJc2VsZjpEdW1wSW50KGYubG9jdmFyc1tpXS5zdGFydHBjLCBEKQoJCQkJc2VsZjpEdW1wSW50KGYubG9jdmFyc1tpXS5lbmRwYywgRCkKCQkJZW5kCgkJCW4gPSBELnN0cmlwIGFuZCAwIG9yIGYuc2l6ZXVwdmFsdWVzICAgICAKCQkJc2VsZjpEdW1wSW50KG4sIEQpCgkJCWZvciBpID0gMCwgbiAtIDEgZG8KCQkJCXNlbGY6RHVtcFN0cmluZyhmLnVwdmFsdWVzW2ldLCBEKQoJCQllbmQKCQllbmQKCgkJZnVuY3Rpb24gbHVhVTpEdW1wRnVuY3Rpb24oZiwgcCwgRCkKCQkJbG9jYWwgc291cmNlID0gZi5zb3VyY2UKCQkJaWYgc291cmNlID09IHAgb3IgRC5zdHJpcCB0aGVuIHNvdXJjZSA9IG5pbCBlbmQKCQkJc2VsZjpEdW1wU3RyaW5nKHNvdXJjZSwgRCkKCQkJc2VsZjpEdW1wSW50KGYubGluZURlZmluZWQsIEQpCgkJCXNlbGY6RHVtcEludChmLmxhc3RsaW5lZGVmaW5lZCwgRCkKCQkJc2VsZjpEdW1wQ2hhcihmLm51cHMsIEQpCgkJCXNlbGY6RHVtcENoYXIoZi5udW1wYXJhbXMsIEQpCgkJCXNlbGY6RHVtcENoYXIoZi5pc192YXJhcmcsIEQpCgkJCXNlbGY6RHVtcENoYXIoZi5tYXhzdGFja3NpemUsIEQpCgkJCXNlbGY6RHVtcENvZGUoZiwgRCkKCQkJc2VsZjpEdW1wQ29uc3RhbnRzKGYsIEQpCgkJCXNlbGY6RHVtcERlYnVnKGYsIEQpCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6RHVtcEhlYWRlcihEKQoJCQlsb2NhbCBoID0gc2VsZjpoZWFkZXIoKQoJCQlhc3NlcnQoI2ggPT0gc2VsZi5MVUFDX0hFQURFUlNJWkUpCgkJCXNlbGY6RHVtcEJsb2NrKGgsIEQpCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YVU6aGVhZGVyKCkKCQkJbG9jYWwgeCA9IDEKCQkJcmV0dXJuIHNlbGYuTFVBX1NJR05BVFVSRS4uCgkJCQlzdHJpbmcuY2hhcigKCQkJCQlzZWxmLkxVQUNfVkVSU0lPTiwKCQkJCQlzZWxmLkxVQUNfRk9STUFULAoJCQkJCXgsICAgICAgICAgICAgICAgICAgCgkJCQkJNCwgICAgICAgICAgICAgICAgICAgIAoJCQkJCXNpemVfc2l6ZV90LCAgICAgICAgICAgICAgICAKCQkJCQk0LCAgICAgICAgICAgICAgICAgIAoJCQkJCTgsICAgICAgICAgICAgICAgICAgCgkJCQkJMCkgICAgICAgICAgICAgICAgICAKCQllbmQKCgkJZnVuY3Rpb24gbHVhVTpkdW1wKEwsIGYsIHcsIGRhdGEsIHN0cmlwKQoJCQlsb2NhbCBEID0ge30gCgkJCUQuTCA9IEwKCQkJRC53cml0ZSA9IHcKCQkJRC5kYXRhID0gZGF0YQoJCQlELnN0cmlwID0gc3RyaXAKCQkJRC5zdGF0dXMgPSAwCgkJCXNlbGY6RHVtcEhlYWRlcihEKQoJCQlzZWxmOkR1bXBGdW5jdGlvbihmLCBuaWwsIEQpCgkJCUQud3JpdGUobmlsLCBELmRhdGEpCgkJCXJldHVybiBELnN0YXR1cwoJCWVuZAoJCWx1YUsuTUFYU1RBQ0sgPSAyNTAKCgkJZnVuY3Rpb24gbHVhSzp0dGlzbnVtYmVyKG8pCgkJCWlmIG8gdGhlbiByZXR1cm4gdHlwZShvLnZhbHVlKSA9PSAibnVtYmVyIiBlbHNlIHJldHVybiBmYWxzZSBlbmQKCQllbmQKCQlmdW5jdGlvbiBsdWFLOm52YWx1ZShvKSByZXR1cm4gby52YWx1ZSBlbmQKCQlmdW5jdGlvbiBsdWFLOnNldG5pbHZhbHVlKG8pIG8udmFsdWUgPSBuaWwgZW5kCgkJZnVuY3Rpb24gbHVhSzpzZXRzdmFsdWUobywgeCkgby52YWx1ZSA9IHggZW5kCgkJbHVhSy5zZXRudmFsdWUgPSBsdWFLLnNldHN2YWx1ZQoJCWx1YUsuc2V0aHZhbHVlID0gbHVhSy5zZXRzdmFsdWUKCQlsdWFLLnNldGJ2YWx1ZSA9IGx1YUsuc2V0c3ZhbHVlCgoJCWZ1bmN0aW9uIGx1YUs6bnVtYWRkKGEsIGIpIHJldHVybiBhICsgYiBlbmQKCQlmdW5jdGlvbiBsdWFLOm51bXN1YihhLCBiKSByZXR1cm4gYSAtIGIgZW5kCgkJZnVuY3Rpb24gbHVhSzpudW1tdWwoYSwgYikgcmV0dXJuIGEgKiBiIGVuZAoJCWZ1bmN0aW9uIGx1YUs6bnVtZGl2KGEsIGIpIHJldHVybiBhIC8gYiBlbmQKCQlmdW5jdGlvbiBsdWFLOm51bW1vZChhLCBiKSByZXR1cm4gYSAlIGIgZW5kCgkJZnVuY3Rpb24gbHVhSzpudW1wb3coYSwgYikgcmV0dXJuIGEgXiBiIGVuZAoJCWZ1bmN0aW9uIGx1YUs6bnVtdW5tKGEpIHJldHVybiAtYSBlbmQKCQlmdW5jdGlvbiBsdWFLOm51bWlzbmFuKGEpIHJldHVybiBub3QgYSA9PSBhIGVuZAoKCQlsdWFLLk5PX0pVTVAgPSAtMQoKCQlsdWFLLkJpbk9wciA9IHsKCQkJT1BSX0FERCA9IDAsIE9QUl9TVUIgPSAxLCBPUFJfTVVMID0gMiwgT1BSX0RJViA9IDMsIE9QUl9NT0QgPSA0LCBPUFJfUE9XID0gNSwKCQkJT1BSX0NPTkNBVCA9IDYsCgkJCU9QUl9ORSA9IDcsIE9QUl9FUSA9IDgsCgkJCU9QUl9MVCA9IDksIE9QUl9MRSA9IDEwLCBPUFJfR1QgPSAxMSwgT1BSX0dFID0gMTIsCgkJCU9QUl9BTkQgPSAxMywgT1BSX09SID0gMTQsCgkJCU9QUl9OT0JJTk9QUiA9IDE1LAoJCX0KCgkJbHVhSy5Vbk9wciA9IHsKCQkJT1BSX01JTlVTID0gMCwgT1BSX05PVCA9IDEsIE9QUl9MRU4gPSAyLCBPUFJfTk9VTk9QUiA9IDMKCQl9CgoJCWZ1bmN0aW9uIGx1YUs6Z2V0Y29kZShmcywgZSkKCQkJcmV0dXJuIGZzLmYuY29kZVtlLmluZm9dCgkJZW5kCgoJCWZ1bmN0aW9uIGx1YUs6Y29kZUFzQngoZnMsIG8sIEEsIHNCeCkKCQkJcmV0dXJuIHNlbGY6Y29kZUFCeChmcywgbywgQSwgc0J4ICsgbHVhUC5NQVhBUkdfc0J4KQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBzZXQgdGhlIGV4cGRlc2MgZSBpbnN0cnVjdGlvbiBmb3IgbXVsdGlwbGUgcmV0dXJucywgd2FzIGEgbWFjcm8KCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOnNldG11bHRyZXQoZnMsIGUpCgkJCXNlbGY6c2V0cmV0dXJucyhmcywgZSwgbHVhWS5MVUFfTVVMVFJFVCkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gdGhlcmUgaXMgYSBqdW1wIGlmIHBhdGNoIGxpc3RzIGFyZSBub3QgaWRlbnRpY2FsLCB3YXMgYSBtYWNybwoJCS0tICogdXNlZCBpbiBsdWFLOmV4cDJyZWcoKSwgbHVhSzpleHAyYW55cmVnKCksIGx1YUs6ZXhwMnZhbCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpoYXNqdW1wcyhlKQoJCQlyZXR1cm4gZS50IH49IGUuZgoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSB0cnVlIGlmIHRoZSBleHByZXNzaW9uIGlzIGEgY29uc3RhbnQgbnVtYmVyIChmb3IgY29uc3RhbnQgZm9sZGluZykKCQktLSAqIHVzZWQgaW4gY29uc3Rmb2xkaW5nKCksIGluZml4KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmlzbnVtZXJhbChlKQoJCQlyZXR1cm4gZS5rID09ICJWS05VTSIgYW5kIGUudCA9PSBzZWxmLk5PX0pVTVAgYW5kIGUuZiA9PSBzZWxmLk5PX0pVTVAKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gY29kZXMgbG9hZGluZyBvZiBuaWwsIG9wdGltaXphdGlvbiBkb25lIGlmIGNvbnNlY3V0aXZlIGxvY2F0aW9ucwoJCS0tICogdXNlZCBpbiBsdWFLOmRpc2NoYXJnZTJyZWcoKSwgKGxwYXJzZXIpIGx1YVk6YWRqdXN0X2Fzc2lnbigpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpfbmlsKGZzLCBmcm9tLCBuKQoJCQlpZiBmcy5wYyA+IGZzLmxhc3R0YXJnZXQgdGhlbiAgLS0gbm8ganVtcHMgdG8gY3VycmVudCBwb3NpdGlvbj8KCQkJCWlmIGZzLnBjID09IDAgdGhlbiAgLS0gZnVuY3Rpb24gc3RhcnQ/CgkJCQkJaWYgZnJvbSA+PSBmcy5uYWN0dmFyIHRoZW4KCQkJCQkJcmV0dXJuICAtLSBwb3NpdGlvbnMgYXJlIGFscmVhZHkgY2xlYW4KCQkJCQllbmQKCQkJCWVsc2UKCQkJCQlsb2NhbCBwcmV2aW91cyA9IGZzLmYuY29kZVtmcy5wYyAtIDFdCgkJCQkJaWYgbHVhUDpHRVRfT1BDT0RFKHByZXZpb3VzKSA9PSAiT1BfTE9BRE5JTCIgdGhlbgoJCQkJCQlsb2NhbCBwZnJvbSA9IGx1YVA6R0VUQVJHX0EocHJldmlvdXMpCgkJCQkJCWxvY2FsIHB0byA9IGx1YVA6R0VUQVJHX0IocHJldmlvdXMpCgkJCQkJCWlmIHBmcm9tIDw9IGZyb20gYW5kIGZyb20gPD0gcHRvICsgMSB0aGVuICAtLSBjYW4gY29ubmVjdCBib3RoPwoJCQkJCQkJaWYgZnJvbSArIG4gLSAxID4gcHRvIHRoZW4KCQkJCQkJCQlsdWFQOlNFVEFSR19CKHByZXZpb3VzLCBmcm9tICsgbiAtIDEpCgkJCQkJCQllbmQKCQkJCQkJCXJldHVybgoJCQkJCQllbmQKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQkJc2VsZjpjb2RlQUJDKGZzLCAiT1BfTE9BRE5JTCIsIGZyb20sIGZyb20gKyBuIC0gMSwgMCkgIC0tIGVsc2Ugbm8gb3B0aW1pemF0aW9uCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIG11bHRpcGxlIGxvY2F0aW9ucwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6anVtcChmcykKCQkJbG9jYWwganBjID0gZnMuanBjICAtLSBzYXZlIGxpc3Qgb2YganVtcHMgdG8gaGVyZQoJCQlmcy5qcGMgPSBzZWxmLk5PX0pVTVAKCQkJbG9jYWwgaiA9IHNlbGY6Y29kZUFzQngoZnMsICJPUF9KTVAiLCAwLCBzZWxmLk5PX0pVTVApCgkJCWogPSBzZWxmOmNvbmNhdChmcywgaiwganBjKSAgLS0ga2VlcCB0aGVtIG9uIGhvbGQKCQkJcmV0dXJuIGoKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gY29kZXMgYSBSRVRVUk4gaW5zdHJ1Y3Rpb24KCQktLSAqIHVzZWQgaW4gbHVhWTpjbG9zZV9mdW5jKCksIGx1YVk6cmV0c3RhdCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpyZXQoZnMsIGZpcnN0LCBucmV0KQoJCQlzZWxmOmNvZGVBQkMoZnMsICJPUF9SRVRVUk4iLCBmaXJzdCwgbnJldCArIDEsIDApCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIGx1YUs6anVtcG9uY29uZCgpLCBsdWFLOmNvZGVjb21wKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmNvbmRqdW1wKGZzLCBvcCwgQSwgQiwgQykKCQkJc2VsZjpjb2RlQUJDKGZzLCBvcCwgQSwgQiwgQykKCQkJcmV0dXJuIHNlbGY6anVtcChmcykKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gbHVhSzpwYXRjaGxpc3RhdXgoKSwgbHVhSzpjb25jYXQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Zml4anVtcChmcywgcGMsIGRlc3QpCgkJCWxvY2FsIGptcCA9IGZzLmYuY29kZVtwY10KCQkJbG9jYWwgb2Zmc2V0ID0gZGVzdCAtIChwYyArIDEpCgkJCWx1YV9hc3NlcnQoZGVzdCB+PSBzZWxmLk5PX0pVTVApCgkJCWlmIG1hdGguYWJzKG9mZnNldCkgPiBsdWFQLk1BWEFSR19zQnggdGhlbgoJCQkJbHVhWDpzeW50YXhlcnJvcihmcy5scywgImNvbnRyb2wgc3RydWN0dXJlIHRvbyBsb25nIikKCQkJZW5kCgkJCWx1YVA6U0VUQVJHX3NCeChqbXAsIG9mZnNldCkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gcmV0dXJucyBjdXJyZW50ICdwYycgYW5kIG1hcmtzIGl0IGFzIGEganVtcCB0YXJnZXQgKHRvIGF2b2lkIHdyb25nCgkJLS0gb3B0aW1pemF0aW9ucyB3aXRoIGNvbnNlY3V0aXZlIGluc3RydWN0aW9ucyBub3QgaW4gdGhlIHNhbWUgYmFzaWMgYmxvY2spLgoJCS0tICogdXNlZCBpbiBtdWx0aXBsZSBsb2NhdGlvbnMKCQktLSAqIGZzLmxhc3R0YXJnZXQgdGVzdGVkIG9ubHkgYnkgbHVhSzpfbmlsKCkgd2hlbiBvcHRpbWl6aW5nIE9QX0xPQUROSUwKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmdldGxhYmVsKGZzKQoJCQlmcy5sYXN0dGFyZ2V0ID0gZnMucGMKCQkJcmV0dXJuIGZzLnBjCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIGx1YUs6bmVlZF92YWx1ZSgpLCBsdWFLOnJlbW92ZXZhbHVlcygpLCBsdWFLOnBhdGNobGlzdGF1eCgpLAoJCS0tICAgbHVhSzpjb25jYXQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Z2V0anVtcChmcywgcGMpCgkJCWxvY2FsIG9mZnNldCA9IGx1YVA6R0VUQVJHX3NCeChmcy5mLmNvZGVbcGNdKQoJCQlpZiBvZmZzZXQgPT0gc2VsZi5OT19KVU1QIHRoZW4gIC0tIHBvaW50IHRvIGl0c2VsZiByZXByZXNlbnRzIGVuZCBvZiBsaXN0CgkJCQlyZXR1cm4gc2VsZi5OT19KVU1QICAtLSBlbmQgb2YgbGlzdAoJCQllbHNlCgkJCQlyZXR1cm4gKHBjICsgMSkgKyBvZmZzZXQgIC0tIHR1cm4gb2Zmc2V0IGludG8gYWJzb2x1dGUgcG9zaXRpb24KCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIGx1YUs6bmVlZF92YWx1ZSgpLCBsdWFLOnBhdGNodGVzdHJlZygpLCBsdWFLOmludmVydGp1bXAoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Z2V0anVtcGNvbnRyb2woZnMsIHBjKQoJCQlsb2NhbCBwaSA9IGZzLmYuY29kZVtwY10KCQkJbG9jYWwgcHBpID0gZnMuZi5jb2RlW3BjIC0gMV0KCQkJaWYgcGMgPj0gMSBhbmQgbHVhUDp0ZXN0VE1vZGUobHVhUDpHRVRfT1BDT0RFKHBwaSkpIH49IDAgdGhlbgoJCQkJcmV0dXJuIHBwaQoJCQllbHNlCgkJCQlyZXR1cm4gcGkKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGNoZWNrIHdoZXRoZXIgbGlzdCBoYXMgYW55IGp1bXAgdGhhdCBkbyBub3QgcHJvZHVjZSBhIHZhbHVlCgkJLS0gKG9yIHByb2R1Y2UgYW4gaW52ZXJ0ZWQgdmFsdWUpCgkJLS0gKiByZXR1cm4gdmFsdWUgY2hhbmdlZCB0byBib29sZWFuCgkJLS0gKiB1c2VkIG9ubHkgaW4gbHVhSzpleHAycmVnKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOm5lZWRfdmFsdWUoZnMsIGxpc3QpCgkJCXdoaWxlIGxpc3Qgfj0gc2VsZi5OT19KVU1QIGRvCgkJCQlsb2NhbCBpID0gc2VsZjpnZXRqdW1wY29udHJvbChmcywgbGlzdCkKCQkJCWlmIGx1YVA6R0VUX09QQ09ERShpKSB+PSAiT1BfVEVTVFNFVCIgdGhlbiByZXR1cm4gdHJ1ZSBlbmQKCQkJCWxpc3QgPSBzZWxmOmdldGp1bXAoZnMsIGxpc3QpCgkJCWVuZAoJCQlyZXR1cm4gZmFsc2UgIC0tIG5vdCBmb3VuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBsdWFLOnJlbW92ZXZhbHVlcygpLCBsdWFLOnBhdGNobGlzdGF1eCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpwYXRjaHRlc3RyZWcoZnMsIG5vZGUsIHJlZykKCQkJbG9jYWwgaSA9IHNlbGY6Z2V0anVtcGNvbnRyb2woZnMsIG5vZGUpCgkJCWlmIGx1YVA6R0VUX09QQ09ERShpKSB+PSAiT1BfVEVTVFNFVCIgdGhlbgoJCQkJcmV0dXJuIGZhbHNlICAtLSBjYW5ub3QgcGF0Y2ggb3RoZXIgaW5zdHJ1Y3Rpb25zCgkJCWVuZAoJCQlpZiByZWcgfj0gbHVhUC5OT19SRUcgYW5kIHJlZyB+PSBsdWFQOkdFVEFSR19CKGkpIHRoZW4KCQkJCWx1YVA6U0VUQVJHX0EoaSwgcmVnKQoJCQllbHNlICAtLSBubyByZWdpc3RlciB0byBwdXQgdmFsdWUgb3IgcmVnaXN0ZXIgYWxyZWFkeSBoYXMgdGhlIHZhbHVlCgkJCQktLSBkdWUgdG8gdXNlIG9mIGEgdGFibGUgYXMgaSwgaSBjYW5ub3QgYmUgcmVwbGFjZWQgYnkgYW5vdGhlciB0YWJsZQoJCQkJLS0gc28gdGhlIGZvbGxvd2luZyBpcyByZXF1aXJlZDsgdGhlcmUgaXMgbm8gY2hhbmdlIHRvIEFSR19DCgkJCQlsdWFQOlNFVF9PUENPREUoaSwgIk9QX1RFU1QiKQoJCQkJbG9jYWwgYiA9IGx1YVA6R0VUQVJHX0IoaSkKCQkJCWx1YVA6U0VUQVJHX0EoaSwgYikKCQkJCWx1YVA6U0VUQVJHX0IoaSwgMCkKCQkJCS0tICppID0gQ1JFQVRFX0FCQyhPUF9URVNULCBHRVRBUkdfQigqaSksIDAsIEdFVEFSR19DKCppKSk7IC8qIEMgKi8KCQkJZW5kCgkJCXJldHVybiB0cnVlCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIG9ubHkgaW4gbHVhSzpjb2Rlbm90KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOnJlbW92ZXZhbHVlcyhmcywgbGlzdCkKCQkJd2hpbGUgbGlzdCB+PSBzZWxmLk5PX0pVTVAgZG8KCQkJCXNlbGY6cGF0Y2h0ZXN0cmVnKGZzLCBsaXN0LCBsdWFQLk5PX1JFRykKCQkJCWxpc3QgPSBzZWxmOmdldGp1bXAoZnMsIGxpc3QpCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBsdWFLOmRpc2NoYXJnZWpwYygpLCBsdWFLOnBhdGNobGlzdCgpLCBsdWFLOmV4cDJyZWcoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6cGF0Y2hsaXN0YXV4KGZzLCBsaXN0LCB2dGFyZ2V0LCByZWcsIGR0YXJnZXQpCgkJCXdoaWxlIGxpc3Qgfj0gc2VsZi5OT19KVU1QIGRvCgkJCQlsb2NhbCBfbmV4dCA9IHNlbGY6Z2V0anVtcChmcywgbGlzdCkKCQkJCWlmIHNlbGY6cGF0Y2h0ZXN0cmVnKGZzLCBsaXN0LCByZWcpIHRoZW4KCQkJCQlzZWxmOmZpeGp1bXAoZnMsIGxpc3QsIHZ0YXJnZXQpCgkJCQllbHNlCgkJCQkJc2VsZjpmaXhqdW1wKGZzLCBsaXN0LCBkdGFyZ2V0KSAgLS0ganVtcCB0byBkZWZhdWx0IHRhcmdldAoJCQkJZW5kCgkJCQlsaXN0ID0gX25leHQKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIG9ubHkgaW4gbHVhSzpjb2RlKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmRpc2NoYXJnZWpwYyhmcykKCQkJc2VsZjpwYXRjaGxpc3RhdXgoZnMsIGZzLmpwYywgZnMucGMsIGx1YVAuTk9fUkVHLCBmcy5wYykKCQkJZnMuanBjID0gc2VsZi5OT19KVU1QCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIChscGFyc2VyKSBsdWFZOndoaWxlc3RhdCgpLCBsdWFZOnJlcGVhdHN0YXQoKSwgbHVhWTpmb3Jib2R5KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOnBhdGNobGlzdChmcywgbGlzdCwgdGFyZ2V0KQoJCQlpZiB0YXJnZXQgPT0gZnMucGMgdGhlbgoJCQkJc2VsZjpwYXRjaHRvaGVyZShmcywgbGlzdCkKCQkJZWxzZQoJCQkJbHVhX2Fzc2VydCh0YXJnZXQgPCBmcy5wYykKCQkJCXNlbGY6cGF0Y2hsaXN0YXV4KGZzLCBsaXN0LCB0YXJnZXQsIGx1YVAuTk9fUkVHLCB0YXJnZXQpCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBtdWx0aXBsZSBsb2NhdGlvbnMKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOnBhdGNodG9oZXJlKGZzLCBsaXN0KQoJCQlzZWxmOmdldGxhYmVsKGZzKQoJCQlmcy5qcGMgPSBzZWxmOmNvbmNhdChmcywgZnMuanBjLCBsaXN0KQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSAqIGwxIHdhcyBhIHBvaW50ZXIsIG5vdyBsMSBpcyByZXR1cm5lZCBhbmQgY2FsbGVlIGFzc2lnbnMgdGhlIHZhbHVlCgkJLS0gKiB1c2VkIGluIG11bHRpcGxlIGxvY2F0aW9ucwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Y29uY2F0KGZzLCBsMSwgbDIpCgkJCWlmIGwyID09IHNlbGYuTk9fSlVNUCB0aGVuIHJldHVybiBsMQoJCQllbHNlaWYgbDEgPT0gc2VsZi5OT19KVU1QIHRoZW4KCQkJCXJldHVybiBsMgoJCQllbHNlCgkJCQlsb2NhbCBsaXN0ID0gbDEKCQkJCWxvY2FsIF9uZXh0ID0gc2VsZjpnZXRqdW1wKGZzLCBsaXN0KQoJCQkJd2hpbGUgX25leHQgfj0gc2VsZi5OT19KVU1QIGRvICAtLSBmaW5kIGxhc3QgZWxlbWVudAoJCQkJCWxpc3QgPSBfbmV4dAoJCQkJCV9uZXh0ID0gc2VsZjpnZXRqdW1wKGZzLCBsaXN0KQoJCQkJZW5kCgkJCQlzZWxmOmZpeGp1bXAoZnMsIGxpc3QsIGwyKQoJCQllbmQKCQkJcmV0dXJuIGwxCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIGx1YUs6cmVzZXJ2ZXJlZ3MoKSwgKGxwYXJzZXIpIGx1YVk6Zm9ybGlzdCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpjaGVja3N0YWNrKGZzLCBuKQoJCQlsb2NhbCBuZXdzdGFjayA9IGZzLmZyZWVyZWcgKyBuCgkJCWlmIG5ld3N0YWNrID4gZnMuZi5tYXhzdGFja3NpemUgdGhlbgoJCQkJaWYgbmV3c3RhY2sgPj0gc2VsZi5NQVhTVEFDSyB0aGVuCgkJCQkJbHVhWDpzeW50YXhlcnJvcihmcy5scywgImZ1bmN0aW9uIG9yIGV4cHJlc3Npb24gdG9vIGNvbXBsZXgiKQoJCQkJZW5kCgkJCQlmcy5mLm1heHN0YWNrc2l6ZSA9IG5ld3N0YWNrCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBtdWx0aXBsZSBsb2NhdGlvbnMKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOnJlc2VydmVyZWdzKGZzLCBuKQoJCQlzZWxmOmNoZWNrc3RhY2soZnMsIG4pCgkJCWZzLmZyZWVyZWcgPSBmcy5mcmVlcmVnICsgbgoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBsdWFLOmZyZWVleHAoKSwgbHVhSzpkaXNjaGFyZ2V2YXJzKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmZyZWVyZWcoZnMsIHJlZykKCQkJaWYgbm90IGx1YVA6SVNLKHJlZykgYW5kIHJlZyA+PSBmcy5uYWN0dmFyIHRoZW4KCQkJCWZzLmZyZWVyZWcgPSBmcy5mcmVlcmVnIC0gMQoJCQkJbHVhX2Fzc2VydChyZWcgPT0gZnMuZnJlZXJlZykKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIG11bHRpcGxlIGxvY2F0aW9ucwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6ZnJlZWV4cChmcywgZSkKCQkJaWYgZS5rID09ICJWTk9OUkVMT0MiIHRoZW4KCQkJCXNlbGY6ZnJlZXJlZyhmcywgZS5pbmZvKQoJCQllbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gKiBUT0RPIE5PVEUgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgY29ycmVjdCwgc2luY2UgdGhlIGFzc2VydCBmYWlscwoJCS0tICogbHVhSF9zZXQsIHNldG9iaiBkZWxldGVkOyBkaXJlY3QgdGFibGUgYWNjZXNzIHVzZWQgaW5zdGVhZAoJCS0tICogdXNlZCBpbiBsdWFLOnN0cmluZ0soKSwgbHVhSzpudW1iZXJLKCksIGx1YUs6Ym9vbEsoKSwgbHVhSzpuaWxLKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmFkZGsoZnMsIGssIHYpCgkJCWxvY2FsIEwgPSBmcy5MCgkJCWxvY2FsIGlkeCA9IGZzLmhbay52YWx1ZV0KCQkJLS1UVmFsdWUgKmlkeCA9IGx1YUhfc2V0KEwsIGZzLT5oLCBrKTsgLyogQyAqLwoJCQlsb2NhbCBmID0gZnMuZgoJCQlpZiBzZWxmOnR0aXNudW1iZXIoaWR4KSB0aGVuCgkJCQktLVRPRE8gdGhpcyBhc3NlcnQgY3VycmVudGx5IEZBSUxTIChsYXN0IHRlc3RlZCBmb3IgNS4wLjIpCgkJCQktLWx1YV9hc3NlcnQoZnMuZi5rW3NlbGY6bnZhbHVlKGlkeCldID09IHYpCgkJCQktLWx1YV9hc3NlcnQobHVhT19yYXdlcXVhbE9iaigmZnMtPmYtPmtbY2FzdF9pbnQobnZhbHVlKGlkeCkpXSwgdikpOyAvKiBDICovCgkJCQlyZXR1cm4gc2VsZjpudmFsdWUoaWR4KQoJCQllbHNlIC0tIGNvbnN0YW50IG5vdCBmb3VuZDsgY3JlYXRlIGEgbmV3IGVudHJ5CgkJCQlpZHggPSB7fQoJCQkJc2VsZjpzZXRudmFsdWUoaWR4LCBmcy5uaykKCQkJCWZzLmhbay52YWx1ZV0gPSBpZHgKCQkJCS0tIHNldG52YWx1ZShpZHgsIGNhc3RfbnVtKGZzLT5uaykpOyAvKiBDICovCgkJCQlsdWFZOmdyb3d2ZWN0b3IoTCwgZi5rLCBmcy5uaywgZi5zaXplaywgbmlsLAoJCQkJCWx1YVAuTUFYQVJHX0J4LCAiY29uc3RhbnQgdGFibGUgb3ZlcmZsb3ciKQoJCQkJLS0gbG9vcCB0byBpbml0aWFsaXplIGVtcHR5IGYuayBwb3NpdGlvbnMgbm90IHJlcXVpcmVkCgkJCQlmLmtbZnMubmtdID0gdgoJCQkJLS0gc2V0b2JqKEwsICZmLT5rW2ZzLT5ua10sIHYpOyAvKiBDICovCgkJCQktLSBsdWFDX2JhcnJpZXIoTCwgZiwgdik7IC8qIEdDICovCgkJCQlsb2NhbCBuayA9IGZzLm5rCgkJCQlmcy5uayA9IGZzLm5rICsgMQoJCQkJcmV0dXJuIG5rCgkJCWVuZAoKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gY3JlYXRlcyBhbmQgc2V0cyBhIHN0cmluZyBvYmplY3QKCQktLSAqIHVzZWQgaW4gKGxwYXJzZXIpIGx1YVk6Y29kZXN0cmluZygpLCBsdWFZOnNpbmdsZXZhcigpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpzdHJpbmdLKGZzLCBzKQoJCQlsb2NhbCBvID0ge30gIC0tIFRWYWx1ZQoJCQlzZWxmOnNldHN2YWx1ZShvLCBzKQoJCQlyZXR1cm4gc2VsZjphZGRrKGZzLCBvLCBvKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBjcmVhdGVzIGFuZCBzZXRzIGEgbnVtYmVyIG9iamVjdAoJCS0tICogdXNlZCBpbiBsdWFLOnByZWZpeCgpIGZvciBuZWdhdGl2ZSAob3IgbmVnYXRpb24gb2YpIG51bWJlcnMKCQktLSAqIHVzZWQgaW4gKGxwYXJzZXIpIGx1YVk6c2ltcGxlZXhwKCksIGx1YVk6Zm9ybnVtKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOm51bWJlcksoZnMsIHIpCgkJCWxvY2FsIG8gPSB7fSAgLS0gVFZhbHVlCgkJCXNlbGY6c2V0bnZhbHVlKG8sIHIpCgkJCXJldHVybiBzZWxmOmFkZGsoZnMsIG8sIG8pCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGNyZWF0ZXMgYW5kIHNldHMgYSBib29sZWFuIG9iamVjdAoJCS0tICogdXNlZCBvbmx5IGluIGx1YUs6ZXhwMlJLKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmJvb2xLKGZzLCBiKQoJCQlsb2NhbCBvID0ge30gIC0tIFRWYWx1ZQoJCQlzZWxmOnNldGJ2YWx1ZShvLCBiKQoJCQlyZXR1cm4gc2VsZjphZGRrKGZzLCBvLCBvKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBjcmVhdGVzIGFuZCBzZXRzIGEgbmlsIG9iamVjdAoJCS0tICogdXNlZCBvbmx5IGluIGx1YUs6ZXhwMlJLKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOm5pbEsoZnMpCgkJCWxvY2FsIGssIHYgPSB7fSwge30gIC0tIFRWYWx1ZQoJCQlzZWxmOnNldG5pbHZhbHVlKHYpCgkJCS0tIGNhbm5vdCB1c2UgbmlsIGFzIGtleTsgaW5zdGVhZCB1c2UgdGFibGUgaXRzZWxmIHRvIHJlcHJlc2VudCBuaWwKCQkJc2VsZjpzZXRodmFsdWUoaywgZnMuaCkKCQkJcmV0dXJuIHNlbGY6YWRkayhmcywgaywgdikKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gbHVhSzpzZXRtdWx0cmV0KCksIChscGFyc2VyKSBsdWFZOmFkanVzdF9hc3NpZ24oKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6c2V0cmV0dXJucyhmcywgZSwgbnJlc3VsdHMpCgkJCWlmIGUuayA9PSAiVkNBTEwiIHRoZW4gIC0tIGV4cHJlc3Npb24gaXMgYW4gb3BlbiBmdW5jdGlvbiBjYWxsPwoJCQkJbHVhUDpTRVRBUkdfQyhzZWxmOmdldGNvZGUoZnMsIGUpLCBucmVzdWx0cyArIDEpCgkJCWVsc2VpZiBlLmsgPT0gIlZWQVJBUkciIHRoZW4KCQkJCWx1YVA6U0VUQVJHX0Ioc2VsZjpnZXRjb2RlKGZzLCBlKSwgbnJlc3VsdHMgKyAxKTsKCQkJCWx1YVA6U0VUQVJHX0Eoc2VsZjpnZXRjb2RlKGZzLCBlKSwgZnMuZnJlZXJlZyk7CgkJCQlsdWFLOnJlc2VydmVyZWdzKGZzLCAxKQoJCQllbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gbHVhSzpkaXNjaGFyZ2V2YXJzKCksIChscGFyc2VyKSBsdWFZOmFzc2lnbm1lbnQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6c2V0b25lcmV0KGZzLCBlKQoJCQlpZiBlLmsgPT0gIlZDQUxMIiB0aGVuICAtLSBleHByZXNzaW9uIGlzIGFuIG9wZW4gZnVuY3Rpb24gY2FsbD8KCQkJCWUuayA9ICJWTk9OUkVMT0MiCgkJCQllLmluZm8gPSBsdWFQOkdFVEFSR19BKHNlbGY6Z2V0Y29kZShmcywgZSkpCgkJCWVsc2VpZiBlLmsgPT0gIlZWQVJBUkciIHRoZW4KCQkJCWx1YVA6U0VUQVJHX0Ioc2VsZjpnZXRjb2RlKGZzLCBlKSwgMikKCQkJCWUuayA9ICJWUkVMT0NBQkxFIiAgLS0gY2FuIHJlbG9jYXRlIGl0cyBzaW1wbGUgcmVzdWx0CgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBtdWx0aXBsZSBsb2NhdGlvbnMKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmRpc2NoYXJnZXZhcnMoZnMsIGUpCgkJCWxvY2FsIGsgPSBlLmsKCQkJaWYgayA9PSAiVkxPQ0FMIiB0aGVuCgkJCQllLmsgPSAiVk5PTlJFTE9DIgoJCQllbHNlaWYgayA9PSAiVlVQVkFMIiB0aGVuCgkJCQllLmluZm8gPSBzZWxmOmNvZGVBQkMoZnMsICJPUF9HRVRVUFZBTCIsIDAsIGUuaW5mbywgMCkKCQkJCWUuayA9ICJWUkVMT0NBQkxFIgoJCQllbHNlaWYgayA9PSAiVkdMT0JBTCIgdGhlbgoJCQkJZS5pbmZvID0gc2VsZjpjb2RlQUJ4KGZzLCAiT1BfR0VUR0xPQkFMIiwgMCwgZS5pbmZvKQoJCQkJZS5rID0gIlZSRUxPQ0FCTEUiCgkJCWVsc2VpZiBrID09ICJWSU5ERVhFRCIgdGhlbgoJCQkJc2VsZjpmcmVlcmVnKGZzLCBlLmF1eCkKCQkJCXNlbGY6ZnJlZXJlZyhmcywgZS5pbmZvKQoJCQkJZS5pbmZvID0gc2VsZjpjb2RlQUJDKGZzLCAiT1BfR0VUVEFCTEUiLCAwLCBlLmluZm8sIGUuYXV4KQoJCQkJZS5rID0gIlZSRUxPQ0FCTEUiCgkJCWVsc2VpZiBrID09ICJWVkFSQVJHIiBvciBrID09ICJWQ0FMTCIgdGhlbgoJCQkJc2VsZjpzZXRvbmVyZXQoZnMsIGUpCgkJCWVsc2UKCQkJCS0tIHRoZXJlIGlzIG9uZSB2YWx1ZSBhdmFpbGFibGUgKHNvbWV3aGVyZSkKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIG9ubHkgaW4gbHVhSzpleHAycmVnKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmNvZGVfbGFiZWwoZnMsIEEsIGIsIGp1bXApCgkJCXNlbGY6Z2V0bGFiZWwoZnMpICAtLSB0aG9zZSBpbnN0cnVjdGlvbnMgbWF5IGJlIGp1bXAgdGFyZ2V0cwoJCQlyZXR1cm4gc2VsZjpjb2RlQUJDKGZzLCAiT1BfTE9BREJPT0wiLCBBLCBiLCBqdW1wKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBsdWFLOmRpc2NoYXJnZTJhbnlyZWcoKSwgbHVhSzpleHAycmVnKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmRpc2NoYXJnZTJyZWcoZnMsIGUsIHJlZykKCQkJc2VsZjpkaXNjaGFyZ2V2YXJzKGZzLCBlKQoJCQlsb2NhbCBrID0gZS5rCgkJCWlmIGsgPT0gIlZOSUwiIHRoZW4KCQkJCXNlbGY6X25pbChmcywgcmVnLCAxKQoJCQllbHNlaWYgayA9PSAiVkZBTFNFIiBvciBrID09ICJWVFJVRSIgdGhlbgoJCQkJc2VsZjpjb2RlQUJDKGZzLCAiT1BfTE9BREJPT0wiLCByZWcsIChlLmsgPT0gIlZUUlVFIikgYW5kIDEgb3IgMCwgMCkKCQkJZWxzZWlmIGsgPT0gIlZLIiB0aGVuCgkJCQlzZWxmOmNvZGVBQngoZnMsICJPUF9MT0FESyIsIHJlZywgZS5pbmZvKQoJCQllbHNlaWYgayA9PSAiVktOVU0iIHRoZW4KCQkJCXNlbGY6Y29kZUFCeChmcywgIk9QX0xPQURLIiwgcmVnLCBzZWxmOm51bWJlcksoZnMsIGUubnZhbCkpCgkJCWVsc2VpZiBrID09ICJWUkVMT0NBQkxFIiB0aGVuCgkJCQlsb2NhbCBwYyA9IHNlbGY6Z2V0Y29kZShmcywgZSkKCQkJCWx1YVA6U0VUQVJHX0EocGMsIHJlZykKCQkJZWxzZWlmIGsgPT0gIlZOT05SRUxPQyIgdGhlbgoJCQkJaWYgcmVnIH49IGUuaW5mbyB0aGVuCgkJCQkJc2VsZjpjb2RlQUJDKGZzLCAiT1BfTU9WRSIsIHJlZywgZS5pbmZvLCAwKQoJCQkJZW5kCgkJCWVsc2UKCQkJCWx1YV9hc3NlcnQoZS5rID09ICJWVk9JRCIgb3IgZS5rID09ICJWSk1QIikKCQkJCXJldHVybiAgLS0gbm90aGluZyB0byBkby4uLgoJCQllbmQKCQkJZS5pbmZvID0gcmVnCgkJCWUuayA9ICJWTk9OUkVMT0MiCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIGx1YUs6anVtcG9uY29uZCgpLCBsdWFLOmNvZGVub3QoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6ZGlzY2hhcmdlMmFueXJlZyhmcywgZSkKCQkJaWYgZS5rIH49ICJWTk9OUkVMT0MiIHRoZW4KCQkJCXNlbGY6cmVzZXJ2ZXJlZ3MoZnMsIDEpCgkJCQlzZWxmOmRpc2NoYXJnZTJyZWcoZnMsIGUsIGZzLmZyZWVyZWcgLSAxKQoJCQllbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gbHVhSzpleHAybmV4dHJlZygpLCBsdWFLOmV4cDJhbnlyZWcoKSwgbHVhSzpzdG9yZXZhcigpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpleHAycmVnKGZzLCBlLCByZWcpCgkJCXNlbGY6ZGlzY2hhcmdlMnJlZyhmcywgZSwgcmVnKQoJCQlpZiBlLmsgPT0gIlZKTVAiIHRoZW4KCQkJCWUudCA9IHNlbGY6Y29uY2F0KGZzLCBlLnQsIGUuaW5mbykgIC0tIHB1dCB0aGlzIGp1bXAgaW4gJ3QnIGxpc3QKCQkJZW5kCgkJCWlmIHNlbGY6aGFzanVtcHMoZSkgdGhlbgoJCQkJbG9jYWwgZmluYWwgIC0tIHBvc2l0aW9uIGFmdGVyIHdob2xlIGV4cHJlc3Npb24KCQkJCWxvY2FsIHBfZiA9IHNlbGYuTk9fSlVNUCAgLS0gcG9zaXRpb24gb2YgYW4gZXZlbnR1YWwgTE9BRCBmYWxzZQoJCQkJbG9jYWwgcF90ID0gc2VsZi5OT19KVU1QICAtLSBwb3NpdGlvbiBvZiBhbiBldmVudHVhbCBMT0FEIHRydWUKCQkJCWlmIHNlbGY6bmVlZF92YWx1ZShmcywgZS50KSBvciBzZWxmOm5lZWRfdmFsdWUoZnMsIGUuZikgdGhlbgoJCQkJCWxvY2FsIGZqID0gKGUuayA9PSAiVkpNUCIpIGFuZCBzZWxmLk5PX0pVTVAgb3Igc2VsZjpqdW1wKGZzKQoJCQkJCXBfZiA9IHNlbGY6Y29kZV9sYWJlbChmcywgcmVnLCAwLCAxKQoJCQkJCXBfdCA9IHNlbGY6Y29kZV9sYWJlbChmcywgcmVnLCAxLCAwKQoJCQkJCXNlbGY6cGF0Y2h0b2hlcmUoZnMsIGZqKQoJCQkJZW5kCgkJCQlmaW5hbCA9IHNlbGY6Z2V0bGFiZWwoZnMpCgkJCQlzZWxmOnBhdGNobGlzdGF1eChmcywgZS5mLCBmaW5hbCwgcmVnLCBwX2YpCgkJCQlzZWxmOnBhdGNobGlzdGF1eChmcywgZS50LCBmaW5hbCwgcmVnLCBwX3QpCgkJCWVuZAoJCQllLmYsIGUudCA9IHNlbGYuTk9fSlVNUCwgc2VsZi5OT19KVU1QCgkJCWUuaW5mbyA9IHJlZwoJCQllLmsgPSAiVk5PTlJFTE9DIgoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBtdWx0aXBsZSBsb2NhdGlvbnMKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmV4cDJuZXh0cmVnKGZzLCBlKQoJCQlzZWxmOmRpc2NoYXJnZXZhcnMoZnMsIGUpCgkJCXNlbGY6ZnJlZWV4cChmcywgZSkKCQkJc2VsZjpyZXNlcnZlcmVncyhmcywgMSkKCQkJc2VsZjpleHAycmVnKGZzLCBlLCBmcy5mcmVlcmVnIC0gMSkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gbXVsdGlwbGUgbG9jYXRpb25zCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpleHAyYW55cmVnKGZzLCBlKQoJCQlzZWxmOmRpc2NoYXJnZXZhcnMoZnMsIGUpCgkJCWlmIGUuayA9PSAiVk5PTlJFTE9DIiB0aGVuCgkJCQlpZiBub3Qgc2VsZjpoYXNqdW1wcyhlKSB0aGVuICAtLSBleHAgaXMgYWxyZWFkeSBpbiBhIHJlZ2lzdGVyCgkJCQkJcmV0dXJuIGUuaW5mbwoJCQkJZW5kCgkJCQlpZiBlLmluZm8gPj0gZnMubmFjdHZhciB0aGVuICAtLSByZWcuIGlzIG5vdCBhIGxvY2FsPwoJCQkJCXNlbGY6ZXhwMnJlZyhmcywgZSwgZS5pbmZvKSAgLS0gcHV0IHZhbHVlIG9uIGl0CgkJCQkJcmV0dXJuIGUuaW5mbwoJCQkJZW5kCgkJCWVuZAoJCQlzZWxmOmV4cDJuZXh0cmVnKGZzLCBlKSAgLS0gZGVmYXVsdAoJCQlyZXR1cm4gZS5pbmZvCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIGx1YUs6ZXhwMlJLKCksIGx1YUs6cHJlZml4KCksIGx1YUs6cG9zZml4KCkKCQktLSAqIHVzZWQgaW4gKGxwYXJzZXIpIGx1YVk6eWluZGV4KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmV4cDJ2YWwoZnMsIGUpCgkJCWlmIHNlbGY6aGFzanVtcHMoZSkgdGhlbgoJCQkJc2VsZjpleHAyYW55cmVnKGZzLCBlKQoJCQllbHNlCgkJCQlzZWxmOmRpc2NoYXJnZXZhcnMoZnMsIGUpCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBtdWx0aXBsZSBsb2NhdGlvbnMKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmV4cDJSSyhmcywgZSkKCQkJc2VsZjpleHAydmFsKGZzLCBlKQoJCQlsb2NhbCBrID0gZS5rCgkJCWlmIGsgPT0gIlZLTlVNIiBvciBrID09ICJWVFJVRSIgb3IgayA9PSAiVkZBTFNFIiBvciBrID09ICJWTklMIiB0aGVuCgkJCQlpZiBmcy5uayA8PSBsdWFQLk1BWElOREVYUksgdGhlbiAgLS0gY29uc3RhbnQgZml0IGluIFJLIG9wZXJhbmQ/CgkJCQkJLS0gY29udmVydGVkIGZyb20gYSAyLWRlZXAgdGVybmFyeSBvcGVyYXRvciBleHByZXNzaW9uCgkJCQkJaWYgZS5rID09ICJWTklMIiB0aGVuCgkJCQkJCWUuaW5mbyA9IHNlbGY6bmlsSyhmcykKCQkJCQllbHNlCgkJCQkJCWUuaW5mbyA9IChlLmsgPT0gIlZLTlVNIikgYW5kIHNlbGY6bnVtYmVySyhmcywgZS5udmFsKQoJCQkJCQkJb3Igc2VsZjpib29sSyhmcywgZS5rID09ICJWVFJVRSIpCgkJCQkJZW5kCgkJCQkJZS5rID0gIlZLIgoJCQkJCXJldHVybiBsdWFQOlJLQVNLKGUuaW5mbykKCQkJCWVuZAoJCQllbHNlaWYgayA9PSAiVksiIHRoZW4KCQkJCWlmIGUuaW5mbyA8PSBsdWFQLk1BWElOREVYUksgdGhlbiAgLS0gY29uc3RhbnQgZml0IGluIGFyZ0M/CgkJCQkJcmV0dXJuIGx1YVA6UktBU0soZS5pbmZvKQoJCQkJZW5kCgkJCWVsc2UKCQkJCS0tIGRlZmF1bHQKCQkJZW5kCgkJCS0tIG5vdCBhIGNvbnN0YW50IGluIHRoZSByaWdodCByYW5nZTogcHV0IGl0IGluIGEgcmVnaXN0ZXIKCQkJcmV0dXJuIHNlbGY6ZXhwMmFueXJlZyhmcywgZSkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gKGxwYXJzZXIpIGx1YVk6YXNzaWdubWVudCgpLCBsdWFZOmxvY2FsZnVuYygpLCBsdWFZOmZ1bmNzdGF0KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOnN0b3JldmFyKGZzLCB2YXIsIGV4KQoJCQlsb2NhbCBrID0gdmFyLmsKCQkJaWYgayA9PSAiVkxPQ0FMIiB0aGVuCgkJCQlzZWxmOmZyZWVleHAoZnMsIGV4KQoJCQkJc2VsZjpleHAycmVnKGZzLCBleCwgdmFyLmluZm8pCgkJCQlyZXR1cm4KCQkJZWxzZWlmIGsgPT0gIlZVUFZBTCIgdGhlbgoJCQkJbG9jYWwgZSA9IHNlbGY6ZXhwMmFueXJlZyhmcywgZXgpCgkJCQlzZWxmOmNvZGVBQkMoZnMsICJPUF9TRVRVUFZBTCIsIGUsIHZhci5pbmZvLCAwKQoJCQllbHNlaWYgayA9PSAiVkdMT0JBTCIgdGhlbgoJCQkJbG9jYWwgZSA9IHNlbGY6ZXhwMmFueXJlZyhmcywgZXgpCgkJCQlzZWxmOmNvZGVBQngoZnMsICJPUF9TRVRHTE9CQUwiLCBlLCB2YXIuaW5mbykKCQkJZWxzZWlmIGsgPT0gIlZJTkRFWEVEIiB0aGVuCgkJCQlsb2NhbCBlID0gc2VsZjpleHAyUksoZnMsIGV4KQoJCQkJc2VsZjpjb2RlQUJDKGZzLCAiT1BfU0VUVEFCTEUiLCB2YXIuaW5mbywgdmFyLmF1eCwgZSkKCQkJZWxzZQoJCQkJbHVhX2Fzc2VydCgwKSAgLS0gaW52YWxpZCB2YXIga2luZCB0byBzdG9yZQoJCQllbmQKCQkJc2VsZjpmcmVlZXhwKGZzLCBleCkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgb25seSBpbiAobHBhcnNlcikgbHVhWTpwcmltYXJ5ZXhwKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOl9zZWxmKGZzLCBlLCBrZXkpCgkJCXNlbGY6ZXhwMmFueXJlZyhmcywgZSkKCQkJc2VsZjpmcmVlZXhwKGZzLCBlKQoJCQlsb2NhbCBmdW5jID0gZnMuZnJlZXJlZwoJCQlzZWxmOnJlc2VydmVyZWdzKGZzLCAyKQoJCQlzZWxmOmNvZGVBQkMoZnMsICJPUF9TRUxGIiwgZnVuYywgZS5pbmZvLCBzZWxmOmV4cDJSSyhmcywga2V5KSkKCQkJc2VsZjpmcmVlZXhwKGZzLCBrZXkpCgkJCWUuaW5mbyA9IGZ1bmMKCQkJZS5rID0gIlZOT05SRUxPQyIKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gbHVhSzpnb2lmdHJ1ZSgpLCBsdWFLOmNvZGVub3QoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6aW52ZXJ0anVtcChmcywgZSkKCQkJbG9jYWwgcGMgPSBzZWxmOmdldGp1bXBjb250cm9sKGZzLCBlLmluZm8pCgkJCWx1YV9hc3NlcnQobHVhUDp0ZXN0VE1vZGUobHVhUDpHRVRfT1BDT0RFKHBjKSkgfj0gMCBhbmQKCQkJCWx1YVA6R0VUX09QQ09ERShwYykgfj0gIk9QX1RFU1RTRVQiIGFuZAoJCQkJbHVhUDpHRVRfT1BDT0RFKHBjKSB+PSAiT1BfVEVTVCIpCgkJCWx1YVA6U0VUQVJHX0EocGMsIChsdWFQOkdFVEFSR19BKHBjKSA9PSAwKSBhbmQgMSBvciAwKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBsdWFLOmdvaWZ0cnVlKCksIGx1YUs6Z29pZmZhbHNlKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmp1bXBvbmNvbmQoZnMsIGUsIGNvbmQpCgkJCWlmIGUuayA9PSAiVlJFTE9DQUJMRSIgdGhlbgoJCQkJbG9jYWwgaWUgPSBzZWxmOmdldGNvZGUoZnMsIGUpCgkJCQlpZiBsdWFQOkdFVF9PUENPREUoaWUpID09ICJPUF9OT1QiIHRoZW4KCQkJCQlmcy5wYyA9IGZzLnBjIC0gMSAgLS0gcmVtb3ZlIHByZXZpb3VzIE9QX05PVAoJCQkJCXJldHVybiBzZWxmOmNvbmRqdW1wKGZzLCAiT1BfVEVTVCIsIGx1YVA6R0VUQVJHX0IoaWUpLCAwLCBjb25kIGFuZCAwIG9yIDEpCgkJCQllbmQKCQkJCS0tIGVsc2UgZ28gdGhyb3VnaAoJCQllbmQKCQkJc2VsZjpkaXNjaGFyZ2UyYW55cmVnKGZzLCBlKQoJCQlzZWxmOmZyZWVleHAoZnMsIGUpCgkJCXJldHVybiBzZWxmOmNvbmRqdW1wKGZzLCAiT1BfVEVTVFNFVCIsIGx1YVAuTk9fUkVHLCBlLmluZm8sIGNvbmQgYW5kIDEgb3IgMCkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gbHVhSzppbmZpeCgpLCAobHBhcnNlcikgbHVhWTpjb25kKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmdvaWZ0cnVlKGZzLCBlKQoJCQlsb2NhbCBwYyAgLS0gcGMgb2YgbGFzdCBqdW1wCgkJCXNlbGY6ZGlzY2hhcmdldmFycyhmcywgZSkKCQkJbG9jYWwgayA9IGUuawoJCQlpZiBrID09ICJWSyIgb3IgayA9PSAiVktOVU0iIG9yIGsgPT0gIlZUUlVFIiB0aGVuCgkJCQlwYyA9IHNlbGYuTk9fSlVNUCAgLS0gYWx3YXlzIHRydWU7IGRvIG5vdGhpbmcKCQkJZWxzZWlmIGsgPT0gIlZGQUxTRSIgdGhlbgoJCQkJcGMgPSBzZWxmOmp1bXAoZnMpICAtLSBhbHdheXMganVtcAoJCQllbHNlaWYgayA9PSAiVkpNUCIgdGhlbgoJCQkJc2VsZjppbnZlcnRqdW1wKGZzLCBlKQoJCQkJcGMgPSBlLmluZm8KCQkJZWxzZQoJCQkJcGMgPSBzZWxmOmp1bXBvbmNvbmQoZnMsIGUsIGZhbHNlKQoJCQllbmQKCQkJZS5mID0gc2VsZjpjb25jYXQoZnMsIGUuZiwgcGMpICAtLSBpbnNlcnQgbGFzdCBqdW1wIGluIGBmJyBsaXN0CgkJCXNlbGY6cGF0Y2h0b2hlcmUoZnMsIGUudCkKCQkJZS50ID0gc2VsZi5OT19KVU1QCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIGx1YUs6aW5maXgoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Z29pZmZhbHNlKGZzLCBlKQoJCQlsb2NhbCBwYyAgLS0gcGMgb2YgbGFzdCBqdW1wCgkJCXNlbGY6ZGlzY2hhcmdldmFycyhmcywgZSkKCQkJbG9jYWwgayA9IGUuawoJCQlpZiBrID09ICJWTklMIiBvciBrID09ICJWRkFMU0UidGhlbgoJCQkJcGMgPSBzZWxmLk5PX0pVTVAgIC0tIGFsd2F5cyBmYWxzZTsgZG8gbm90aGluZwoJCQllbHNlaWYgayA9PSAiVlRSVUUiIHRoZW4KCQkJCXBjID0gc2VsZjpqdW1wKGZzKSAgLS0gYWx3YXlzIGp1bXAKCQkJZWxzZWlmIGsgPT0gIlZKTVAiIHRoZW4KCQkJCXBjID0gZS5pbmZvCgkJCWVsc2UKCQkJCXBjID0gc2VsZjpqdW1wb25jb25kKGZzLCBlLCB0cnVlKQoJCQllbmQKCQkJZS50ID0gc2VsZjpjb25jYXQoZnMsIGUudCwgcGMpICAtLSBpbnNlcnQgbGFzdCBqdW1wIGluIGB0JyBsaXN0CgkJCXNlbGY6cGF0Y2h0b2hlcmUoZnMsIGUuZikKCQkJZS5mID0gc2VsZi5OT19KVU1QCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIG9ubHkgaW4gbHVhSzpwcmVmaXgoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Y29kZW5vdChmcywgZSkKCQkJc2VsZjpkaXNjaGFyZ2V2YXJzKGZzLCBlKQoJCQlsb2NhbCBrID0gZS5rCgkJCWlmIGsgPT0gIlZOSUwiIG9yIGsgPT0gIlZGQUxTRSIgdGhlbgoJCQkJZS5rID0gIlZUUlVFIgoJCQllbHNlaWYgayA9PSAiVksiIG9yIGsgPT0gIlZLTlVNIiBvciBrID09ICJWVFJVRSIgdGhlbgoJCQkJZS5rID0gIlZGQUxTRSIKCQkJZWxzZWlmIGsgPT0gIlZKTVAiIHRoZW4KCQkJCXNlbGY6aW52ZXJ0anVtcChmcywgZSkKCQkJZWxzZWlmIGsgPT0gIlZSRUxPQ0FCTEUiIG9yIGsgPT0gIlZOT05SRUxPQyIgdGhlbgoJCQkJc2VsZjpkaXNjaGFyZ2UyYW55cmVnKGZzLCBlKQoJCQkJc2VsZjpmcmVlZXhwKGZzLCBlKQoJCQkJZS5pbmZvID0gc2VsZjpjb2RlQUJDKGZzLCAiT1BfTk9UIiwgMCwgZS5pbmZvLCAwKQoJCQkJZS5rID0gIlZSRUxPQ0FCTEUiCgkJCWVsc2UKCQkJCWx1YV9hc3NlcnQoMCkgIC0tIGNhbm5vdCBoYXBwZW4KCQkJZW5kCgkJCS0tIGludGVyY2hhbmdlIHRydWUgYW5kIGZhbHNlIGxpc3RzCgkJCWUuZiwgZS50ID0gZS50LCBlLmYKCQkJc2VsZjpyZW1vdmV2YWx1ZXMoZnMsIGUuZikKCQkJc2VsZjpyZW1vdmV2YWx1ZXMoZnMsIGUudCkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgaW4gKGxwYXJzZXIpIGx1YVk6ZmllbGQoKSwgbHVhWTpwcmltYXJ5ZXhwKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmluZGV4ZWQoZnMsIHQsIGspCgkJCXQuYXV4ID0gc2VsZjpleHAyUksoZnMsIGspCgkJCXQuayA9ICJWSU5ERVhFRCIKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgb25seSBpbiBsdWFLOmNvZGVhcml0aCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpjb25zdGZvbGRpbmcob3AsIGUxLCBlMikKCQkJbG9jYWwgcgoJCQlpZiBub3Qgc2VsZjppc251bWVyYWwoZTEpIG9yIG5vdCBzZWxmOmlzbnVtZXJhbChlMikgdGhlbiByZXR1cm4gZmFsc2UgZW5kCgkJCWxvY2FsIHYxID0gZTEubnZhbAoJCQlsb2NhbCB2MiA9IGUyLm52YWwKCQkJaWYgb3AgPT0gIk9QX0FERCIgdGhlbgoJCQkJciA9IHNlbGY6bnVtYWRkKHYxLCB2MikKCQkJZWxzZWlmIG9wID09ICJPUF9TVUIiIHRoZW4KCQkJCXIgPSBzZWxmOm51bXN1Yih2MSwgdjIpCgkJCWVsc2VpZiBvcCA9PSAiT1BfTVVMIiB0aGVuCgkJCQlyID0gc2VsZjpudW1tdWwodjEsIHYyKQoJCQllbHNlaWYgb3AgPT0gIk9QX0RJViIgdGhlbgoJCQkJaWYgdjIgPT0gMCB0aGVuIHJldHVybiBmYWxzZSBlbmQgIC0tIGRvIG5vdCBhdHRlbXB0IHRvIGRpdmlkZSBieSAwCgkJCQlyID0gc2VsZjpudW1kaXYodjEsIHYyKQoJCQllbHNlaWYgb3AgPT0gIk9QX01PRCIgdGhlbgoJCQkJaWYgdjIgPT0gMCB0aGVuIHJldHVybiBmYWxzZSBlbmQgIC0tIGRvIG5vdCBhdHRlbXB0IHRvIGRpdmlkZSBieSAwCgkJCQlyID0gc2VsZjpudW1tb2QodjEsIHYyKQoJCQllbHNlaWYgb3AgPT0gIk9QX1BPVyIgdGhlbgoJCQkJciA9IHNlbGY6bnVtcG93KHYxLCB2MikKCQkJZWxzZWlmIG9wID09ICJPUF9VTk0iIHRoZW4KCQkJCXIgPSBzZWxmOm51bXVubSh2MSkKCQkJZWxzZWlmIG9wID09ICJPUF9MRU4iIHRoZW4KCQkJCXJldHVybiBmYWxzZSAgLS0gbm8gY29uc3RhbnQgZm9sZGluZyBmb3IgJ2xlbicKCQkJZWxzZQoJCQkJbHVhX2Fzc2VydCgwKQoJCQkJciA9IDAKCQkJZW5kCgkJCWlmIHNlbGY6bnVtaXNuYW4ocikgdGhlbiByZXR1cm4gZmFsc2UgZW5kICAtLSBkbyBub3QgYXR0ZW1wdCB0byBwcm9kdWNlIE5hTgoJCQllMS5udmFsID0gcgoJCQlyZXR1cm4gdHJ1ZQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBpbiBsdWFLOnByZWZpeCgpLCBsdWFLOnBvc2ZpeCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpjb2RlYXJpdGgoZnMsIG9wLCBlMSwgZTIpCgkJCWlmIHNlbGY6Y29uc3Rmb2xkaW5nKG9wLCBlMSwgZTIpIHRoZW4KCQkJCXJldHVybgoJCQllbHNlCgkJCQlsb2NhbCBvMiA9IChvcCB+PSAiT1BfVU5NIiBhbmQgb3Agfj0gIk9QX0xFTiIpIGFuZCBzZWxmOmV4cDJSSyhmcywgZTIpIG9yIDAKCQkJCWxvY2FsIG8xID0gc2VsZjpleHAyUksoZnMsIGUxKQoJCQkJaWYgbzEgPiBvMiB0aGVuCgkJCQkJc2VsZjpmcmVlZXhwKGZzLCBlMSkKCQkJCQlzZWxmOmZyZWVleHAoZnMsIGUyKQoJCQkJZWxzZQoJCQkJCXNlbGY6ZnJlZWV4cChmcywgZTIpCgkJCQkJc2VsZjpmcmVlZXhwKGZzLCBlMSkKCQkJCWVuZAoJCQkJZTEuaW5mbyA9IHNlbGY6Y29kZUFCQyhmcywgb3AsIDAsIG8xLCBvMikKCQkJCWUxLmsgPSAiVlJFTE9DQUJMRSIKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIG9ubHkgaW4gbHVhSzpwb3NmaXgoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Y29kZWNvbXAoZnMsIG9wLCBjb25kLCBlMSwgZTIpCgkJCWxvY2FsIG8xID0gc2VsZjpleHAyUksoZnMsIGUxKQoJCQlsb2NhbCBvMiA9IHNlbGY6ZXhwMlJLKGZzLCBlMikKCQkJc2VsZjpmcmVlZXhwKGZzLCBlMikKCQkJc2VsZjpmcmVlZXhwKGZzLCBlMSkKCQkJaWYgY29uZCA9PSAwIGFuZCBvcCB+PSAiT1BfRVEiIHRoZW4KCQkJCS0tIGV4Y2hhbmdlIGFyZ3MgdG8gcmVwbGFjZSBieSBgPCcgb3IgYDw9JwoJCQkJbzEsIG8yID0gbzIsIG8xICAtLSBvMSA8PT0+IG8yCgkJCQljb25kID0gMQoJCQllbmQKCQkJZTEuaW5mbyA9IHNlbGY6Y29uZGp1bXAoZnMsIG9wLCBjb25kLCBvMSwgbzIpCgkJCWUxLmsgPSAiVkpNUCIKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgb25seSBpbiAobHBhcnNlcikgbHVhWTpzdWJleHByKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOnByZWZpeChmcywgb3AsIGUpCgkJCWxvY2FsIGUyID0ge30gIC0tIGV4cGRlc2MKCQkJZTIudCwgZTIuZiA9IHNlbGYuTk9fSlVNUCwgc2VsZi5OT19KVU1QCgkJCWUyLmsgPSAiVktOVU0iCgkJCWUyLm52YWwgPSAwCgkJCWlmIG9wID09ICJPUFJfTUlOVVMiIHRoZW4KCQkJCWlmIG5vdCBzZWxmOmlzbnVtZXJhbChlKSB0aGVuCgkJCQkJc2VsZjpleHAyYW55cmVnKGZzLCBlKSAgLS0gY2Fubm90IG9wZXJhdGUgb24gbm9uLW51bWVyaWMgY29uc3RhbnRzCgkJCQllbmQKCQkJCXNlbGY6Y29kZWFyaXRoKGZzLCAiT1BfVU5NIiwgZSwgZTIpCgkJCWVsc2VpZiBvcCA9PSAiT1BSX05PVCIgdGhlbgoJCQkJc2VsZjpjb2Rlbm90KGZzLCBlKQoJCQllbHNlaWYgb3AgPT0gIk9QUl9MRU4iIHRoZW4KCQkJCXNlbGY6ZXhwMmFueXJlZyhmcywgZSkgIC0tIGNhbm5vdCBvcGVyYXRlIG9uIGNvbnN0YW50cwoJCQkJc2VsZjpjb2RlYXJpdGgoZnMsICJPUF9MRU4iLCBlLCBlMikKCQkJZWxzZQoJCQkJbHVhX2Fzc2VydCgwKQoJCQllbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0KCQktLSAqIHVzZWQgb25seSBpbiAobHBhcnNlcikgbHVhWTpzdWJleHByKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmluZml4KGZzLCBvcCwgdikKCQkJaWYgb3AgPT0gIk9QUl9BTkQiIHRoZW4KCQkJCXNlbGY6Z29pZnRydWUoZnMsIHYpCgkJCWVsc2VpZiBvcCA9PSAiT1BSX09SIiB0aGVuCgkJCQlzZWxmOmdvaWZmYWxzZShmcywgdikKCQkJZWxzZWlmIG9wID09ICJPUFJfQ09OQ0FUIiB0aGVuCgkJCQlzZWxmOmV4cDJuZXh0cmVnKGZzLCB2KSAgLS0gb3BlcmFuZCBtdXN0IGJlIG9uIHRoZSAnc3RhY2snCgkJCWVsc2VpZiBvcCA9PSAiT1BSX0FERCIgb3Igb3AgPT0gIk9QUl9TVUIiIG9yCgkJCQlvcCA9PSAiT1BSX01VTCIgb3Igb3AgPT0gIk9QUl9ESVYiIG9yCgkJCQlvcCA9PSAiT1BSX01PRCIgb3Igb3AgPT0gIk9QUl9QT1ciIHRoZW4KCQkJCWlmIG5vdCBzZWxmOmlzbnVtZXJhbCh2KSB0aGVuIHNlbGY6ZXhwMlJLKGZzLCB2KSBlbmQKCQkJZWxzZQoJCQkJc2VsZjpleHAyUksoZnMsIHYpCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLQoJCS0tICogdXNlZCBvbmx5IGluIChscGFyc2VyKSBsdWFZOnN1YmV4cHIoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHRhYmxlIGxvb2t1cHMgdG8gc2ltcGxpZnkgdGVzdGluZwoJCWx1YUsuYXJpdGhfb3AgPSB7CgkJCU9QUl9BREQgPSAiT1BfQUREIiwgT1BSX1NVQiA9ICJPUF9TVUIiLCBPUFJfTVVMID0gIk9QX01VTCIsCgkJCU9QUl9ESVYgPSAiT1BfRElWIiwgT1BSX01PRCA9ICJPUF9NT0QiLCBPUFJfUE9XID0gIk9QX1BPVyIsCgkJfQoJCWx1YUsuY29tcF9vcCA9IHsKCQkJT1BSX0VRID0gIk9QX0VRIiwgT1BSX05FID0gIk9QX0VRIiwgT1BSX0xUID0gIk9QX0xUIiwKCQkJT1BSX0xFID0gIk9QX0xFIiwgT1BSX0dUID0gIk9QX0xUIiwgT1BSX0dFID0gIk9QX0xFIiwKCQl9CgkJbHVhSy5jb21wX2NvbmQgPSB7CgkJCU9QUl9FUSA9IDEsIE9QUl9ORSA9IDAsIE9QUl9MVCA9IDEsCgkJCU9QUl9MRSA9IDEsIE9QUl9HVCA9IDAsIE9QUl9HRSA9IDAsCgkJfQoJCWZ1bmN0aW9uIGx1YUs6cG9zZml4KGZzLCBvcCwgZTEsIGUyKQoJCQktLSBuZWVkZWQgYmVjYXVzZSBlMSA9IGUyIGRvZXNuJ3QgY29weSB2YWx1ZXMuLi4KCQkJLS0gKiBpbiA1LjAueCwgb25seSBrL2luZm8vYXV4L3QvZiBjb3BpZWQsIHQgZm9yIEFORCwgZiBmb3IgT1IKCQkJLS0gICBidXQgaGVyZSwgYWxsIGVsZW1lbnRzIGFyZSBjb3BpZWQgZm9yIGNvbXBsZXRlbmVzcycgc2FrZQoJCQlsb2NhbCBmdW5jdGlvbiBjb3B5ZXhwKGUxLCBlMikKCQkJCWUxLmsgPSBlMi5rCgkJCQllMS5pbmZvID0gZTIuaW5mbzsgZTEuYXV4ID0gZTIuYXV4CgkJCQllMS5udmFsID0gZTIubnZhbAoJCQkJZTEudCA9IGUyLnQ7IGUxLmYgPSBlMi5mCgkJCWVuZAoJCQlpZiBvcCA9PSAiT1BSX0FORCIgdGhlbgoJCQkJbHVhX2Fzc2VydChlMS50ID09IHNlbGYuTk9fSlVNUCkgIC0tIGxpc3QgbXVzdCBiZSBjbG9zZWQKCQkJCXNlbGY6ZGlzY2hhcmdldmFycyhmcywgZTIpCgkJCQllMi5mID0gc2VsZjpjb25jYXQoZnMsIGUyLmYsIGUxLmYpCgkJCQljb3B5ZXhwKGUxLCBlMikKCQkJZWxzZWlmIG9wID09ICJPUFJfT1IiIHRoZW4KCQkJCWx1YV9hc3NlcnQoZTEuZiA9PSBzZWxmLk5PX0pVTVApICAtLSBsaXN0IG11c3QgYmUgY2xvc2VkCgkJCQlzZWxmOmRpc2NoYXJnZXZhcnMoZnMsIGUyKQoJCQkJZTIudCA9IHNlbGY6Y29uY2F0KGZzLCBlMi50LCBlMS50KQoJCQkJY29weWV4cChlMSwgZTIpCgkJCWVsc2VpZiBvcCA9PSAiT1BSX0NPTkNBVCIgdGhlbgoJCQkJc2VsZjpleHAydmFsKGZzLCBlMikKCQkJCWlmIGUyLmsgPT0gIlZSRUxPQ0FCTEUiIGFuZCBsdWFQOkdFVF9PUENPREUoc2VsZjpnZXRjb2RlKGZzLCBlMikpID09ICJPUF9DT05DQVQiIHRoZW4KCQkJCQlsdWFfYXNzZXJ0KGUxLmluZm8gPT0gbHVhUDpHRVRBUkdfQihzZWxmOmdldGNvZGUoZnMsIGUyKSkgLSAxKQoJCQkJCXNlbGY6ZnJlZWV4cChmcywgZTEpCgkJCQkJbHVhUDpTRVRBUkdfQihzZWxmOmdldGNvZGUoZnMsIGUyKSwgZTEuaW5mbykKCQkJCQllMS5rID0gIlZSRUxPQ0FCTEUiCgkJCQkJZTEuaW5mbyA9IGUyLmluZm8KCQkJCWVsc2UKCQkJCQlzZWxmOmV4cDJuZXh0cmVnKGZzLCBlMikgIC0tIG9wZXJhbmQgbXVzdCBiZSBvbiB0aGUgJ3N0YWNrJwoJCQkJCXNlbGY6Y29kZWFyaXRoKGZzLCAiT1BfQ09OQ0FUIiwgZTEsIGUyKQoJCQkJZW5kCgkJCWVsc2UKCQkJCS0tIHRoZSBmb2xsb3dpbmcgdXNlcyBhIHRhYmxlIGxvb2t1cCBpbiBwbGFjZSBvZiBjb25kaXRpb25hbHMKCQkJCWxvY2FsIGFyaXRoID0gc2VsZi5hcml0aF9vcFtvcF0KCQkJCWlmIGFyaXRoIHRoZW4KCQkJCQlzZWxmOmNvZGVhcml0aChmcywgYXJpdGgsIGUxLCBlMikKCQkJCWVsc2UKCQkJCQlsb2NhbCBjb21wID0gc2VsZi5jb21wX29wW29wXQoJCQkJCWlmIGNvbXAgdGhlbgoJCQkJCQlzZWxmOmNvZGVjb21wKGZzLCBjb21wLCBzZWxmLmNvbXBfY29uZFtvcF0sIGUxLCBlMikKCQkJCQllbHNlCgkJCQkJCWx1YV9hc3NlcnQoMCkKCQkJCQllbmQKCQkJCWVuZC0taWYgYXJpdGgKCQkJZW5kLS1pZiBvcAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBhZGp1c3RzIGRlYnVnIGluZm9ybWF0aW9uIGZvciBsYXN0IGluc3RydWN0aW9uIHdyaXR0ZW4sIGluIG9yZGVyIHRvCgkJLS0gY2hhbmdlIHRoZSBsaW5lIHdoZXJlIGl0ZW0gY29tZXMgaW50byBleGlzdGVuY2UKCQktLSAqIHVzZWQgaW4gKGxwYXJzZXIpIGx1YVk6ZnVuY2FyZ3MoKSwgbHVhWTpmb3Jib2R5KCksIGx1YVk6ZnVuY3N0YXQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Zml4bGluZShmcywgbGluZSkKCQkJZnMuZi5saW5laW5mb1tmcy5wYyAtIDFdID0gbGluZQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBnZW5lcmFsIGZ1bmN0aW9uIHRvIHdyaXRlIGFuIGluc3RydWN0aW9uIGludG8gdGhlIGluc3RydWN0aW9uIGJ1ZmZlciwKCQktLSBzZXRzIGRlYnVnIGluZm9ybWF0aW9uIHRvbwoJCS0tICogdXNlZCBpbiBsdWFLOmNvZGVBQkMoKSwgbHVhSzpjb2RlQUJ4KCkKCQktLSAqIGNhbGxlZCBkaXJlY3RseSBieSAobHBhcnNlcikgbHVhWTp3aGlsZXN0YXQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YUs6Y29kZShmcywgaSwgbGluZSkKCQkJbG9jYWwgZiA9IGZzLmYKCQkJc2VsZjpkaXNjaGFyZ2VqcGMoZnMpICAtLSAncGMnIHdpbGwgY2hhbmdlCgkJCS0tIHB1dCBuZXcgaW5zdHJ1Y3Rpb24gaW4gY29kZSBhcnJheQoJCQlsdWFZOmdyb3d2ZWN0b3IoZnMuTCwgZi5jb2RlLCBmcy5wYywgZi5zaXplY29kZSwgbmlsLAoJCQkJbHVhWS5NQVhfSU5ULCAiY29kZSBzaXplIG92ZXJmbG93IikKCQkJZi5jb2RlW2ZzLnBjXSA9IGkKCQkJLS0gc2F2ZSBjb3JyZXNwb25kaW5nIGxpbmUgaW5mb3JtYXRpb24KCQkJbHVhWTpncm93dmVjdG9yKGZzLkwsIGYubGluZWluZm8sIGZzLnBjLCBmLnNpemVsaW5laW5mbywgbmlsLAoJCQkJbHVhWS5NQVhfSU5ULCAiY29kZSBzaXplIG92ZXJmbG93IikKCQkJZi5saW5laW5mb1tmcy5wY10gPSBsaW5lCgkJCWxvY2FsIHBjID0gZnMucGMKCQkJZnMucGMgPSBmcy5wYyArIDEKCQkJcmV0dXJuIHBjCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHdyaXRlcyBhbiBpbnN0cnVjdGlvbiBvZiB0eXBlIEFCQwoJCS0tICogY2FsbHMgbHVhSzpjb2RlKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFLOmNvZGVBQkMoZnMsIG8sIGEsIGIsIGMpCgkJCWx1YV9hc3NlcnQobHVhUDpnZXRPcE1vZGUobykgPT0gbHVhUC5PcE1vZGUuaUFCQykKCQkJbHVhX2Fzc2VydChsdWFQOmdldEJNb2RlKG8pIH49IGx1YVAuT3BBcmdNYXNrLk9wQXJnTiBvciBiID09IDApCgkJCWx1YV9hc3NlcnQobHVhUDpnZXRDTW9kZShvKSB+PSBsdWFQLk9wQXJnTWFzay5PcEFyZ04gb3IgYyA9PSAwKQoJCQlyZXR1cm4gc2VsZjpjb2RlKGZzLCBsdWFQOkNSRUFURV9BQkMobywgYSwgYiwgYyksIGZzLmxzLmxhc3RsaW5lKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSB3cml0ZXMgYW4gaW5zdHJ1Y3Rpb24gb2YgdHlwZSBBQngKCQktLSAqIGNhbGxzIGx1YUs6Y29kZSgpLCBjYWxsZWQgYnkgbHVhSzpjb2RlQXNCeCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpjb2RlQUJ4KGZzLCBvLCBhLCBiYykKCQkJbHVhX2Fzc2VydChsdWFQOmdldE9wTW9kZShvKSA9PSBsdWFQLk9wTW9kZS5pQUJ4IG9yCgkJCQlsdWFQOmdldE9wTW9kZShvKSA9PSBsdWFQLk9wTW9kZS5pQXNCeCkKCQkJbHVhX2Fzc2VydChsdWFQOmdldENNb2RlKG8pID09IGx1YVAuT3BBcmdNYXNrLk9wQXJnTikKCQkJcmV0dXJuIHNlbGY6Y29kZShmcywgbHVhUDpDUkVBVEVfQUJ4KG8sIGEsIGJjKSwgZnMubHMubGFzdGxpbmUpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tCgkJLS0gKiB1c2VkIGluIChscGFyc2VyKSBsdWFZOmNsb3NlbGlzdGZpZWxkKCksIGx1YVk6bGFzdGxpc3RmaWVsZCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhSzpzZXRsaXN0KGZzLCBiYXNlLCBuZWxlbXMsIHRvc3RvcmUpCgkJCWxvY2FsIGMgPSBtYXRoLmZsb29yKChuZWxlbXMgLSAxKS9sdWFQLkxGSUVMRFNfUEVSX0ZMVVNIKSArIDEKCQkJbG9jYWwgYiA9ICh0b3N0b3JlID09IGx1YVkuTFVBX01VTFRSRVQpIGFuZCAwIG9yIHRvc3RvcmUKCQkJbHVhX2Fzc2VydCh0b3N0b3JlIH49IDApCgkJCWlmIGMgPD0gbHVhUC5NQVhBUkdfQyB0aGVuCgkJCQlzZWxmOmNvZGVBQkMoZnMsICJPUF9TRVRMSVNUIiwgYmFzZSwgYiwgYykKCQkJZWxzZQoJCQkJc2VsZjpjb2RlQUJDKGZzLCAiT1BfU0VUTElTVCIsIGJhc2UsIGIsIDApCgkJCQlzZWxmOmNvZGUoZnMsIGx1YVA6Q1JFQVRFX0luc3QoYyksIGZzLmxzLmxhc3RsaW5lKQoJCQllbmQKCQkJZnMuZnJlZXJlZyA9IGJhc2UgKyAxICAtLSBmcmVlIHJlZ2lzdGVycyB3aXRoIGxpc3QgdmFsdWVzCgkJZW5kCgoKCgoJCS0tZG9maWxlKCJscGFyc2VyLmx1YSIpCgotLVtbLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gRXhwcmVzc2lvbiBkZXNjcmlwdG9yCi0tICogZXhwa2luZCBjaGFuZ2VkIHRvIHN0cmluZyBjb25zdGFudHM7IGx1YVk6YXNzaWdubWVudCB3YXMgdGhlIG9ubHkKLS0gICBmdW5jdGlvbiB0byB1c2UgYSByZWxhdGlvbmFsIG9wZXJhdG9yIHdpdGggdGhpcyBlbnVtZXJhdGlvbgotLSBWVk9JRCAgICAgICAtLSBubyB2YWx1ZQotLSBWTklMICAgICAgICAtLSBubyB2YWx1ZQotLSBWVFJVRSAgICAgICAtLSBubyB2YWx1ZQotLSBWRkFMU0UgICAgICAtLSBubyB2YWx1ZQotLSBWSyAgICAgICAgICAtLSBpbmZvID0gaW5kZXggb2YgY29uc3RhbnQgaW4gJ2snCi0tIFZLTlVNICAgICAgIC0tIG52YWwgPSBudW1lcmljYWwgdmFsdWUKLS0gVkxPQ0FMICAgICAgLS0gaW5mbyA9IGxvY2FsIHJlZ2lzdGVyCi0tIFZVUFZBTCwgICAgIC0tIGluZm8gPSBpbmRleCBvZiB1cHZhbHVlIGluICd1cHZhbHVlcycKLS0gVkdMT0JBTCAgICAgLS0gaW5mbyA9IGluZGV4IG9mIHRhYmxlOyBhdXggPSBpbmRleCBvZiBnbG9iYWwgbmFtZSBpbiAnaycKLS0gVklOREVYRUQgICAgLS0gaW5mbyA9IHRhYmxlIHJlZ2lzdGVyOyBhdXggPSBpbmRleCByZWdpc3RlciAob3IgJ2snKQotLSBWSk1QICAgICAgICAtLSBpbmZvID0gaW5zdHJ1Y3Rpb24gcGMKLS0gVlJFTE9DQUJMRSAgLS0gaW5mbyA9IGluc3RydWN0aW9uIHBjCi0tIFZOT05SRUxPQyAgIC0tIGluZm8gPSByZXN1bHQgcmVnaXN0ZXIKLS0gVkNBTEwgICAgICAgLS0gaW5mbyA9IGluc3RydWN0aW9uIHBjCi0tIFZWQVJBUkcgICAgIC0tIGluZm8gPSBpbnN0cnVjdGlvbiBwYwp9IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1dXQoKLS1bWy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tICogZXhwZGVzYyBpbiBMdWEgNS4xLnggaGFzIGEgdW5pb24gdSBhbmQgYW5vdGhlciBzdHJ1Y3QgczsgdGhpcyBMdWEKLS0gICBpbXBsZW1lbnRhdGlvbiBpZ25vcmVzIGFsbCBpbnN0YW5jZXMgb2YgdSBhbmQgcyB1c2FnZQotLSBzdHJ1Y3QgZXhwZGVzYzoKLS0gICBrICAtLSAoZW51bTogZXhwa2luZCkKLS0gICBpbmZvLCBhdXggLS0gKGludCwgaW50KQotLSAgIG52YWwgLS0gKGx1YV9OdW1iZXIpCi0tICAgdCAgLS0gcGF0Y2ggbGlzdCBvZiAnZXhpdCB3aGVuIHRydWUnCi0tICAgZiAgLS0gcGF0Y2ggbGlzdCBvZiAnZXhpdCB3aGVuIGZhbHNlJwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXV0KCi0tW1stLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSBzdHJ1Y3QgdXB2YWxkZXNjOgotLSAgIGsgIC0tIChsdV9ieXRlKQotLSAgIGluZm8gLS0gKGx1X2J5dGUpCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1dXQoKLS1bWy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIHN0YXRlIG5lZWRlZCB0byBnZW5lcmF0ZSBjb2RlIGZvciBhIGdpdmVuIGZ1bmN0aW9uCi0tIHN0cnVjdCBGdW5jU3RhdGU6Ci0tICAgZiAgLS0gY3VycmVudCBmdW5jdGlvbiBoZWFkZXIgKHRhYmxlOiBQcm90bykKLS0gICBoICAtLSB0YWJsZSB0byBmaW5kIChhbmQgcmV1c2UpIGVsZW1lbnRzIGluICdrJyAodGFibGU6IFRhYmxlKQotLSAgIHByZXYgIC0tIGVuY2xvc2luZyBmdW5jdGlvbiAodGFibGU6IEZ1bmNTdGF0ZSkKLS0gICBscyAgLS0gbGV4aWNhbCBzdGF0ZSAodGFibGU6IExleFN0YXRlKQotLSAgIEwgIC0tIGNvcHkgb2YgdGhlIEx1YSBzdGF0ZSAodGFibGU6IGx1YV9TdGF0ZSkKLS0gICBibCAgLS0gY2hhaW4gb2YgY3VycmVudCBibG9ja3MgKHRhYmxlOiBCbG9ja0NudCkKLS0gICBwYyAgLS0gbmV4dCBwb3NpdGlvbiB0byBjb2RlIChlcXVpdmFsZW50IHRvICduY29kZScpCi0tICAgbGFzdHRhcmdldCAgIC0tICdwYycgb2YgbGFzdCAnanVtcCB0YXJnZXQnCi0tICAganBjICAtLSBsaXN0IG9mIHBlbmRpbmcganVtcHMgdG8gJ3BjJwotLSAgIGZyZWVyZWcgIC0tIGZpcnN0IGZyZWUgcmVnaXN0ZXIKLS0gICBuayAgLS0gbnVtYmVyIG9mIGVsZW1lbnRzIGluICdrJwotLSAgIG5wICAtLSBudW1iZXIgb2YgZWxlbWVudHMgaW4gJ3AnCi0tICAgbmxvY3ZhcnMgIC0tIG51bWJlciBvZiBlbGVtZW50cyBpbiAnbG9jdmFycycKLS0gICBuYWN0dmFyICAtLSBudW1iZXIgb2YgYWN0aXZlIGxvY2FsIHZhcmlhYmxlcwotLSAgIHVwdmFsdWVzW0xVQUlfTUFYVVBWQUxVRVNdICAtLSB1cHZhbHVlcyAodGFibGU6IHVwdmFsZGVzYykKLS0gICBhY3R2YXJbTFVBSV9NQVhWQVJTXSAgLS0gZGVjbGFyZWQtdmFyaWFibGUgc3RhY2sKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLV1dCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGNvbnN0YW50cyB1c2VkIGJ5IHBhcnNlcgoJCS0tICogcGlja3MgdXAgZHVwbGljYXRlIHZhbHVlcyBmcm9tIGx1YVggaWYgcmVxdWlyZWQKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlsdWFZLkxVQV9RUyA9IGx1YVguTFVBX1FTIG9yICInJXMnIiAgLS0gKGZyb20gbHVhY29uZi5oKQoKCQlsdWFZLlNIUlRfTUFYID0gMzI3NjcgLS0gKGZyb20gPGxpbWl0cy5oPikKCQlsdWFZLkxVQUlfTUFYVkFSUyA9IDIwMCAgLS0gKGx1YWNvbmYuaCkKCQlsdWFZLkxVQUlfTUFYVVBWQUxVRVMgPSA2MCAgLS0gKGx1YWNvbmYuaCkKCQlsdWFZLk1BWF9JTlQgPSBsdWFYLk1BWF9JTlQgb3IgMjE0NzQ4MzY0NSAgLS0gKGZyb20gbGxpbWl0cy5oKQoJCS0tICogSU5UX01BWC0yIGZvciAzMi1iaXQgc3lzdGVtcwoJCWx1YVkuTFVBSV9NQVhDQ0FMTFMgPSAyMDAgIC0tIChmcm9tIGx1YWNvbmYuaCkKCgkJbHVhWS5WQVJBUkdfSEFTQVJHID0gMSAgLS0gKGZyb20gbG9iamVjdC5oKQoJCS0tIE5PVEU6IEhBU0FSR19NQVNLIGlzIHZhbHVlLXNwZWNpZmljCgkJbHVhWS5IQVNBUkdfTUFTSyA9IDIgLS0gdGhpcyB3YXMgYWRkZWQgZm9yIGEgYml0b3AgaW4gcGFybGlzdCgpCgkJbHVhWS5WQVJBUkdfSVNWQVJBUkcgPSAyCgkJLS0gTk9URTogdGhlcmUgaXMgc29tZSB2YWx1ZS1zcGVjaWZpYyBjb2RlIHRoYXQgaW52b2x2ZXMgVkFSQVJHX05FRURTQVJHCgkJbHVhWS5WQVJBUkdfTkVFRFNBUkcgPSA0CgoJCWx1YVkuTFVBX01VTFRSRVQgPSAtMSAgLS0gKGx1YS5oKQoKLS1bWy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIG90aGVyIGZ1bmN0aW9ucwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXV0KCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gTFVBX1FMIGRlc2NyaWJlcyBob3cgZXJyb3IgbWVzc2FnZXMgcXVvdGUgcHJvZ3JhbSBlbGVtZW50cy4KCQktLSBDSEFOR0UgaXQgaWYgeW91IHdhbnQgYSBkaWZmZXJlbnQgYXBwZWFyYW5jZS4gKGZyb20gbHVhY29uZi5oKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6TFVBX1FMKHgpCgkJCXJldHVybiAiJyIuLnguLiInIgoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSB0aGlzIGlzIGEgc3RyaXBwZWQtZG93biBsdWFNX2dyb3d2ZWN0b3IgKGZyb20gbG1lbS5oKSB3aGljaCBpcyBhCgkJLS0gbWFjcm8gYmFzZWQgb24gbHVhTV9ncm93YXV4IChpbiBsbWVtLmMpOyBhbGwgdGhlIGZvbGxvd2luZyBkb2VzIGlzCgkJLS0gcmVwcm9kdWNlIHRoZSBzaXplIGxpbWl0IGNoZWNraW5nIGxvZ2ljIG9mIHRoZSBvcmlnaW5hbCBmdW5jdGlvbgoJCS0tIHNvIHRoYXQgZXJyb3IgYmVoYXZpb3VyIGlzIGlkZW50aWNhbDsgYWxsIGFyZ3VtZW50cyBwcmVzZXJ2ZWQgZm9yCgkJLS0gY29udmVuaWVuY2UsIGV2ZW4gdGhvc2Ugd2hpY2ggYXJlIHVudXNlZAoJCS0tICogc2V0IHRoZSB0IGZpZWxkIHRvIG5pbCwgc2luY2UgdGhpcyBvcmlnaW5hbGx5IGRvZXMgYSBzaXplb2YodCkKCQktLSAqIHNpemUgKG9yaWdpbmFsbHkgYSBwb2ludGVyKSBpcyBuZXZlciB1cGRhdGVkLCB0aGVpciBmaW5hbCB2YWx1ZXMKCQktLSAgIGFyZSBzZXQgYnkgbHVhWTpjbG9zZV9mdW5jKCksIHNvIG92ZXJhbGwgdGhpbmdzIHNob3VsZCBzdGlsbCB3b3JrCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpncm93dmVjdG9yKEwsIHYsIG5lbGVtcywgc2l6ZSwgdCwgbGltaXQsIGUpCgkJCWlmIG5lbGVtcyA+PSBsaW1pdCB0aGVuCgkJCQllcnJvcihlKSAgLS0gd2FzIGx1YUdfcnVuZXJyb3IKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGluaXRpYWxpemUgYSBuZXcgZnVuY3Rpb24gcHJvdG90eXBlIHN0cnVjdHVyZSAoZnJvbSBsZnVuYy5jKQoJCS0tICogdXNlZCBvbmx5IGluIG9wZW5fZnVuYygpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpuZXdwcm90byhMKQoJCQlsb2NhbCBmID0ge30gLS0gUHJvdG8KCQkJLS0gbHVhQ19saW5rKEwsIG9iajJnY28oZiksIExVQV9UUFJPVE8pOyAvKiBHQyAqLwoJCQlmLmsgPSB7fQoJCQlmLnNpemVrID0gMAoJCQlmLnAgPSB7fQoJCQlmLnNpemVwID0gMAoJCQlmLmNvZGUgPSB7fQoJCQlmLnNpemVjb2RlID0gMAoJCQlmLnNpemVsaW5laW5mbyA9IDAKCQkJZi5zaXpldXB2YWx1ZXMgPSAwCgkJCWYubnVwcyA9IDAKCQkJZi51cHZhbHVlcyA9IHt9CgkJCWYubnVtcGFyYW1zID0gMAoJCQlmLmlzX3ZhcmFyZyA9IDAKCQkJZi5tYXhzdGFja3NpemUgPSAwCgkJCWYubGluZWluZm8gPSB7fQoJCQlmLnNpemVsb2N2YXJzID0gMAoJCQlmLmxvY3ZhcnMgPSB7fQoJCQlmLmxpbmVEZWZpbmVkID0gMAoJCQlmLmxhc3RsaW5lZGVmaW5lZCA9IDAKCQkJZi5zb3VyY2UgPSBuaWwKCQkJcmV0dXJuIGYKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gY29udmVydHMgYW4gaW50ZWdlciB0byBhICJmbG9hdGluZyBwb2ludCBieXRlIiwgcmVwcmVzZW50ZWQgYXMKCQktLSAoZWVlZWV4eHgpLCB3aGVyZSB0aGUgcmVhbCB2YWx1ZSBpcyAoMXh4eCkgKiAyXihlZWVlZSAtIDEpIGlmCgkJLS0gZWVlZWUgIT0gMCBhbmQgKHh4eCkgb3RoZXJ3aXNlLgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6aW50MmZiKHgpCgkJCWxvY2FsIGUgPSAwICAtLSBleHBvbmVudAoJCQl3aGlsZSB4ID49IDE2IGRvCgkJCQl4ID0gbWF0aC5mbG9vcigoeCArIDEpIC8gMikKCQkJCWUgPSBlICsgMQoJCQllbmQKCQkJaWYgeCA8IDggdGhlbgoJCQkJcmV0dXJuIHgKCQkJZWxzZQoJCQkJcmV0dXJuICgoZSArIDEpICogOCkgKyAoeCAtIDgpCgkJCWVuZAoJCWVuZAoKLS1bWy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIHBhcnNlciBmdW5jdGlvbnMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLV1dCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHRydWUgb2YgdGhlIGtpbmQgb2YgZXhwcmVzc2lvbiBwcm9kdWNlcyBtdWx0aXBsZSByZXR1cm4gdmFsdWVzCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpoYXNtdWx0cmV0KGspCgkJCXJldHVybiBrID09ICJWQ0FMTCIgb3IgayA9PSAiVlZBUkFSRyIKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gY29udmVuaWVuY2UgZnVuY3Rpb24gdG8gYWNjZXNzIGFjdGl2ZSBsb2NhbCBpLCByZXR1cm5zIGVudHJ5CgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpnZXRsb2N2YXIoZnMsIGkpCgkJCXJldHVybiBmcy5mLmxvY3ZhcnNbIGZzLmFjdHZhcltpXSBdCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGNoZWNrIGEgbGltaXQsIHN0cmluZyBtIHByb3ZpZGVkIGFzIGFuIGVycm9yIG1lc3NhZ2UKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmNoZWNrbGltaXQoZnMsIHYsIGwsIG0pCgkJCWlmIHYgPiBsIHRoZW4gc2VsZjplcnJvcmxpbWl0KGZzLCBsLCBtKSBlbmQKCQllbmQKCi0tW1stLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSBub2RlcyBmb3IgYmxvY2sgbGlzdCAobGlzdCBvZiBhY3RpdmUgYmxvY2tzKQotLSBzdHJ1Y3QgQmxvY2tDbnQ6Ci0tICAgcHJldmlvdXMgIC0tIGNoYWluICh0YWJsZTogQmxvY2tDbnQpCi0tICAgYnJlYWtsaXN0ICAtLSBsaXN0IG9mIGp1bXBzIG91dCBvZiB0aGlzIGxvb3AKLS0gICBuYWN0dmFyICAtLSAjIGFjdGl2ZSBsb2NhbCB2YXJpYWJsZXMgb3V0c2lkZSB0aGUgYnJlYWthYmxlIHN0cnVjdHVyZQotLSAgIHVwdmFsICAtLSB0cnVlIGlmIHNvbWUgdmFyaWFibGUgaW4gdGhlIGJsb2NrIGlzIGFuIHVwdmFsdWUgKGJvb2xlYW4pCi0tICAgaXNicmVha2FibGUgIC0tIHRydWUgaWYgJ2Jsb2NrJyBpcyBhIGxvb3AgKGJvb2xlYW4pCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1dXQoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwcm90b3R5cGVzIGZvciByZWN1cnNpdmUgbm9uLXRlcm1pbmFsIGZ1bmN0aW9ucwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHByb3RvdHlwZXMgZGVsZXRlZDsgbm90IHJlcXVpcmVkIGluIEx1YQoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSByZWFuY2hvciBpZiBsYXN0IHRva2VuIGlzIGhhcyBhIGNvbnN0YW50IHN0cmluZywgc2VlIGNsb3NlX2Z1bmMoKQoJCS0tICogdXNlZCBvbmx5IGluIGNsb3NlX2Z1bmMoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6YW5jaG9yX3Rva2VuKGxzKQoJCQlpZiBscy50LnRva2VuID09ICJUS19OQU1FIiBvciBscy50LnRva2VuID09ICJUS19TVFJJTkciIHRoZW4KCQkJCS0tIG5vdCByZWxldmFudCB0byBMdWEgaW1wbGVtZW50YXRpb24gb2YgcGFyc2VyCgkJCQktLSBsb2NhbCB0cyA9IGxzLnQuc2VtaW5mbwoJCQkJLS0gbHVhWF9uZXdzdHJpbmcobHMsIGdldHN0cih0cyksIHRzLT50c3YubGVuKTsgLyogQyAqLwoJCQllbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gdGhyb3dzIGEgc3ludGF4IGVycm9yIGlmIHRva2VuIGV4cGVjdGVkIGlzIG5vdCB0aGVyZQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6ZXJyb3JfZXhwZWN0ZWQobHMsIHRva2VuKQoJCQlsdWFYOnN5bnRheGVycm9yKGxzLAoJCQkJc3RyaW5nLmZvcm1hdChzZWxmLkxVQV9RUy4uIiBleHBlY3RlZCIsIGx1YVg6dG9rZW4yc3RyKGxzLCB0b2tlbikpKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwcmVwYXJlcyBlcnJvciBtZXNzYWdlIGZvciBkaXNwbGF5LCBmb3IgbGltaXRzIGV4Y2VlZGVkCgkJLS0gKiB1c2VkIG9ubHkgaW4gY2hlY2tsaW1pdCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTplcnJvcmxpbWl0KGZzLCBsaW1pdCwgd2hhdCkKCQkJbG9jYWwgbXNnID0gKGZzLmYubGluZWRlZmluZWQgPT0gMCkgYW5kCgkJCQlzdHJpbmcuZm9ybWF0KCJtYWluIGZ1bmN0aW9uIGhhcyBtb3JlIHRoYW4gJWQgJXMiLCBsaW1pdCwgd2hhdCkgb3IKCQkJCXN0cmluZy5mb3JtYXQoImZ1bmN0aW9uIGF0IGxpbmUgJWQgaGFzIG1vcmUgdGhhbiAlZCAlcyIsCgkJCQkJZnMuZi5saW5lZGVmaW5lZCwgbGltaXQsIHdoYXQpCgkJCWx1YVg6bGV4ZXJyb3IoZnMubHMsIG1zZywgMCkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gdGVzdHMgZm9yIGEgdG9rZW4sIHJldHVybnMgb3V0Y29tZQoJCS0tICogcmV0dXJuIHZhbHVlIGNoYW5nZWQgdG8gYm9vbGVhbgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6dGVzdG5leHQobHMsIGMpCgkJCWlmIGxzLnQudG9rZW4gPT0gYyB0aGVuCgkJCQlsdWFYOm5leHQobHMpCgkJCQlyZXR1cm4gdHJ1ZQoJCQllbHNlCgkJCQlyZXR1cm4gZmFsc2UKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGNoZWNrIGZvciBleGlzdGVuY2Ugb2YgYSB0b2tlbiwgdGhyb3dzIGVycm9yIGlmIG5vdCBmb3VuZAoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Y2hlY2sobHMsIGMpCgkJCWlmIGxzLnQudG9rZW4gfj0gYyB0aGVuCgkJCQlzZWxmOmVycm9yX2V4cGVjdGVkKGxzLCBjKQoJCQllbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gdmVyaWZ5IGV4aXN0ZW5jZSBvZiBhIHRva2VuLCB0aGVuIHNraXAgaXQKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmNoZWNrbmV4dChscywgYykKCQkJc2VsZjpjaGVjayhscywgYykKCQkJbHVhWDpuZXh0KGxzKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSB0aHJvd3MgZXJyb3IgaWYgY29uZGl0aW9uIG5vdCBtYXRjaGVkCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpjaGVja19jb25kaXRpb24obHMsIGMsIG1zZykKCQkJaWYgbm90IGMgdGhlbiBsdWFYOnN5bnRheGVycm9yKGxzLCBtc2cpIGVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSB2ZXJpZmllcyB0b2tlbiBjb25kaXRpb25zIGFyZSBtZXQgb3IgZWxzZSB0aHJvdyBlcnJvcgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Y2hlY2tfbWF0Y2gobHMsIHdoYXQsIHdobywgd2hlcmUpCgkJCWlmIG5vdCBzZWxmOnRlc3RuZXh0KGxzLCB3aGF0KSB0aGVuCgkJCQlpZiB3aGVyZSA9PSBscy5saW5lbnVtYmVyIHRoZW4KCQkJCQlzZWxmOmVycm9yX2V4cGVjdGVkKGxzLCB3aGF0KQoJCQkJZWxzZQoJCQkJCWx1YVg6c3ludGF4ZXJyb3IobHMsIHN0cmluZy5mb3JtYXQoCgkJCQkJCXNlbGYuTFVBX1FTLi4iIGV4cGVjdGVkICh0byBjbG9zZSAiLi5zZWxmLkxVQV9RUy4uIiBhdCBsaW5lICVkKSIsCgkJCQkJCWx1YVg6dG9rZW4yc3RyKGxzLCB3aGF0KSwgbHVhWDp0b2tlbjJzdHIobHMsIHdobyksIHdoZXJlKSkKCQkJCWVuZAoJCQllbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gZXhwZWN0IHRoYXQgdG9rZW4gaXMgYSBuYW1lLCByZXR1cm4gdGhlIG5hbWUKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOnN0cl9jaGVja25hbWUobHMpCgkJCXNlbGY6Y2hlY2sobHMsICJUS19OQU1FIikKCQkJbG9jYWwgdHMgPSBscy50LnNlbWluZm8KCQkJbHVhWDpuZXh0KGxzKQoJCQlyZXR1cm4gdHMKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gaW5pdGlhbGl6ZSBhIHN0cnVjdCBleHBkZXNjLCBleHByZXNzaW9uIGRlc2NyaXB0aW9uIGRhdGEgc3RydWN0dXJlCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTppbml0X2V4cChlLCBrLCBpKQoJCQllLmYsIGUudCA9IGx1YUsuTk9fSlVNUCwgbHVhSy5OT19KVU1QCgkJCWUuayA9IGsKCQkJZS5pbmZvID0gaQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBhZGRzIGdpdmVuIHN0cmluZyBzIGluIHN0cmluZyBwb29sLCBzZXRzIGUgYXMgVksKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmNvZGVzdHJpbmcobHMsIGUsIHMpCgkJCXNlbGY6aW5pdF9leHAoZSwgIlZLIiwgbHVhSzpzdHJpbmdLKGxzLmZzLCBzKSkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gY29uc3VtZSBhIG5hbWUgdG9rZW4sIGFkZHMgaXQgdG8gc3RyaW5nIHBvb2wsIHNldHMgZSBhcyBWSwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Y2hlY2tuYW1lKGxzLCBlKQoJCQlzZWxmOmNvZGVzdHJpbmcobHMsIGUsIHNlbGY6c3RyX2NoZWNrbmFtZShscykpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGNyZWF0ZXMgc3RydWN0IGVudHJ5IGZvciBhIGxvY2FsIHZhcmlhYmxlCgkJLS0gKiB1c2VkIG9ubHkgaW4gbmV3X2xvY2FsdmFyKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOnJlZ2lzdGVybG9jYWx2YXIobHMsIHZhcm5hbWUpCgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJbG9jYWwgZiA9IGZzLmYKCQkJc2VsZjpncm93dmVjdG9yKGxzLkwsIGYubG9jdmFycywgZnMubmxvY3ZhcnMsIGYuc2l6ZWxvY3ZhcnMsCgkJCQluaWwsIHNlbGYuU0hSVF9NQVgsICJ0b28gbWFueSBsb2NhbCB2YXJpYWJsZXMiKQoJCQktLSBsb29wIHRvIGluaXRpYWxpemUgZW1wdHkgZi5sb2N2YXIgcG9zaXRpb25zIG5vdCByZXF1aXJlZAoJCQlmLmxvY3ZhcnNbZnMubmxvY3ZhcnNdID0ge30gLS0gTG9jVmFyCgkJCWYubG9jdmFyc1tmcy5ubG9jdmFyc10udmFybmFtZSA9IHZhcm5hbWUKCQkJLS0gbHVhQ19vYmpiYXJyaWVyKGxzLkwsIGYsIHZhcm5hbWUpIC8qIEdDICovCgkJCWxvY2FsIG5sb2N2YXJzID0gZnMubmxvY3ZhcnMKCQkJZnMubmxvY3ZhcnMgPSBmcy5ubG9jdmFycyArIDEKCQkJcmV0dXJuIG5sb2N2YXJzCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGNyZWF0ZXMgYSBuZXcgbG9jYWwgdmFyaWFibGUgZ2l2ZW4gYSBuYW1lIGFuZCBhbiBvZmZzZXQgZnJvbSBuYWN0dmFyCgkJLS0gKiB1c2VkIGluIGZvcm51bSgpLCBmb3JsaXN0KCksIHBhcmxpc3QoKSwgYm9keSgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpuZXdfbG9jYWx2YXJsaXRlcmFsKGxzLCB2LCBuKQoJCQlzZWxmOm5ld19sb2NhbHZhcihscywgdiwgbikKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gcmVnaXN0ZXIgYSBsb2NhbCB2YXJpYWJsZSwgc2V0IGluIGFjdGl2ZSB2YXJpYWJsZSBsaXN0CgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpuZXdfbG9jYWx2YXIobHMsIG5hbWUsIG4pCgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJc2VsZjpjaGVja2xpbWl0KGZzLCBmcy5uYWN0dmFyICsgbiArIDEsIHNlbGYuTFVBSV9NQVhWQVJTLCAibG9jYWwgdmFyaWFibGVzIikKCQkJZnMuYWN0dmFyW2ZzLm5hY3R2YXIgKyBuXSA9IHNlbGY6cmVnaXN0ZXJsb2NhbHZhcihscywgbmFtZSkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gYWRkcyBudmFycyBudW1iZXIgb2YgbmV3IGxvY2FsIHZhcmlhYmxlcywgc2V0IGRlYnVnIGluZm9ybWF0aW9uCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTphZGp1c3Rsb2NhbHZhcnMobHMsIG52YXJzKQoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWZzLm5hY3R2YXIgPSBmcy5uYWN0dmFyICsgbnZhcnMKCQkJZm9yIGkgPSBudmFycywgMSwgLTEgZG8KCQkJCXNlbGY6Z2V0bG9jdmFyKGZzLCBmcy5uYWN0dmFyIC0gaSkuc3RhcnRwYyA9IGZzLnBjCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSByZW1vdmVzIGEgbnVtYmVyIG9mIGxvY2Fscywgc2V0IGRlYnVnIGluZm9ybWF0aW9uCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpyZW1vdmV2YXJzKGxzLCB0b2xldmVsKQoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCXdoaWxlIGZzLm5hY3R2YXIgPiB0b2xldmVsIGRvCgkJCQlmcy5uYWN0dmFyID0gZnMubmFjdHZhciAtIDEKCQkJCXNlbGY6Z2V0bG9jdmFyKGZzLCBmcy5uYWN0dmFyKS5lbmRwYyA9IGZzLnBjCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSByZXR1cm5zIGFuIGV4aXN0aW5nIHVwdmFsdWUgaW5kZXggYmFzZWQgb24gdGhlIGdpdmVuIG5hbWUsIG9yCgkJLS0gY3JlYXRlcyBhIG5ldyB1cHZhbHVlIHN0cnVjdCBlbnRyeSBhbmQgcmV0dXJucyB0aGUgbmV3IGluZGV4CgkJLS0gKiB1c2VkIG9ubHkgaW4gc2luZ2xldmFyYXV4KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmluZGV4dXB2YWx1ZShmcywgbmFtZSwgdikKCQkJbG9jYWwgZiA9IGZzLmYKCQkJZm9yIGkgPSAwLCBmLm51cHMgLSAxIGRvCgkJCQlpZiBmcy51cHZhbHVlc1tpXS5rID09IHYuayBhbmQgZnMudXB2YWx1ZXNbaV0uaW5mbyA9PSB2LmluZm8gdGhlbgoJCQkJCWx1YV9hc3NlcnQoZi51cHZhbHVlc1tpXSA9PSBuYW1lKQoJCQkJCXJldHVybiBpCgkJCQllbmQKCQkJZW5kCgkJCS0tIG5ldyBvbmUKCQkJc2VsZjpjaGVja2xpbWl0KGZzLCBmLm51cHMgKyAxLCBzZWxmLkxVQUlfTUFYVVBWQUxVRVMsICJ1cHZhbHVlcyIpCgkJCXNlbGY6Z3Jvd3ZlY3Rvcihmcy5MLCBmLnVwdmFsdWVzLCBmLm51cHMsIGYuc2l6ZXVwdmFsdWVzLAoJCQkJbmlsLCBzZWxmLk1BWF9JTlQsICIiKQoJCQktLSBsb29wIHRvIGluaXRpYWxpemUgZW1wdHkgZi51cHZhbHVlcyBwb3NpdGlvbnMgbm90IHJlcXVpcmVkCgkJCWYudXB2YWx1ZXNbZi5udXBzXSA9IG5hbWUKCQkJLS0gbHVhQ19vYmpiYXJyaWVyKGZzLT5MLCBmLCBuYW1lKTsgLyogR0MgKi8KCQkJbHVhX2Fzc2VydCh2LmsgPT0gIlZMT0NBTCIgb3Igdi5rID09ICJWVVBWQUwiKQoJCQktLSB0aGlzIGlzIGEgcGFydGlhbCBjb3B5OyBvbmx5IGsgJiBpbmZvIGZpZWxkcyB1c2VkCgkJCWZzLnVwdmFsdWVzW2YubnVwc10gPSB7IGsgPSB2LmssIGluZm8gPSB2LmluZm8gfQoJCQlsb2NhbCBudXBzID0gZi5udXBzCgkJCWYubnVwcyA9IGYubnVwcyArIDEKCQkJcmV0dXJuIG51cHMKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gc2VhcmNoIHRoZSBsb2NhbCB2YXJpYWJsZSBuYW1lc3BhY2Ugb2YgdGhlIGdpdmVuIGZzIGZvciBhIG1hdGNoCgkJLS0gKiB1c2VkIG9ubHkgaW4gc2luZ2xldmFyYXV4KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOnNlYXJjaHZhcihmcywgbikKCQkJZm9yIGkgPSBmcy5uYWN0dmFyIC0gMSwgMCwgLTEgZG8KCQkJCWlmIG4gPT0gc2VsZjpnZXRsb2N2YXIoZnMsIGkpLnZhcm5hbWUgdGhlbgoJCQkJCXJldHVybiBpCgkJCQllbmQKCQkJZW5kCgkJCXJldHVybiAtMSAgLS0gbm90IGZvdW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tICogbWFyayB1cHZhbHVlIGZsYWdzIGluIGZ1bmN0aW9uIHN0YXRlcyB1cCB0byBhIGdpdmVuIGxldmVsCgkJLS0gKiB1c2VkIG9ubHkgaW4gc2luZ2xldmFyYXV4KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOm1hcmt1cHZhbChmcywgbGV2ZWwpCgkJCWxvY2FsIGJsID0gZnMuYmwKCQkJd2hpbGUgYmwgYW5kIGJsLm5hY3R2YXIgPiBsZXZlbCBkbyBibCA9IGJsLnByZXZpb3VzIGVuZAoJCQlpZiBibCB0aGVuIGJsLnVwdmFsID0gdHJ1ZSBlbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gaGFuZGxlIGxvY2FscywgZ2xvYmFscyBhbmQgdXB2YWx1ZXMgYW5kIHJlbGF0ZWQgcHJvY2Vzc2luZwoJCS0tICogc2VhcmNoIG1lY2hhbmlzbSBpcyByZWN1cnNpdmUsIGNhbGxzIGl0c2VsZiB0byBzZWFyY2ggcGFyZW50cwoJCS0tICogdXNlZCBvbmx5IGluIHNpbmdsZXZhcigpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpzaW5nbGV2YXJhdXgoZnMsIG4sIHZhciwgYmFzZSkKCQkJaWYgZnMgPT0gbmlsIHRoZW4gIC0tIG5vIG1vcmUgbGV2ZWxzPwoJCQkJc2VsZjppbml0X2V4cCh2YXIsICJWR0xPQkFMIiwgbHVhUC5OT19SRUcpICAtLSBkZWZhdWx0IGlzIGdsb2JhbCB2YXJpYWJsZQoJCQkJcmV0dXJuICJWR0xPQkFMIgoJCQllbHNlCgkJCQlsb2NhbCB2ID0gc2VsZjpzZWFyY2h2YXIoZnMsIG4pICAtLSBsb29rIHVwIGF0IGN1cnJlbnQgbGV2ZWwKCQkJCWlmIHYgPj0gMCB0aGVuCgkJCQkJc2VsZjppbml0X2V4cCh2YXIsICJWTE9DQUwiLCB2KQoJCQkJCWlmIGJhc2UgPT0gMCB0aGVuCgkJCQkJCXNlbGY6bWFya3VwdmFsKGZzLCB2KSAgLS0gbG9jYWwgd2lsbCBiZSB1c2VkIGFzIGFuIHVwdmFsCgkJCQkJZW5kCgkJCQkJcmV0dXJuICJWTE9DQUwiCgkJCQllbHNlICAtLSBub3QgZm91bmQgYXQgY3VycmVudCBsZXZlbDsgdHJ5IHVwcGVyIG9uZQoJCQkJCWlmIHNlbGY6c2luZ2xldmFyYXV4KGZzLnByZXYsIG4sIHZhciwgMCkgPT0gIlZHTE9CQUwiIHRoZW4KCQkJCQkJcmV0dXJuICJWR0xPQkFMIgoJCQkJCWVuZAoJCQkJCXZhci5pbmZvID0gc2VsZjppbmRleHVwdmFsdWUoZnMsIG4sIHZhcikgIC0tIGVsc2Ugd2FzIExPQ0FMIG9yIFVQVkFMCgkJCQkJdmFyLmsgPSAiVlVQVkFMIiAgLS0gdXB2YWx1ZSBpbiB0aGlzIGxldmVsCgkJCQkJcmV0dXJuICJWVVBWQUwiCgkJCQllbmQtLWlmIHYKCQkJZW5kLS1pZiBmcwoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBjb25zdW1lIGEgbmFtZSB0b2tlbiwgY3JlYXRlcyBhIHZhcmlhYmxlIChnbG9iYWx8bG9jYWx8dXB2YWx1ZSkKCQktLSAqIHVzZWQgaW4gcHJlZml4ZXhwKCksIGZ1bmNuYW1lKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOnNpbmdsZXZhcihscywgdmFyKQoJCQlsb2NhbCB2YXJuYW1lID0gc2VsZjpzdHJfY2hlY2tuYW1lKGxzKQoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWlmIHNlbGY6c2luZ2xldmFyYXV4KGZzLCB2YXJuYW1lLCB2YXIsIDEpID09ICJWR0xPQkFMIiB0aGVuCgkJCQl2YXIuaW5mbyA9IGx1YUs6c3RyaW5nSyhmcywgdmFybmFtZSkgIC0tIGluZm8gcG9pbnRzIHRvIGdsb2JhbCBuYW1lCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBhZGp1c3QgUkhTIHRvIG1hdGNoIExIUyBpbiBhbiBhc3NpZ25tZW50CgkJLS0gKiB1c2VkIGluIGFzc2lnbm1lbnQoKSwgZm9ybGlzdCgpLCBsb2NhbHN0YXQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6YWRqdXN0X2Fzc2lnbihscywgbnZhcnMsIG5leHBzLCBlKQoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWxvY2FsIGV4dHJhID0gbnZhcnMgLSBuZXhwcwoJCQlpZiBzZWxmOmhhc211bHRyZXQoZS5rKSB0aGVuCgkJCQlleHRyYSA9IGV4dHJhICsgMSAgLS0gaW5jbHVkZXMgY2FsbCBpdHNlbGYKCQkJCWlmIGV4dHJhIDw9IDAgdGhlbiBleHRyYSA9IDAgZW5kCgkJCQlsdWFLOnNldHJldHVybnMoZnMsIGUsIGV4dHJhKSAgLS0gbGFzdCBleHAuIHByb3ZpZGVzIHRoZSBkaWZmZXJlbmNlCgkJCQlpZiBleHRyYSA+IDEgdGhlbiBsdWFLOnJlc2VydmVyZWdzKGZzLCBleHRyYSAtIDEpIGVuZAoJCQllbHNlCgkJCQlpZiBlLmsgfj0gIlZWT0lEIiB0aGVuIGx1YUs6ZXhwMm5leHRyZWcoZnMsIGUpIGVuZCAgLS0gY2xvc2UgbGFzdCBleHByZXNzaW9uCgkJCQlpZiBleHRyYSA+IDAgdGhlbgoJCQkJCWxvY2FsIHJlZyA9IGZzLmZyZWVyZWcKCQkJCQlsdWFLOnJlc2VydmVyZWdzKGZzLCBleHRyYSkKCQkJCQlsdWFLOl9uaWwoZnMsIHJlZywgZXh0cmEpCgkJCQllbmQKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHRyYWNrcyBhbmQgbGltaXRzIHBhcnNpbmcgZGVwdGgsIGFzc2VydCBjaGVjayBhdCBlbmQgb2YgcGFyc2luZwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6ZW50ZXJsZXZlbChscykKCQkJbHMuTC5uQ2NhbGxzID0gbHMuTC5uQ2NhbGxzICsgMQoJCQlpZiBscy5MLm5DY2FsbHMgPiBzZWxmLkxVQUlfTUFYQ0NBTExTIHRoZW4KCQkJCWx1YVg6bGV4ZXJyb3IobHMsICJjaHVuayBoYXMgdG9vIG1hbnkgc3ludGF4IGxldmVscyIsIDApCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSB0cmFja3MgcGFyc2luZyBkZXB0aCwgYSBwYWlyIHdpdGggbHVhWTplbnRlcmxldmVsKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmxlYXZlbGV2ZWwobHMpCgkJCWxzLkwubkNjYWxscyA9IGxzLkwubkNjYWxscyAtIDEKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gZW50ZXJzIGEgY29kZSB1bml0LCBpbml0aWFsaXplcyBlbGVtZW50cwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6ZW50ZXJibG9jayhmcywgYmwsIGlzYnJlYWthYmxlKQoJCQlibC5icmVha2xpc3QgPSBsdWFLLk5PX0pVTVAKCQkJYmwuaXNicmVha2FibGUgPSBpc2JyZWFrYWJsZQoJCQlibC5uYWN0dmFyID0gZnMubmFjdHZhcgoJCQlibC51cHZhbCA9IGZhbHNlCgkJCWJsLnByZXZpb3VzID0gZnMuYmwKCQkJZnMuYmwgPSBibAoJCQlsdWFfYXNzZXJ0KGZzLmZyZWVyZWcgPT0gZnMubmFjdHZhcikKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gbGVhdmVzIGEgY29kZSB1bml0LCBjbG9zZSBhbnkgdXB2YWx1ZXMKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmxlYXZlYmxvY2soZnMpCgkJCWxvY2FsIGJsID0gZnMuYmwKCQkJZnMuYmwgPSBibC5wcmV2aW91cwoJCQlzZWxmOnJlbW92ZXZhcnMoZnMubHMsIGJsLm5hY3R2YXIpCgkJCWlmIGJsLnVwdmFsIHRoZW4KCQkJCWx1YUs6Y29kZUFCQyhmcywgIk9QX0NMT1NFIiwgYmwubmFjdHZhciwgMCwgMCkKCQkJZW5kCgkJCS0tIGEgYmxvY2sgZWl0aGVyIGNvbnRyb2xzIHNjb3BlIG9yIGJyZWFrcyAobmV2ZXIgYm90aCkKCQkJbHVhX2Fzc2VydChub3QgYmwuaXNicmVha2FibGUgb3Igbm90IGJsLnVwdmFsKQoJCQlsdWFfYXNzZXJ0KGJsLm5hY3R2YXIgPT0gZnMubmFjdHZhcikKCQkJZnMuZnJlZXJlZyA9IGZzLm5hY3R2YXIgIC0tIGZyZWUgcmVnaXN0ZXJzCgkJCWx1YUs6cGF0Y2h0b2hlcmUoZnMsIGJsLmJyZWFrbGlzdCkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gaW1wbGVtZW50IHRoZSBpbnN0YW50aWF0aW9uIG9mIGEgZnVuY3Rpb24gcHJvdG90eXBlLCBhcHBlbmQgbGlzdCBvZgoJCS0tIHVwdmFsdWVzIGFmdGVyIHRoZSBpbnN0YW50aWF0aW9uIGluc3RydWN0aW9uCgkJLS0gKiB1c2VkIG9ubHkgaW4gYm9keSgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpwdXNoY2xvc3VyZShscywgZnVuYywgdikKCQkJbG9jYWwgZnMgPSBscy5mcwoJCQlsb2NhbCBmID0gZnMuZgoJCQlzZWxmOmdyb3d2ZWN0b3IobHMuTCwgZi5wLCBmcy5ucCwgZi5zaXplcCwgbmlsLAoJCQkJbHVhUC5NQVhBUkdfQngsICJjb25zdGFudCB0YWJsZSBvdmVyZmxvdyIpCgkJCS0tIGxvb3AgdG8gaW5pdGlhbGl6ZSBlbXB0eSBmLnAgcG9zaXRpb25zIG5vdCByZXF1aXJlZAoJCQlmLnBbZnMubnBdID0gZnVuYy5mCgkJCWZzLm5wID0gZnMubnAgKyAxCgkJCS0tIGx1YUNfb2JqYmFycmllcihscy0+TCwgZiwgZnVuYy0+Zik7IC8qIEMgKi8KCQkJc2VsZjppbml0X2V4cCh2LCAiVlJFTE9DQUJMRSIsIGx1YUs6Y29kZUFCeChmcywgIk9QX0NMT1NVUkUiLCAwLCBmcy5ucCAtIDEpKQoJCQlmb3IgaSA9IDAsIGZ1bmMuZi5udXBzIC0gMSBkbwoJCQkJbG9jYWwgbyA9IChmdW5jLnVwdmFsdWVzW2ldLmsgPT0gIlZMT0NBTCIpIGFuZCAiT1BfTU9WRSIgb3IgIk9QX0dFVFVQVkFMIgoJCQkJbHVhSzpjb2RlQUJDKGZzLCBvLCAwLCBmdW5jLnVwdmFsdWVzW2ldLmluZm8sIDApCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBvcGVuaW5nIG9mIGEgZnVuY3Rpb24KCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOm9wZW5fZnVuYyhscywgZnMpCgkJCWxvY2FsIEwgPSBscy5MCgkJCWxvY2FsIGYgPSBzZWxmOm5ld3Byb3RvKGxzLkwpCgkJCWZzLmYgPSBmCgkJCWZzLnByZXYgPSBscy5mcyAgLS0gbGlua2VkIGxpc3Qgb2YgZnVuY3N0YXRlcwoJCQlmcy5scyA9IGxzCgkJCWZzLkwgPSBMCgkJCWxzLmZzID0gZnMKCQkJZnMucGMgPSAwCgkJCWZzLmxhc3R0YXJnZXQgPSAtMQoJCQlmcy5qcGMgPSBsdWFLLk5PX0pVTVAKCQkJZnMuZnJlZXJlZyA9IDAKCQkJZnMubmsgPSAwCgkJCWZzLm5wID0gMAoJCQlmcy5ubG9jdmFycyA9IDAKCQkJZnMubmFjdHZhciA9IDAKCQkJZnMuYmwgPSBuaWwKCQkJZi5zb3VyY2UgPSBscy5zb3VyY2UKCQkJZi5tYXhzdGFja3NpemUgPSAyICAtLSByZWdpc3RlcnMgMC8xIGFyZSBhbHdheXMgdmFsaWQKCQkJZnMuaCA9IHt9ICAtLSBjb25zdGFudCB0YWJsZTsgd2FzIGx1YUhfbmV3IGNhbGwKCQkJLS0gYW5jaG9yIHRhYmxlIG9mIGNvbnN0YW50cyBhbmQgcHJvdG90eXBlICh0byBhdm9pZCBiZWluZyBjb2xsZWN0ZWQpCgkJCS0tIHNldGh2YWx1ZTJzKEwsIEwtPnRvcCwgZnMtPmgpOyBpbmNyX3RvcChMKTsgLyogQyAqLwoJCQktLSBzZXRwdHZhbHVlMnMoTCwgTC0+dG9wLCBmKTsgaW5jcl90b3AoTCk7CgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGNsb3Npbmcgb2YgYSBmdW5jdGlvbgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Y2xvc2VfZnVuYyhscykKCQkJbG9jYWwgTCA9IGxzLkwKCQkJbG9jYWwgZnMgPSBscy5mcwoJCQlsb2NhbCBmID0gZnMuZgoJCQlzZWxmOnJlbW92ZXZhcnMobHMsIDApCgkJCWx1YUs6cmV0KGZzLCAwLCAwKSAgLS0gZmluYWwgcmV0dXJuCgkJCS0tIGx1YU1fcmVhbGxvY3ZlY3RvciBkZWxldGVkIGZvciBmLT5jb2RlLCBmLT5saW5laW5mbywgZi0+aywgZi0+cCwKCQkJLS0gZi0+bG9jdmFycywgZi0+dXB2YWx1ZXM7IG5vdCByZXF1aXJlZCBmb3IgTHVhIHRhYmxlIGFycmF5cwoJCQlmLnNpemVjb2RlID0gZnMucGMKCQkJZi5zaXplbGluZWluZm8gPSBmcy5wYwoJCQlmLnNpemVrID0gZnMubmsKCQkJZi5zaXplcCA9IGZzLm5wCgkJCWYuc2l6ZWxvY3ZhcnMgPSBmcy5ubG9jdmFycwoJCQlmLnNpemV1cHZhbHVlcyA9IGYubnVwcwoJCQktLWx1YV9hc3NlcnQobHVhR19jaGVja2NvZGUoZikpICAtLSBjdXJyZW50bHkgbm90IGltcGxlbWVudGVkCgkJCWx1YV9hc3NlcnQoZnMuYmwgPT0gbmlsKQoJCQlscy5mcyA9IGZzLnByZXYKCQkJLS0gdGhlIGZvbGxvd2luZyBpcyBub3QgcmVxdWlyZWQgZm9yIHRoaXMgaW1wbGVtZW50YXRpb247IGtlcHQgaGVyZQoJCQktLSBmb3IgY29tcGxldGVuZXNzCgkJCS0tIEwtPnRvcCAtPSAyOyAgLyogcmVtb3ZlIHRhYmxlIGFuZCBwcm90b3R5cGUgZnJvbSB0aGUgc3RhY2sgKi8KCQkJLS0gbGFzdCB0b2tlbiByZWFkIHdhcyBhbmNob3JlZCBpbiBkZWZ1bmN0IGZ1bmN0aW9uOyBtdXN0IHJlYW5jaG9yIGl0CgkJCWlmIGZzIHRoZW4gc2VsZjphbmNob3JfdG9rZW4obHMpIGVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZXIgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24KCQktLSAqIG5vdGUgYWRkaXRpb25hbCBzdWItdGFibGVzIG5lZWRlZCBmb3IgTGV4U3RhdGUsIEZ1bmNTdGF0ZQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6cGFyc2VyKEwsIHosIGJ1ZmYsIG5hbWUpCgkJCWxvY2FsIGxleHN0YXRlID0ge30gIC0tIExleFN0YXRlCgkJCWxleHN0YXRlLnQgPSB7fQoJCQlsZXhzdGF0ZS5sb29rYWhlYWQgPSB7fQoJCQlsb2NhbCBmdW5jc3RhdGUgPSB7fSAgLS0gRnVuY1N0YXRlCgkJCWZ1bmNzdGF0ZS51cHZhbHVlcyA9IHt9CgkJCWZ1bmNzdGF0ZS5hY3R2YXIgPSB7fQoJCQktLSB0aGUgZm9sbG93aW5nIG5DY2FsbHMgaW5pdGlhbGl6YXRpb24gYWRkZWQgZm9yIGNvbnZlbmllbmNlCgkJCUwubkNjYWxscyA9IDAKCQkJbGV4c3RhdGUuYnVmZiA9IGJ1ZmYKCQkJbHVhWDpzZXRpbnB1dChMLCBsZXhzdGF0ZSwgeiwgbmFtZSkKCQkJc2VsZjpvcGVuX2Z1bmMobGV4c3RhdGUsIGZ1bmNzdGF0ZSkKCQkJZnVuY3N0YXRlLmYuaXNfdmFyYXJnID0gc2VsZi5WQVJBUkdfSVNWQVJBUkcgIC0tIG1haW4gZnVuYy4gaXMgYWx3YXlzIHZhcmFyZwoJCQlsdWFYOm5leHQobGV4c3RhdGUpICAtLSByZWFkIGZpcnN0IHRva2VuCgkJCXNlbGY6Y2h1bmsobGV4c3RhdGUpCgkJCXNlbGY6Y2hlY2sobGV4c3RhdGUsICJUS19FT1MiKQoJCQlzZWxmOmNsb3NlX2Z1bmMobGV4c3RhdGUpCgkJCWx1YV9hc3NlcnQoZnVuY3N0YXRlLnByZXYgPT0gbmlsKQoJCQlsdWFfYXNzZXJ0KGZ1bmNzdGF0ZS5mLm51cHMgPT0gMCkKCQkJbHVhX2Fzc2VydChsZXhzdGF0ZS5mcyA9PSBuaWwpCgkJCXJldHVybiBmdW5jc3RhdGUuZgoJCWVuZAoKLS1bWy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIEdSQU1NQVIgUlVMRVMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLV1dCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgZnVuY3Rpb24gbmFtZSBzdWZmaXgsIGZvciBmdW5jdGlvbiBjYWxsIHNwZWNpZmljYXRpb25zCgkJLS0gKiB1c2VkIGluIHByaW1hcnlleHAoKSwgZnVuY25hbWUoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6ZmllbGQobHMsIHYpCgkJCS0tIGZpZWxkIC0+IFsnLicgfCAnOiddIE5BTUUKCQkJbG9jYWwgZnMgPSBscy5mcwoJCQlsb2NhbCBrZXkgPSB7fSAgLS0gZXhwZGVzYwoJCQlsdWFLOmV4cDJhbnlyZWcoZnMsIHYpCgkJCWx1YVg6bmV4dChscykgIC0tIHNraXAgdGhlIGRvdCBvciBjb2xvbgoJCQlzZWxmOmNoZWNrbmFtZShscywga2V5KQoJCQlsdWFLOmluZGV4ZWQoZnMsIHYsIGtleSkKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gcGFyc2UgYSB0YWJsZSBpbmRleGluZyBzdWZmaXgsIGZvciBjb25zdHJ1Y3RvcnMsIGV4cHJlc3Npb25zCgkJLS0gKiB1c2VkIGluIHJlY2ZpZWxkKCksIHByaW1hcnlleHAoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6eWluZGV4KGxzLCB2KQoJCQktLSBpbmRleCAtPiAnWycgZXhwciAnXScKCQkJbHVhWDpuZXh0KGxzKSAgLS0gc2tpcCB0aGUgJ1snCgkJCXNlbGY6ZXhwcihscywgdikKCQkJbHVhSzpleHAydmFsKGxzLmZzLCB2KQoJCQlzZWxmOmNoZWNrbmV4dChscywgIl0iKQoJCWVuZAoKLS1bWy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIFJ1bGVzIGZvciBDb25zdHJ1Y3RvcnMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLV1dCgotLVtbLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gc3RydWN0IENvbnNDb250cm9sOgotLSAgIHYgIC0tIGxhc3QgbGlzdCBpdGVtIHJlYWQgKHRhYmxlOiBzdHJ1Y3QgZXhwZGVzYykKLS0gICB0ICAtLSB0YWJsZSBkZXNjcmlwdG9yICh0YWJsZTogc3RydWN0IGV4cGRlc2MpCi0tICAgbmggIC0tIHRvdGFsIG51bWJlciBvZiAncmVjb3JkJyBlbGVtZW50cwotLSAgIG5hICAtLSB0b3RhbCBudW1iZXIgb2YgYXJyYXkgZWxlbWVudHMKLS0gICB0b3N0b3JlICAtLSBudW1iZXIgb2YgYXJyYXkgZWxlbWVudHMgcGVuZGluZyB0byBiZSBzdG9yZWQKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLV1dCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgdGFibGUgcmVjb3JkIChoYXNoKSBmaWVsZAoJCS0tICogdXNlZCBpbiBjb25zdHJ1Y3RvcigpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpyZWNmaWVsZChscywgY2MpCgkJCS0tIHJlY2ZpZWxkIC0+IChOQU1FIHwgJ1snZXhwMSddJykgPSBleHAxCgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJbG9jYWwgcmVnID0gbHMuZnMuZnJlZXJlZwoJCQlsb2NhbCBrZXksIHZhbCA9IHt9LCB7fSAgLS0gZXhwZGVzYwoJCQlpZiBscy50LnRva2VuID09ICJUS19OQU1FIiB0aGVuCgkJCQlzZWxmOmNoZWNrbGltaXQoZnMsIGNjLm5oLCBzZWxmLk1BWF9JTlQsICJpdGVtcyBpbiBhIGNvbnN0cnVjdG9yIikKCQkJCXNlbGY6Y2hlY2tuYW1lKGxzLCBrZXkpCgkJCWVsc2UgIC0tIGxzLT50LnRva2VuID09ICdbJwoJCQkJc2VsZjp5aW5kZXgobHMsIGtleSkKCQkJZW5kCgkJCWNjLm5oID0gY2MubmggKyAxCgkJCXNlbGY6Y2hlY2tuZXh0KGxzLCAiPSIpCgkJCWxvY2FsIHJra2V5ID0gbHVhSzpleHAyUksoZnMsIGtleSkKCQkJc2VsZjpleHByKGxzLCB2YWwpCgkJCWx1YUs6Y29kZUFCQyhmcywgIk9QX1NFVFRBQkxFIiwgY2MudC5pbmZvLCBya2tleSwgbHVhSzpleHAyUksoZnMsIHZhbCkpCgkJCWZzLmZyZWVyZWcgPSByZWcgIC0tIGZyZWUgcmVnaXN0ZXJzCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGVtaXQgYSBzZXQgbGlzdCBpbnN0cnVjdGlvbiBpZiBlbm91Z2ggZWxlbWVudHMgKExGSUVMRFNfUEVSX0ZMVVNIKQoJCS0tICogdXNlZCBpbiBjb25zdHJ1Y3RvcigpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpjbG9zZWxpc3RmaWVsZChmcywgY2MpCgkJCWlmIGNjLnYuayA9PSAiVlZPSUQiIHRoZW4gcmV0dXJuIGVuZCAgLS0gdGhlcmUgaXMgbm8gbGlzdCBpdGVtCgkJCWx1YUs6ZXhwMm5leHRyZWcoZnMsIGNjLnYpCgkJCWNjLnYuayA9ICJWVk9JRCIKCQkJaWYgY2MudG9zdG9yZSA9PSBsdWFQLkxGSUVMRFNfUEVSX0ZMVVNIIHRoZW4KCQkJCWx1YUs6c2V0bGlzdChmcywgY2MudC5pbmZvLCBjYy5uYSwgY2MudG9zdG9yZSkgIC0tIGZsdXNoCgkJCQljYy50b3N0b3JlID0gMCAgLS0gbm8gbW9yZSBpdGVtcyBwZW5kaW5nCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBlbWl0IGEgc2V0IGxpc3QgaW5zdHJ1Y3Rpb24gYXQgdGhlIGVuZCBvZiBwYXJzaW5nIGxpc3QgY29uc3RydWN0b3IKCQktLSAqIHVzZWQgaW4gY29uc3RydWN0b3IoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6bGFzdGxpc3RmaWVsZChmcywgY2MpCgkJCWlmIGNjLnRvc3RvcmUgPT0gMCB0aGVuIHJldHVybiBlbmQKCQkJaWYgc2VsZjpoYXNtdWx0cmV0KGNjLnYuaykgdGhlbgoJCQkJbHVhSzpzZXRtdWx0cmV0KGZzLCBjYy52KQoJCQkJbHVhSzpzZXRsaXN0KGZzLCBjYy50LmluZm8sIGNjLm5hLCBzZWxmLkxVQV9NVUxUUkVUKQoJCQkJY2MubmEgPSBjYy5uYSAtIDEgIC0tIGRvIG5vdCBjb3VudCBsYXN0IGV4cHJlc3Npb24gKHVua25vd24gbnVtYmVyIG9mIGVsZW1lbnRzKQoJCQllbHNlCgkJCQlpZiBjYy52Lmsgfj0gIlZWT0lEIiB0aGVuCgkJCQkJbHVhSzpleHAybmV4dHJlZyhmcywgY2MudikKCQkJCWVuZAoJCQkJbHVhSzpzZXRsaXN0KGZzLCBjYy50LmluZm8sIGNjLm5hLCBjYy50b3N0b3JlKQoJCQllbmQKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gcGFyc2UgYSB0YWJsZSBsaXN0IChhcnJheSkgZmllbGQKCQktLSAqIHVzZWQgaW4gY29uc3RydWN0b3IoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6bGlzdGZpZWxkKGxzLCBjYykKCQkJc2VsZjpleHByKGxzLCBjYy52KQoJCQlzZWxmOmNoZWNrbGltaXQobHMuZnMsIGNjLm5hLCBzZWxmLk1BWF9JTlQsICJpdGVtcyBpbiBhIGNvbnN0cnVjdG9yIikKCQkJY2MubmEgPSBjYy5uYSArIDEKCQkJY2MudG9zdG9yZSA9IGNjLnRvc3RvcmUgKyAxCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgdGFibGUgY29uc3RydWN0b3IKCQktLSAqIHVzZWQgaW4gZnVuY2FyZ3MoKSwgc2ltcGxlZXhwKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmNvbnN0cnVjdG9yKGxzLCB0KQoJCQktLSBjb25zdHJ1Y3RvciAtPiAneycgWyBmaWVsZCB7IGZpZWxkc2VwIGZpZWxkIH0gWyBmaWVsZHNlcCBdIF0gJ30nCgkJCS0tIGZpZWxkIC0+IHJlY2ZpZWxkIHwgbGlzdGZpZWxkCgkJCS0tIGZpZWxkc2VwIC0+ICcsJyB8ICc7JwoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWxvY2FsIGxpbmUgPSBscy5saW5lbnVtYmVyCgkJCWxvY2FsIHBjID0gbHVhSzpjb2RlQUJDKGZzLCAiT1BfTkVXVEFCTEUiLCAwLCAwLCAwKQoJCQlsb2NhbCBjYyA9IHt9ICAtLSBDb25zQ29udHJvbAoJCQljYy52ID0ge30KCQkJY2MubmEsIGNjLm5oLCBjYy50b3N0b3JlID0gMCwgMCwgMAoJCQljYy50ID0gdAoJCQlzZWxmOmluaXRfZXhwKHQsICJWUkVMT0NBQkxFIiwgcGMpCgkJCXNlbGY6aW5pdF9leHAoY2MudiwgIlZWT0lEIiwgMCkgIC0tIG5vIHZhbHVlICh5ZXQpCgkJCWx1YUs6ZXhwMm5leHRyZWcobHMuZnMsIHQpICAtLSBmaXggaXQgYXQgc3RhY2sgdG9wIChmb3IgZ2MpCgkJCXNlbGY6Y2hlY2tuZXh0KGxzLCAieyIpCgkJCXJlcGVhdAoJCQkJbHVhX2Fzc2VydChjYy52LmsgPT0gIlZWT0lEIiBvciBjYy50b3N0b3JlID4gMCkKCQkJCWlmIGxzLnQudG9rZW4gPT0gIn0iIHRoZW4gYnJlYWsgZW5kCgkJCQlzZWxmOmNsb3NlbGlzdGZpZWxkKGZzLCBjYykKCQkJCWxvY2FsIGMgPSBscy50LnRva2VuCgoJCQkJaWYgYyA9PSAiVEtfTkFNRSIgdGhlbiAgLS0gbWF5IGJlIGxpc3RmaWVsZHMgb3IgcmVjZmllbGRzCgkJCQkJbHVhWDpsb29rYWhlYWQobHMpCgkJCQkJaWYgbHMubG9va2FoZWFkLnRva2VuIH49ICI9IiB0aGVuICAtLSBleHByZXNzaW9uPwoJCQkJCQlzZWxmOmxpc3RmaWVsZChscywgY2MpCgkJCQkJZWxzZQoJCQkJCQlzZWxmOnJlY2ZpZWxkKGxzLCBjYykKCQkJCQllbmQKCQkJCWVsc2VpZiBjID09ICJbIiB0aGVuICAtLSBjb25zdHJ1Y3Rvcl9pdGVtIC0+IHJlY2ZpZWxkCgkJCQkJc2VsZjpyZWNmaWVsZChscywgY2MpCgkJCQllbHNlICAtLSBjb25zdHJ1Y3Rvcl9wYXJ0IC0+IGxpc3RmaWVsZAoJCQkJCXNlbGY6bGlzdGZpZWxkKGxzLCBjYykKCQkJCWVuZAoJCQl1bnRpbCBub3Qgc2VsZjp0ZXN0bmV4dChscywgIiwiKSBhbmQgbm90IHNlbGY6dGVzdG5leHQobHMsICI7IikKCQkJc2VsZjpjaGVja19tYXRjaChscywgIn0iLCAieyIsIGxpbmUpCgkJCXNlbGY6bGFzdGxpc3RmaWVsZChmcywgY2MpCgkJCWx1YVA6U0VUQVJHX0IoZnMuZi5jb2RlW3BjXSwgc2VsZjppbnQyZmIoY2MubmEpKSAtLSBzZXQgaW5pdGlhbCBhcnJheSBzaXplCgkJCWx1YVA6U0VUQVJHX0MoZnMuZi5jb2RlW3BjXSwgc2VsZjppbnQyZmIoY2MubmgpKSAtLSBzZXQgaW5pdGlhbCB0YWJsZSBzaXplCgkJZW5kCgoJCS0tIH09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIHRoZSBhcmd1bWVudHMgKHBhcmFtZXRlcnMpIG9mIGEgZnVuY3Rpb24gZGVjbGFyYXRpb24KCQktLSAqIHVzZWQgaW4gYm9keSgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpwYXJsaXN0KGxzKQoJCQktLSBwYXJsaXN0IC0+IFsgcGFyYW0geyAnLCcgcGFyYW0gfSBdCgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJbG9jYWwgZiA9IGZzLmYKCQkJbG9jYWwgbnBhcmFtcyA9IDAKCQkJZi5pc192YXJhcmcgPSAwCgkJCWlmIGxzLnQudG9rZW4gfj0gIikiIHRoZW4gIC0tIGlzICdwYXJsaXN0JyBub3QgZW1wdHk/CgkJCQlyZXBlYXQKCQkJCQlsb2NhbCBjID0gbHMudC50b2tlbgoJCQkJCWlmIGMgPT0gIlRLX05BTUUiIHRoZW4gIC0tIHBhcmFtIC0+IE5BTUUKCQkJCQkJc2VsZjpuZXdfbG9jYWx2YXIobHMsIHNlbGY6c3RyX2NoZWNrbmFtZShscyksIG5wYXJhbXMpCgkJCQkJCW5wYXJhbXMgPSBucGFyYW1zICsgMQoJCQkJCWVsc2VpZiBjID09ICJUS19ET1RTIiB0aGVuICAtLSBwYXJhbSAtPiBgLi4uJwoJCQkJCQlsdWFYOm5leHQobHMpCgkJCQkJCS0tIFtbCgkJCQkJCS0tICNpZiBkZWZpbmVkKExVQV9DT01QQVRfVkFSQVJHKQoJCQkJCQktLSB1c2UgYGFyZycgYXMgZGVmYXVsdCBuYW1lCgkJCQkJCXNlbGY6bmV3X2xvY2FsdmFybGl0ZXJhbChscywgImFyZyIsIG5wYXJhbXMpCgkJCQkJCW5wYXJhbXMgPSBucGFyYW1zICsgMQoJCQkJCQlmLmlzX3ZhcmFyZyA9IHNlbGYuVkFSQVJHX0hBU0FSRyArIHNlbGYuVkFSQVJHX05FRURTQVJHCgkJCQkJCS0tICNlbmRpZgoJCQkJCQktLV1dCgkJCQkJCWYuaXNfdmFyYXJnID0gZi5pc192YXJhcmcgKyBzZWxmLlZBUkFSR19JU1ZBUkFSRwoJCQkJCWVsc2UKCQkJCQkJbHVhWDpzeW50YXhlcnJvcihscywgIjxuYW1lPiBvciAiLi5zZWxmOkxVQV9RTCgiLi4uIikuLiIgZXhwZWN0ZWQiKQoJCQkJCWVuZAoJCQkJdW50aWwgZi5pc192YXJhcmcgfj0gMCBvciBub3Qgc2VsZjp0ZXN0bmV4dChscywgIiwiKQoJCQllbmQtLWlmCgkJCXNlbGY6YWRqdXN0bG9jYWx2YXJzKGxzLCBucGFyYW1zKQoJCQktLSBOT1RFOiB0aGUgZm9sbG93aW5nIHdvcmtzIG9ubHkgd2hlbiBIQVNBUkdfTUFTSyBpcyAyIQoJCQlmLm51bXBhcmFtcyA9IGZzLm5hY3R2YXIgLSAoZi5pc192YXJhcmcgJSBzZWxmLkhBU0FSR19NQVNLKQoJCQlsdWFLOnJlc2VydmVyZWdzKGZzLCBmcy5uYWN0dmFyKSAgLS0gcmVzZXJ2ZSByZWdpc3RlciBmb3IgcGFyYW1ldGVycwoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBib2R5CgkJLS0gKiB1c2VkIGluIHNpbXBsZWV4cCgpLCBsb2NhbGZ1bmMoKSwgZnVuY3N0YXQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Ym9keShscywgZSwgbmVlZHNlbGYsIGxpbmUpCgkJCS0tIGJvZHkgLT4gICcoJyBwYXJsaXN0ICcpJyBjaHVuayBFTkQKCQkJbG9jYWwgbmV3X2ZzID0ge30gIC0tIEZ1bmNTdGF0ZQoJCQluZXdfZnMudXB2YWx1ZXMgPSB7fQoJCQluZXdfZnMuYWN0dmFyID0ge30KCQkJc2VsZjpvcGVuX2Z1bmMobHMsIG5ld19mcykKCQkJbmV3X2ZzLmYubGluZURlZmluZWQgPSBsaW5lCgkJCXNlbGY6Y2hlY2tuZXh0KGxzLCAiKCIpCgkJCWlmIG5lZWRzZWxmIHRoZW4KCQkJCXNlbGY6bmV3X2xvY2FsdmFybGl0ZXJhbChscywgInNlbGYiLCAwKQoJCQkJc2VsZjphZGp1c3Rsb2NhbHZhcnMobHMsIDEpCgkJCWVuZAoJCQlzZWxmOnBhcmxpc3QobHMpCgkJCXNlbGY6Y2hlY2tuZXh0KGxzLCAiKSIpCgkJCXNlbGY6Y2h1bmsobHMpCgkJCW5ld19mcy5mLmxhc3RsaW5lZGVmaW5lZCA9IGxzLmxpbmVudW1iZXIKCQkJc2VsZjpjaGVja19tYXRjaChscywgIlRLX0VORCIsICJUS19GVU5DVElPTiIsIGxpbmUpCgkJCXNlbGY6Y2xvc2VfZnVuYyhscykKCQkJc2VsZjpwdXNoY2xvc3VyZShscywgbmV3X2ZzLCBlKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhIGxpc3Qgb2YgY29tbWEtc2VwYXJhdGVkIGV4cHJlc3Npb25zCgkJLS0gKiB1c2VkIGlzIG11bHRpcGxlIGxvY2F0aW9ucwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6ZXhwbGlzdDEobHMsIHYpCgkJCS0tIGV4cGxpc3QxIC0+IGV4cHIgeyAnLCcgZXhwciB9CgkJCWxvY2FsIG4gPSAxICAtLSBhdCBsZWFzdCBvbmUgZXhwcmVzc2lvbgoJCQlzZWxmOmV4cHIobHMsIHYpCgkJCXdoaWxlIHNlbGY6dGVzdG5leHQobHMsICIsIikgZG8KCQkJCWx1YUs6ZXhwMm5leHRyZWcobHMuZnMsIHYpCgkJCQlzZWxmOmV4cHIobHMsIHYpCgkJCQluID0gbiArIDEKCQkJZW5kCgkJCXJldHVybiBuCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIHRoZSBwYXJhbWV0ZXJzIG9mIGEgZnVuY3Rpb24gY2FsbAoJCS0tICogY29udHJhc3Qgd2l0aCBwYXJsaXN0KCksIHVzZWQgaW4gZnVuY3Rpb24gZGVjbGFyYXRpb25zCgkJLS0gKiB1c2VkIGluIHByaW1hcnlleHAoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6ZnVuY2FyZ3MobHMsIGYpCgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJbG9jYWwgYXJncyA9IHt9ICAtLSBleHBkZXNjCgkJCWxvY2FsIG5wYXJhbXMKCQkJbG9jYWwgbGluZSA9IGxzLmxpbmVudW1iZXIKCQkJbG9jYWwgYyA9IGxzLnQudG9rZW4KCQkJaWYgYyA9PSAiKCIgdGhlbiAgLS0gZnVuY2FyZ3MgLT4gJygnIFsgZXhwbGlzdDEgXSAnKScKCQkJCWlmIGxpbmUgfj0gbHMubGFzdGxpbmUgdGhlbgoJCQkJCWx1YVg6c3ludGF4ZXJyb3IobHMsICJhbWJpZ3VvdXMgc3ludGF4IChmdW5jdGlvbiBjYWxsIHggbmV3IHN0YXRlbWVudCkiKQoJCQkJZW5kCgkJCQlsdWFYOm5leHQobHMpCgkJCQlpZiBscy50LnRva2VuID09ICIpIiB0aGVuICAtLSBhcmcgbGlzdCBpcyBlbXB0eT8KCQkJCQlhcmdzLmsgPSAiVlZPSUQiCgkJCQllbHNlCgkJCQkJc2VsZjpleHBsaXN0MShscywgYXJncykKCQkJCQlsdWFLOnNldG11bHRyZXQoZnMsIGFyZ3MpCgkJCQllbmQKCQkJCXNlbGY6Y2hlY2tfbWF0Y2gobHMsICIpIiwgIigiLCBsaW5lKQoJCQllbHNlaWYgYyA9PSAieyIgdGhlbiAgLS0gZnVuY2FyZ3MgLT4gY29uc3RydWN0b3IKCQkJCXNlbGY6Y29uc3RydWN0b3IobHMsIGFyZ3MpCgkJCWVsc2VpZiBjID09ICJUS19TVFJJTkciIHRoZW4gIC0tIGZ1bmNhcmdzIC0+IFNUUklORwoJCQkJc2VsZjpjb2Rlc3RyaW5nKGxzLCBhcmdzLCBscy50LnNlbWluZm8pCgkJCQlsdWFYOm5leHQobHMpICAtLSBtdXN0IHVzZSAnc2VtaW5mbycgYmVmb3JlICduZXh0JwoJCQllbHNlCgkJCQlsdWFYOnN5bnRheGVycm9yKGxzLCAiZnVuY3Rpb24gYXJndW1lbnRzIGV4cGVjdGVkIikKCQkJCXJldHVybgoJCQllbmQKCQkJbHVhX2Fzc2VydChmLmsgPT0gIlZOT05SRUxPQyIpCgkJCWxvY2FsIGJhc2UgPSBmLmluZm8gIC0tIGJhc2UgcmVnaXN0ZXIgZm9yIGNhbGwKCQkJaWYgc2VsZjpoYXNtdWx0cmV0KGFyZ3MuaykgdGhlbgoJCQkJbnBhcmFtcyA9IHNlbGYuTFVBX01VTFRSRVQgIC0tIG9wZW4gY2FsbAoJCQllbHNlCgkJCQlpZiBhcmdzLmsgfj0gIlZWT0lEIiB0aGVuCgkJCQkJbHVhSzpleHAybmV4dHJlZyhmcywgYXJncykgIC0tIGNsb3NlIGxhc3QgYXJndW1lbnQKCQkJCWVuZAoJCQkJbnBhcmFtcyA9IGZzLmZyZWVyZWcgLSAoYmFzZSArIDEpCgkJCWVuZAoJCQlzZWxmOmluaXRfZXhwKGYsICJWQ0FMTCIsIGx1YUs6Y29kZUFCQyhmcywgIk9QX0NBTEwiLCBiYXNlLCBucGFyYW1zICsgMSwgMikpCgkJCWx1YUs6Zml4bGluZShmcywgbGluZSkKCQkJZnMuZnJlZXJlZyA9IGJhc2UgKyAxICAtLSBjYWxsIHJlbW92ZSBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGFuZCBsZWF2ZXMKCQkJLS0gKHVubGVzcyBjaGFuZ2VkKSBvbmUgcmVzdWx0CgkJZW5kCgotLVtbLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gRXhwcmVzc2lvbiBwYXJzaW5nCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1dXQoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZXMgYW4gZXhwcmVzc2lvbiBpbiBwYXJlbnRoZXNlcyBvciBhIHNpbmdsZSB2YXJpYWJsZQoJCS0tICogdXNlZCBpbiBwcmltYXJ5ZXhwKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOnByZWZpeGV4cChscywgdikKCQkJLS0gcHJlZml4ZXhwIC0+IE5BTUUgfCAnKCcgZXhwciAnKScKCQkJbG9jYWwgYyA9IGxzLnQudG9rZW4KCQkJaWYgYyA9PSAiKCIgdGhlbgoJCQkJbG9jYWwgbGluZSA9IGxzLmxpbmVudW1iZXIKCQkJCWx1YVg6bmV4dChscykKCQkJCXNlbGY6ZXhwcihscywgdikKCQkJCXNlbGY6Y2hlY2tfbWF0Y2gobHMsICIpIiwgIigiLCBsaW5lKQoJCQkJbHVhSzpkaXNjaGFyZ2V2YXJzKGxzLmZzLCB2KQoJCQllbHNlaWYgYyA9PSAiVEtfTkFNRSIgdGhlbgoJCQkJc2VsZjpzaW5nbGV2YXIobHMsIHYpCgkJCWVsc2UKCQkJCWx1YVg6c3ludGF4ZXJyb3IobHMsICJ1bmV4cGVjdGVkIHN5bWJvbCIpCgkJCWVuZC0taWYgYwoJCQlyZXR1cm4KCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gcGFyc2VzIGEgcHJlZml4ZXhwIChhbiBleHByZXNzaW9uIGluIHBhcmVudGhlc2VzIG9yIGEgc2luZ2xlIHZhcmlhYmxlKQoJCS0tIG9yIGEgZnVuY3Rpb24gY2FsbCBzcGVjaWZpY2F0aW9uCgkJLS0gKiB1c2VkIGluIHNpbXBsZWV4cCgpLCBhc3NpZ25tZW50KCksIGV4cHJzdGF0KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOnByaW1hcnlleHAobHMsIHYpCgkJCS0tIHByaW1hcnlleHAgLT4KCQkJLS0gICAgcHJlZml4ZXhwIHsgJy4nIE5BTUUgfCAnWycgZXhwICddJyB8ICc6JyBOQU1FIGZ1bmNhcmdzIHwgZnVuY2FyZ3MgfQoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCXNlbGY6cHJlZml4ZXhwKGxzLCB2KQoJCQl3aGlsZSB0cnVlIGRvCgkJCQlsb2NhbCBjID0gbHMudC50b2tlbgoJCQkJaWYgYyA9PSAiLiIgdGhlbiAgLS0gZmllbGQKCQkJCQlzZWxmOmZpZWxkKGxzLCB2KQoJCQkJZWxzZWlmIGMgPT0gIlsiIHRoZW4gIC0tICdbJyBleHAxICddJwoJCQkJCWxvY2FsIGtleSA9IHt9ICAtLSBleHBkZXNjCgkJCQkJbHVhSzpleHAyYW55cmVnKGZzLCB2KQoJCQkJCXNlbGY6eWluZGV4KGxzLCBrZXkpCgkJCQkJbHVhSzppbmRleGVkKGZzLCB2LCBrZXkpCgkJCQllbHNlaWYgYyA9PSAiOiIgdGhlbiAgLS0gJzonIE5BTUUgZnVuY2FyZ3MKCQkJCQlsb2NhbCBrZXkgPSB7fSAgLS0gZXhwZGVzYwoJCQkJCWx1YVg6bmV4dChscykKCQkJCQlzZWxmOmNoZWNrbmFtZShscywga2V5KQoJCQkJCWx1YUs6X3NlbGYoZnMsIHYsIGtleSkKCQkJCQlzZWxmOmZ1bmNhcmdzKGxzLCB2KQoJCQkJZWxzZWlmIGMgPT0gIigiIG9yIGMgPT0gIlRLX1NUUklORyIgb3IgYyA9PSAieyIgdGhlbiAgLS0gZnVuY2FyZ3MKCQkJCQlsdWFLOmV4cDJuZXh0cmVnKGZzLCB2KQoJCQkJCXNlbGY6ZnVuY2FyZ3MobHMsIHYpCgkJCQllbHNlCgkJCQkJcmV0dXJuCgkJCQllbmQtLWlmIGMKCQkJZW5kLS13aGlsZQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZXMgZ2VuZXJhbCBleHByZXNzaW9uIHR5cGVzLCBjb25zdGFudHMgaGFuZGxlZCBoZXJlCgkJLS0gKiB1c2VkIGluIHN1YmV4cHIoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6c2ltcGxlZXhwKGxzLCB2KQoJCQktLSBzaW1wbGVleHAgLT4gTlVNQkVSIHwgU1RSSU5HIHwgTklMIHwgVFJVRSB8IEZBTFNFIHwgLi4uIHwKCQkJLS0gICAgICAgICAgICAgIGNvbnN0cnVjdG9yIHwgRlVOQ1RJT04gYm9keSB8IHByaW1hcnlleHAKCQkJbG9jYWwgYyA9IGxzLnQudG9rZW4KCQkJaWYgYyA9PSAiVEtfTlVNQkVSIiB0aGVuCgkJCQlzZWxmOmluaXRfZXhwKHYsICJWS05VTSIsIDApCgkJCQl2Lm52YWwgPSBscy50LnNlbWluZm8KCQkJZWxzZWlmIGMgPT0gIlRLX1NUUklORyIgdGhlbgoJCQkJc2VsZjpjb2Rlc3RyaW5nKGxzLCB2LCBscy50LnNlbWluZm8pCgkJCWVsc2VpZiBjID09ICJUS19OSUwiIHRoZW4KCQkJCXNlbGY6aW5pdF9leHAodiwgIlZOSUwiLCAwKQoJCQllbHNlaWYgYyA9PSAiVEtfVFJVRSIgdGhlbgoJCQkJc2VsZjppbml0X2V4cCh2LCAiVlRSVUUiLCAwKQoJCQllbHNlaWYgYyA9PSAiVEtfRkFMU0UiIHRoZW4KCQkJCXNlbGY6aW5pdF9leHAodiwgIlZGQUxTRSIsIDApCgkJCWVsc2VpZiBjID09ICJUS19ET1RTIiB0aGVuICAtLSB2YXJhcmcKCQkJCWxvY2FsIGZzID0gbHMuZnMKCQkJCXNlbGY6Y2hlY2tfY29uZGl0aW9uKGxzLCBmcy5mLmlzX3ZhcmFyZyB+PSAwLAoJCQkJCSJjYW5ub3QgdXNlICIuLnNlbGY6TFVBX1FMKCIuLi4iKS4uIiBvdXRzaWRlIGEgdmFyYXJnIGZ1bmN0aW9uIik7CgkJCQktLSBOT1RFOiB0aGUgZm9sbG93aW5nIHN1YnN0aXR1dGVzIGZvciBhIGJpdG9wLCBidXQgaXMgdmFsdWUtc3BlY2lmaWMKCQkJCWxvY2FsIGlzX3ZhcmFyZyA9IGZzLmYuaXNfdmFyYXJnCgkJCQlpZiBpc192YXJhcmcgPj0gc2VsZi5WQVJBUkdfTkVFRFNBUkcgdGhlbgoJCQkJCWZzLmYuaXNfdmFyYXJnID0gaXNfdmFyYXJnIC0gc2VsZi5WQVJBUkdfTkVFRFNBUkcgIC0tIGRvbid0IG5lZWQgJ2FyZycKCQkJCWVuZAoJCQkJc2VsZjppbml0X2V4cCh2LCAiVlZBUkFSRyIsIGx1YUs6Y29kZUFCQyhmcywgIk9QX1ZBUkFSRyIsIDAsIDEsIDApKQoJCQllbHNlaWYgYyA9PSAieyIgdGhlbiAgLS0gY29uc3RydWN0b3IKCQkJCXNlbGY6Y29uc3RydWN0b3IobHMsIHYpCgkJCQlyZXR1cm4KCQkJZWxzZWlmIGMgPT0gIlRLX0ZVTkNUSU9OIiB0aGVuCgkJCQlsdWFYOm5leHQobHMpCgkJCQlzZWxmOmJvZHkobHMsIHYsIGZhbHNlLCBscy5saW5lbnVtYmVyKQoJCQkJcmV0dXJuCgkJCWVsc2UKCQkJCXNlbGY6cHJpbWFyeWV4cChscywgdikKCQkJCXJldHVybgoJCQllbmQtLWlmIGMKCQkJbHVhWDpuZXh0KGxzKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBUcmFuc2xhdGVzIHVuYXJ5IG9wZXJhdG9ycyB0b2tlbnMgaWYgZm91bmQsIG90aGVyd2lzZSByZXR1cm5zCgkJLS0gT1BSX05PVU5PUFIuIGdldHVub3ByKCkgYW5kIGdldGJpbm9wcigpIGFyZSB1c2VkIGluIHN1YmV4cHIoKS4KCQktLSAqIHVzZWQgaW4gc3ViZXhwcigpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpnZXR1bm9wcihvcCkKCQkJaWYgb3AgPT0gIlRLX05PVCIgdGhlbgoJCQkJcmV0dXJuICJPUFJfTk9UIgoJCQllbHNlaWYgb3AgPT0gIi0iIHRoZW4KCQkJCXJldHVybiAiT1BSX01JTlVTIgoJCQllbHNlaWYgb3AgPT0gIiMiIHRoZW4KCQkJCXJldHVybiAiT1BSX0xFTiIKCQkJZWxzZQoJCQkJcmV0dXJuICJPUFJfTk9VTk9QUiIKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIFRyYW5zbGF0ZXMgYmluYXJ5IG9wZXJhdG9yIHRva2VucyBpZiBmb3VuZCwgb3RoZXJ3aXNlIHJldHVybnMKCQktLSBPUFJfTk9CSU5PUFIuIENvZGUgZ2VuZXJhdGlvbiB1c2VzIE9QUl8qIHN0eWxlIHRva2Vucy4KCQktLSAqIHVzZWQgaW4gc3ViZXhwcigpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJbHVhWS5nZXRiaW5vcHJfdGFibGUgPSB7CgkJCVsiKyJdID0gIk9QUl9BREQiLAoJCQlbIi0iXSA9ICJPUFJfU1VCIiwKCQkJWyIqIl0gPSAiT1BSX01VTCIsCgkJCVsiLyJdID0gIk9QUl9ESVYiLAoJCQlbIiUiXSA9ICJPUFJfTU9EIiwKCQkJWyJeIl0gPSAiT1BSX1BPVyIsCgkJCVsiVEtfQ09OQ0FUIl0gPSAiT1BSX0NPTkNBVCIsCgkJCVsiVEtfTkUiXSA9ICJPUFJfTkUiLAoJCQlbIlRLX0VRIl0gPSAiT1BSX0VRIiwKCQkJWyI8Il0gPSAiT1BSX0xUIiwKCQkJWyJUS19MRSJdID0gIk9QUl9MRSIsCgkJCVsiPiJdID0gIk9QUl9HVCIsCgkJCVsiVEtfR0UiXSA9ICJPUFJfR0UiLAoJCQlbIlRLX0FORCJdID0gIk9QUl9BTkQiLAoJCQlbIlRLX09SIl0gPSAiT1BSX09SIiwKCQl9CgkJZnVuY3Rpb24gbHVhWTpnZXRiaW5vcHIob3ApCgkJCWxvY2FsIG9wciA9IHNlbGYuZ2V0Ymlub3ByX3RhYmxlW29wXQoJCQlpZiBvcHIgdGhlbiByZXR1cm4gb3ByIGVsc2UgcmV0dXJuICJPUFJfTk9CSU5PUFIiIGVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSB0aGUgZm9sbG93aW5nIHByaW9yaXR5IHRhYmxlIGNvbnNpc3RzIG9mIHBhaXJzIG9mIGxlZnQvcmlnaHQgdmFsdWVzCgkJLS0gZm9yIGJpbmFyeSBvcGVyYXRvcnMgKHdhcyBhIHN0YXRpYyBjb25zdCBzdHJ1Y3QpOyBncmVwIGZvciBPUkRFUiBPUFIKCQktLSAqIHRoZSBmb2xsb3dpbmcgc3RydWN0IGlzIHJlcGxhY2VkOgoJCS0tICAgc3RhdGljIGNvbnN0IHN0cnVjdCB7CgkJLS0gICAgIGx1X2J5dGUgbGVmdDsgIC8qIGxlZnQgcHJpb3JpdHkgZm9yIGVhY2ggYmluYXJ5IG9wZXJhdG9yICovCgkJLS0gICAgIGx1X2J5dGUgcmlnaHQ7IC8qIHJpZ2h0IHByaW9yaXR5ICovCgkJLS0gICB9IHByaW9yaXR5W10gPSB7ICAvKiBPUkRFUiBPUFIgKi8KCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlsdWFZLnByaW9yaXR5ID0gewoJCQl7NiwgNn0sIHs2LCA2fSwgezcsIDd9LCB7NywgN30sIHs3LCA3fSwgLS0gYCsnIGAtJyBgLycgYCUnCgkJCXsxMCwgOX0sIHs1LCA0fSwgICAgICAgICAgICAgICAgIC0tIHBvd2VyIGFuZCBjb25jYXQgKHJpZ2h0IGFzc29jaWF0aXZlKQoJCQl7MywgM30sIHszLCAzfSwgICAgICAgICAgICAgICAgICAtLSBlcXVhbGl0eQoJCQl7MywgM30sIHszLCAzfSwgezMsIDN9LCB7MywgM30sICAtLSBvcmRlcgoJCQl7MiwgMn0sIHsxLCAxfSAgICAgICAgICAgICAgICAgICAtLSBsb2dpY2FsIChhbmQvb3IpCgkJfQoKCQlsdWFZLlVOQVJZX1BSSU9SSVRZID0gOCAgLS0gcHJpb3JpdHkgZm9yIHVuYXJ5IG9wZXJhdG9ycwoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBQYXJzZSBzdWJleHByZXNzaW9ucy4gSW5jbHVkZXMgaGFuZGxpbmcgb2YgdW5hcnkgb3BlcmF0b3JzIGFuZCBiaW5hcnkKCQktLSBvcGVyYXRvcnMuIEEgc3ViZXhwciBpcyBnaXZlbiB0aGUgcmhzIHByaW9yaXR5IGxldmVsIG9mIHRoZSBvcGVyYXRvcgoJCS0tIGltbWVkaWF0ZWx5IGxlZnQgb2YgaXQsIGlmIGFueSAobGltaXQgaXMgLTEgaWYgbm9uZSwpIGFuZCBpZiBhIGJpbm9wCgkJLS0gaXMgZm91bmQsIGxpbWl0IGlzIGNvbXBhcmVkIHdpdGggdGhlIGxocyBwcmlvcml0eSBsZXZlbCBvZiB0aGUgYmlub3AKCQktLSBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hpY2ggZXhlY3V0ZXMgZmlyc3QuCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHN1YmV4cHIgLT4gKHNpbXBsZWV4cCB8IHVub3Agc3ViZXhwcikgeyBiaW5vcCBzdWJleHByIH0KCQktLSB3aGVyZSAnYmlub3AnIGlzIGFueSBiaW5hcnkgb3BlcmF0b3Igd2l0aCBhIHByaW9yaXR5IGhpZ2hlciB0aGFuICdsaW1pdCcKCQktLSAqIGZvciBwcmlvcml0eSBsb29rdXBzIHdpdGggc2VsZi5wcmlvcml0eVtdLCAxPWxlZnQgYW5kIDI9cmlnaHQKCQktLSAqIHJlY3Vyc2l2ZWx5IGNhbGxlZAoJCS0tICogdXNlZCBpbiBleHByKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOnN1YmV4cHIobHMsIHYsIGxpbWl0KQoJCQlzZWxmOmVudGVybGV2ZWwobHMpCgkJCWxvY2FsIHVvcCA9IHNlbGY6Z2V0dW5vcHIobHMudC50b2tlbikKCQkJaWYgdW9wIH49ICJPUFJfTk9VTk9QUiIgdGhlbgoJCQkJbHVhWDpuZXh0KGxzKQoJCQkJc2VsZjpzdWJleHByKGxzLCB2LCBzZWxmLlVOQVJZX1BSSU9SSVRZKQoJCQkJbHVhSzpwcmVmaXgobHMuZnMsIHVvcCwgdikKCQkJZWxzZQoJCQkJc2VsZjpzaW1wbGVleHAobHMsIHYpCgkJCWVuZAoJCQktLSBleHBhbmQgd2hpbGUgb3BlcmF0b3JzIGhhdmUgcHJpb3JpdGllcyBoaWdoZXIgdGhhbiAnbGltaXQnCgkJCWxvY2FsIG9wID0gc2VsZjpnZXRiaW5vcHIobHMudC50b2tlbikKCQkJd2hpbGUgb3Agfj0gIk9QUl9OT0JJTk9QUiIgYW5kIHNlbGYucHJpb3JpdHlbbHVhSy5CaW5PcHJbb3BdICsgMV1bMV0gPiBsaW1pdCBkbwoJCQkJbG9jYWwgdjIgPSB7fSAgLS0gZXhwZGVzYwoJCQkJbHVhWDpuZXh0KGxzKQoJCQkJbHVhSzppbmZpeChscy5mcywgb3AsIHYpCgkJCQktLSByZWFkIHN1Yi1leHByZXNzaW9uIHdpdGggaGlnaGVyIHByaW9yaXR5CgkJCQlsb2NhbCBuZXh0b3AgPSBzZWxmOnN1YmV4cHIobHMsIHYyLCBzZWxmLnByaW9yaXR5W2x1YUsuQmluT3ByW29wXSArIDFdWzJdKQoJCQkJbHVhSzpwb3NmaXgobHMuZnMsIG9wLCB2LCB2MikKCQkJCW9wID0gbmV4dG9wCgkJCWVuZAoJCQlzZWxmOmxlYXZlbGV2ZWwobHMpCgkJCXJldHVybiBvcCAgLS0gcmV0dXJuIGZpcnN0IHVudHJlYXRlZCBvcGVyYXRvcgoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBFeHByZXNzaW9uIHBhcnNpbmcgc3RhcnRzIGhlcmUuIEZ1bmN0aW9uIHN1YmV4cHIgaXMgZW50ZXJlZCB3aXRoIHRoZQoJCS0tIGxlZnQgb3BlcmF0b3IgKHdoaWNoIGlzIG5vbi1leGlzdGVudCkgcHJpb3JpdHkgb2YgLTEsIHdoaWNoIGlzIGxvd2VyCgkJLS0gdGhhbiBhbGwgYWN0dWFsIG9wZXJhdG9ycy4gRXhwciBpbmZvcm1hdGlvbiBpcyByZXR1cm5lZCBpbiBwYXJtIHYuCgkJLS0gKiB1c2VkIGluIG11bHRpcGxlIGxvY2F0aW9ucwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6ZXhwcihscywgdikKCQkJc2VsZjpzdWJleHByKGxzLCB2LCAwKQoJCWVuZAoKCQktLSB9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCi0tW1stLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSBSdWxlcyBmb3IgU3RhdGVtZW50cwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXV0KCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gY2hlY2tzIG5leHQgdG9rZW4sIHVzZWQgYXMgYSBsb29rLWFoZWFkCgkJLS0gKiByZXR1cm5zIGJvb2xlYW4gaW5zdGVhZCBvZiAwfDEKCQktLSAqIHVzZWQgaW4gcmV0c3RhdCgpLCBjaHVuaygpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpibG9ja19mb2xsb3codG9rZW4pCgkJCWlmIHRva2VuID09ICJUS19FTFNFIiBvciB0b2tlbiA9PSAiVEtfRUxTRUlGIiBvciB0b2tlbiA9PSAiVEtfRU5EIgoJCQkJb3IgdG9rZW4gPT0gIlRLX1VOVElMIiBvciB0b2tlbiA9PSAiVEtfRU9TIiB0aGVuCgkJCQlyZXR1cm4gdHJ1ZQoJCQllbHNlCgkJCQlyZXR1cm4gZmFsc2UKCQkJZW5kCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgY29kZSBibG9jayBvciB1bml0CgkJLS0gKiB1c2VkIGluIG11bHRpcGxlIGZ1bmN0aW9ucwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6YmxvY2sobHMpCgkJCS0tIGJsb2NrIC0+IGNodW5rCgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJbG9jYWwgYmwgPSB7fSAgLS0gQmxvY2tDbnQKCQkJc2VsZjplbnRlcmJsb2NrKGZzLCBibCwgZmFsc2UpCgkJCXNlbGY6Y2h1bmsobHMpCgkJCWx1YV9hc3NlcnQoYmwuYnJlYWtsaXN0ID09IGx1YUsuTk9fSlVNUCkKCQkJc2VsZjpsZWF2ZWJsb2NrKGZzKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBzdHJ1Y3R1cmUgdG8gY2hhaW4gYWxsIHZhcmlhYmxlcyBpbiB0aGUgbGVmdC1oYW5kIHNpZGUgb2YgYW4KCQktLSBhc3NpZ25tZW50CgkJLS0gc3RydWN0IExIU19hc3NpZ246CgkJLS0gICBwcmV2ICAtLSAodGFibGU6IHN0cnVjdCBMSFNfYXNzaWduKQoJCS0tICAgdiAgLS0gdmFyaWFibGUgKGdsb2JhbCwgbG9jYWwsIHVwdmFsdWUsIG9yIGluZGV4ZWQpICh0YWJsZTogZXhwZGVzYykKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gY2hlY2sgd2hldGhlciwgaW4gYW4gYXNzaWdubWVudCB0byBhIGxvY2FsIHZhcmlhYmxlLCB0aGUgbG9jYWwgdmFyaWFibGUKCQktLSBpcyBuZWVkZWQgaW4gYSBwcmV2aW91cyBhc3NpZ25tZW50ICh0byBhIHRhYmxlKS4gSWYgc28sIHNhdmUgb3JpZ2luYWwKCQktLSBsb2NhbCB2YWx1ZSBpbiBhIHNhZmUgcGxhY2UgYW5kIHVzZSB0aGlzIHNhZmUgY29weSBpbiB0aGUgcHJldmlvdXMKCQktLSBhc3NpZ25tZW50LgoJCS0tICogdXNlZCBpbiBhc3NpZ25tZW50KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmNoZWNrX2NvbmZsaWN0KGxzLCBsaCwgdikKCQkJbG9jYWwgZnMgPSBscy5mcwoJCQlsb2NhbCBleHRyYSA9IGZzLmZyZWVyZWcgIC0tIGV2ZW50dWFsIHBvc2l0aW9uIHRvIHNhdmUgbG9jYWwgdmFyaWFibGUKCQkJbG9jYWwgY29uZmxpY3QgPSBmYWxzZQoJCQl3aGlsZSBsaCBkbwoJCQkJaWYgbGgudi5rID09ICJWSU5ERVhFRCIgdGhlbgoJCQkJCWlmIGxoLnYuaW5mbyA9PSB2LmluZm8gdGhlbiAgLS0gY29uZmxpY3Q/CgkJCQkJCWNvbmZsaWN0ID0gdHJ1ZQoJCQkJCQlsaC52LmluZm8gPSBleHRyYSAgLS0gcHJldmlvdXMgYXNzaWdubWVudCB3aWxsIHVzZSBzYWZlIGNvcHkKCQkJCQllbmQKCQkJCQlpZiBsaC52LmF1eCA9PSB2LmluZm8gdGhlbiAgLS0gY29uZmxpY3Q/CgkJCQkJCWNvbmZsaWN0ID0gdHJ1ZQoJCQkJCQlsaC52LmF1eCA9IGV4dHJhICAtLSBwcmV2aW91cyBhc3NpZ25tZW50IHdpbGwgdXNlIHNhZmUgY29weQoJCQkJCWVuZAoJCQkJZW5kCgkJCQlsaCA9IGxoLnByZXYKCQkJZW5kCgkJCWlmIGNvbmZsaWN0IHRoZW4KCQkJCWx1YUs6Y29kZUFCQyhmcywgIk9QX01PVkUiLCBmcy5mcmVlcmVnLCB2LmluZm8sIDApICAtLSBtYWtlIGNvcHkKCQkJCWx1YUs6cmVzZXJ2ZXJlZ3MoZnMsIDEpCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhIHZhcmlhYmxlIGFzc2lnbm1lbnQgc2VxdWVuY2UKCQktLSAqIHJlY3Vyc2l2ZWx5IGNhbGxlZAoJCS0tICogdXNlZCBpbiBleHByc3RhdCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTphc3NpZ25tZW50KGxzLCBsaCwgbnZhcnMpCgkJCWxvY2FsIGUgPSB7fSAgLS0gZXhwZGVzYwoJCQktLSB0ZXN0IHdhczogVkxPQ0FMIDw9IGxoLT52LmsgJiYgbGgtPnYuayA8PSBWSU5ERVhFRAoJCQlsb2NhbCBjID0gbGgudi5rCgkJCXNlbGY6Y2hlY2tfY29uZGl0aW9uKGxzLCBjID09ICJWTE9DQUwiIG9yIGMgPT0gIlZVUFZBTCIgb3IgYyA9PSAiVkdMT0JBTCIKCQkJCW9yIGMgPT0gIlZJTkRFWEVEIiwgInN5bnRheCBlcnJvciIpCgkJCWlmIHNlbGY6dGVzdG5leHQobHMsICIsIikgdGhlbiAgLS0gYXNzaWdubWVudCAtPiAnLCcgcHJpbWFyeWV4cCBhc3NpZ25tZW50CgkJCQlsb2NhbCBudiA9IHt9ICAtLSBMSFNfYXNzaWduCgkJCQludi52ID0ge30KCQkJCW52LnByZXYgPSBsaAoJCQkJc2VsZjpwcmltYXJ5ZXhwKGxzLCBudi52KQoJCQkJaWYgbnYudi5rID09ICJWTE9DQUwiIHRoZW4KCQkJCQlzZWxmOmNoZWNrX2NvbmZsaWN0KGxzLCBsaCwgbnYudikKCQkJCWVuZAoJCQkJc2VsZjpjaGVja2xpbWl0KGxzLmZzLCBudmFycywgc2VsZi5MVUFJX01BWENDQUxMUyAtIGxzLkwubkNjYWxscywKCQkJCQkidmFyaWFibGVzIGluIGFzc2lnbm1lbnQiKQoJCQkJc2VsZjphc3NpZ25tZW50KGxzLCBudiwgbnZhcnMgKyAxKQoJCQllbHNlICAtLSBhc3NpZ25tZW50IC0+ICc9JyBleHBsaXN0MQoJCQkJc2VsZjpjaGVja25leHQobHMsICI9IikKCQkJCWxvY2FsIG5leHBzID0gc2VsZjpleHBsaXN0MShscywgZSkKCQkJCWlmIG5leHBzIH49IG52YXJzIHRoZW4KCQkJCQlzZWxmOmFkanVzdF9hc3NpZ24obHMsIG52YXJzLCBuZXhwcywgZSkKCQkJCQlpZiBuZXhwcyA+IG52YXJzIHRoZW4KCQkJCQkJbHMuZnMuZnJlZXJlZyA9IGxzLmZzLmZyZWVyZWcgLSAobmV4cHMgLSBudmFycykgIC0tIHJlbW92ZSBleHRyYSB2YWx1ZXMKCQkJCQllbmQKCQkJCWVsc2UKCQkJCQlsdWFLOnNldG9uZXJldChscy5mcywgZSkgIC0tIGNsb3NlIGxhc3QgZXhwcmVzc2lvbgoJCQkJCWx1YUs6c3RvcmV2YXIobHMuZnMsIGxoLnYsIGUpCgkJCQkJcmV0dXJuICAtLSBhdm9pZCBkZWZhdWx0CgkJCQllbmQKCQkJZW5kCgkJCXNlbGY6aW5pdF9leHAoZSwgIlZOT05SRUxPQyIsIGxzLmZzLmZyZWVyZWcgLSAxKSAgLS0gZGVmYXVsdCBhc3NpZ25tZW50CgkJCWx1YUs6c3RvcmV2YXIobHMuZnMsIGxoLnYsIGUpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGNvbmRpdGlvbiBpbiBhIHJlcGVhdCBzdGF0ZW1lbnQgb3IgYW4gaWYgY29udHJvbCBzdHJ1Y3R1cmUKCQktLSAqIHVzZWQgaW4gcmVwZWF0c3RhdCgpLCB0ZXN0X3RoZW5fYmxvY2soKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Y29uZChscykKCQkJLS0gY29uZCAtPiBleHAKCQkJbG9jYWwgdiA9IHt9ICAtLSBleHBkZXNjCgkJCXNlbGY6ZXhwcihscywgdikgIC0tIHJlYWQgY29uZGl0aW9uCgkJCWlmIHYuayA9PSAiVk5JTCIgdGhlbiB2LmsgPSAiVkZBTFNFIiBlbmQgIC0tICdmYWxzZXMnIGFyZSBhbGwgZXF1YWwgaGVyZQoJCQlsdWFLOmdvaWZ0cnVlKGxzLmZzLCB2KQoJCQlyZXR1cm4gdi5mCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgYnJlYWsgc3RhdGVtZW50CgkJLS0gKiB1c2VkIGluIHN0YXRlbWVudHMoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6YnJlYWtzdGF0KGxzKQoJCQktLSBzdGF0IC0+IEJSRUFLCgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJbG9jYWwgYmwgPSBmcy5ibAoJCQlsb2NhbCB1cHZhbCA9IGZhbHNlCgkJCXdoaWxlIGJsIGFuZCBub3QgYmwuaXNicmVha2FibGUgZG8KCQkJCWlmIGJsLnVwdmFsIHRoZW4gdXB2YWwgPSB0cnVlIGVuZAoJCQkJYmwgPSBibC5wcmV2aW91cwoJCQllbmQKCQkJaWYgbm90IGJsIHRoZW4KCQkJCWx1YVg6c3ludGF4ZXJyb3IobHMsICJubyBsb29wIHRvIGJyZWFrIikKCQkJZW5kCgkJCWlmIHVwdmFsIHRoZW4KCQkJCWx1YUs6Y29kZUFCQyhmcywgIk9QX0NMT1NFIiwgYmwubmFjdHZhciwgMCwgMCkKCQkJZW5kCgkJCWJsLmJyZWFrbGlzdCA9IGx1YUs6Y29uY2F0KGZzLCBibC5icmVha2xpc3QsIGx1YUs6anVtcChmcykpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgd2hpbGUtZG8gY29udHJvbCBzdHJ1Y3R1cmUsIGJvZHkgcHJvY2Vzc2VkIGJ5IGJsb2NrKCkKCQktLSAqIHdpdGggZHluYW1pYyBhcnJheSBzaXplcywgTUFYRVhQV0hJTEUgKyBFWFRSQUVYUCBsaW1pdHMgaW1wb3NlZCBieQoJCS0tICAgdGhlIGZ1bmN0aW9uJ3MgaW1wbGVtZW50YXRpb24gY2FuIGJlIHJlbW92ZWQKCQktLSAqIHVzZWQgaW4gc3RhdGVtZW50cygpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTp3aGlsZXN0YXQobHMsIGxpbmUpCgkJCS0tIHdoaWxlc3RhdCAtPiBXSElMRSBjb25kIERPIGJsb2NrIEVORAoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWxvY2FsIGJsID0ge30gIC0tIEJsb2NrQ250CgkJCWx1YVg6bmV4dChscykgIC0tIHNraXAgV0hJTEUKCQkJbG9jYWwgd2hpbGVpbml0ID0gbHVhSzpnZXRsYWJlbChmcykKCQkJbG9jYWwgY29uZGV4aXQgPSBzZWxmOmNvbmQobHMpCgkJCXNlbGY6ZW50ZXJibG9jayhmcywgYmwsIHRydWUpCgkJCXNlbGY6Y2hlY2tuZXh0KGxzLCAiVEtfRE8iKQoJCQlzZWxmOmJsb2NrKGxzKQoJCQlsdWFLOnBhdGNobGlzdChmcywgbHVhSzpqdW1wKGZzKSwgd2hpbGVpbml0KQoJCQlzZWxmOmNoZWNrX21hdGNoKGxzLCAiVEtfRU5EIiwgIlRLX1dISUxFIiwgbGluZSkKCQkJc2VsZjpsZWF2ZWJsb2NrKGZzKQoJCQlsdWFLOnBhdGNodG9oZXJlKGZzLCBjb25kZXhpdCkgIC0tIGZhbHNlIGNvbmRpdGlvbnMgZmluaXNoIHRoZSBsb29wCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgcmVwZWF0LXVudGlsIGNvbnRyb2wgc3RydWN0dXJlLCBib2R5IHBhcnNlZCBieSBjaHVuaygpCgkJLS0gKiB1c2VkIGluIHN0YXRlbWVudHMoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6cmVwZWF0c3RhdChscywgbGluZSkKCQkJLS0gcmVwZWF0c3RhdCAtPiBSRVBFQVQgYmxvY2sgVU5USUwgY29uZAoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWxvY2FsIHJlcGVhdF9pbml0ID0gbHVhSzpnZXRsYWJlbChmcykKCQkJbG9jYWwgYmwxLCBibDIgPSB7fSwge30gIC0tIEJsb2NrQ250CgkJCXNlbGY6ZW50ZXJibG9jayhmcywgYmwxLCB0cnVlKSAgLS0gbG9vcCBibG9jawoJCQlzZWxmOmVudGVyYmxvY2soZnMsIGJsMiwgZmFsc2UpICAtLSBzY29wZSBibG9jawoJCQlsdWFYOm5leHQobHMpICAtLSBza2lwIFJFUEVBVAoJCQlzZWxmOmNodW5rKGxzKQoJCQlzZWxmOmNoZWNrX21hdGNoKGxzLCAiVEtfVU5USUwiLCAiVEtfUkVQRUFUIiwgbGluZSkKCQkJbG9jYWwgY29uZGV4aXQgPSBzZWxmOmNvbmQobHMpICAtLSByZWFkIGNvbmRpdGlvbiAoaW5zaWRlIHNjb3BlIGJsb2NrKQoJCQlpZiBub3QgYmwyLnVwdmFsIHRoZW4gIC0tIG5vIHVwdmFsdWVzPwoJCQkJc2VsZjpsZWF2ZWJsb2NrKGZzKSAgLS0gZmluaXNoIHNjb3BlCgkJCQlsdWFLOnBhdGNobGlzdChscy5mcywgY29uZGV4aXQsIHJlcGVhdF9pbml0KSAgLS0gY2xvc2UgdGhlIGxvb3AKCQkJZWxzZSAgLS0gY29tcGxldGUgc2VtYW50aWNzIHdoZW4gdGhlcmUgYXJlIHVwdmFsdWVzCgkJCQlzZWxmOmJyZWFrc3RhdChscykgIC0tIGlmIGNvbmRpdGlvbiB0aGVuIGJyZWFrCgkJCQlsdWFLOnBhdGNodG9oZXJlKGxzLmZzLCBjb25kZXhpdCkgIC0tIGVsc2UuLi4KCQkJCXNlbGY6bGVhdmVibG9jayhmcykgIC0tIGZpbmlzaCBzY29wZS4uLgoJCQkJbHVhSzpwYXRjaGxpc3QobHMuZnMsIGx1YUs6anVtcChmcyksIHJlcGVhdF9pbml0KSAgLS0gYW5kIHJlcGVhdAoJCQllbmQKCQkJc2VsZjpsZWF2ZWJsb2NrKGZzKSAgLS0gZmluaXNoIGxvb3AKCQllbmQKCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJLS0gcGFyc2UgdGhlIHNpbmdsZSBleHByZXNzaW9ucyBuZWVkZWQgaW4gbnVtZXJpY2FsIGZvciBsb29wcwoJCS0tICogdXNlZCBpbiBmb3JudW0oKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6ZXhwMShscykKCQkJbG9jYWwgZSA9IHt9ICAtLSBleHBkZXNjCgkJCXNlbGY6ZXhwcihscywgZSkKCQkJbG9jYWwgayA9IGUuawoJCQlsdWFLOmV4cDJuZXh0cmVnKGxzLmZzLCBlKQoJCQlyZXR1cm4gawoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhIGZvciBsb29wIGJvZHkgZm9yIGJvdGggdmVyc2lvbnMgb2YgdGhlIGZvciBsb29wCgkJLS0gKiB1c2VkIGluIGZvcm51bSgpLCBmb3JsaXN0KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmZvcmJvZHkobHMsIGJhc2UsIGxpbmUsIG52YXJzLCBpc251bSkKCQkJLS0gZm9yYm9keSAtPiBETyBibG9jawoJCQlsb2NhbCBibCA9IHt9ICAtLSBCbG9ja0NudAoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCXNlbGY6YWRqdXN0bG9jYWx2YXJzKGxzLCAzKSAgLS0gY29udHJvbCB2YXJpYWJsZXMKCQkJc2VsZjpjaGVja25leHQobHMsICJUS19ETyIpCgkJCWxvY2FsIHByZXAgPSBpc251bSBhbmQgbHVhSzpjb2RlQXNCeChmcywgIk9QX0ZPUlBSRVAiLCBiYXNlLCBsdWFLLk5PX0pVTVApCgkJCQlvciBsdWFLOmp1bXAoZnMpCgkJCXNlbGY6ZW50ZXJibG9jayhmcywgYmwsIGZhbHNlKSAgLS0gc2NvcGUgZm9yIGRlY2xhcmVkIHZhcmlhYmxlcwoJCQlzZWxmOmFkanVzdGxvY2FsdmFycyhscywgbnZhcnMpCgkJCWx1YUs6cmVzZXJ2ZXJlZ3MoZnMsIG52YXJzKQoJCQlzZWxmOmJsb2NrKGxzKQoJCQlzZWxmOmxlYXZlYmxvY2soZnMpICAtLSBlbmQgb2Ygc2NvcGUgZm9yIGRlY2xhcmVkIHZhcmlhYmxlcwoJCQlsdWFLOnBhdGNodG9oZXJlKGZzLCBwcmVwKQoJCQlsb2NhbCBlbmRmb3IgPSBpc251bSBhbmQgbHVhSzpjb2RlQXNCeChmcywgIk9QX0ZPUkxPT1AiLCBiYXNlLCBsdWFLLk5PX0pVTVApCgkJCQlvciBsdWFLOmNvZGVBQkMoZnMsICJPUF9URk9STE9PUCIsIGJhc2UsIDAsIG52YXJzKQoJCQlsdWFLOmZpeGxpbmUoZnMsIGxpbmUpICAtLSBwcmV0ZW5kIHRoYXQgYE9QX0ZPUicgc3RhcnRzIHRoZSBsb29wCgkJCWx1YUs6cGF0Y2hsaXN0KGZzLCBpc251bSBhbmQgZW5kZm9yIG9yIGx1YUs6anVtcChmcyksIHByZXAgKyAxKQoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhIG51bWVyaWNhbCBmb3IgbG9vcCwgY2FsbHMgZm9yYm9keSgpCgkJLS0gKiB1c2VkIGluIGZvcnN0YXQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Zm9ybnVtKGxzLCB2YXJuYW1lLCBsaW5lKQoJCQktLSBmb3JudW0gLT4gTkFNRSA9IGV4cDEsZXhwMVssZXhwMV0gZm9yYm9keQoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWxvY2FsIGJhc2UgPSBmcy5mcmVlcmVnCgkJCXNlbGY6bmV3X2xvY2FsdmFybGl0ZXJhbChscywgIihmb3IgaW5kZXgpIiwgMCkKCQkJc2VsZjpuZXdfbG9jYWx2YXJsaXRlcmFsKGxzLCAiKGZvciBsaW1pdCkiLCAxKQoJCQlzZWxmOm5ld19sb2NhbHZhcmxpdGVyYWwobHMsICIoZm9yIHN0ZXApIiwgMikKCQkJc2VsZjpuZXdfbG9jYWx2YXIobHMsIHZhcm5hbWUsIDMpCgkJCXNlbGY6Y2hlY2tuZXh0KGxzLCAnPScpCgkJCXNlbGY6ZXhwMShscykgIC0tIGluaXRpYWwgdmFsdWUKCQkJc2VsZjpjaGVja25leHQobHMsICIsIikKCQkJc2VsZjpleHAxKGxzKSAgLS0gbGltaXQKCQkJaWYgc2VsZjp0ZXN0bmV4dChscywgIiwiKSB0aGVuCgkJCQlzZWxmOmV4cDEobHMpICAtLSBvcHRpb25hbCBzdGVwCgkJCWVsc2UgIC0tIGRlZmF1bHQgc3RlcCA9IDEKCQkJCWx1YUs6Y29kZUFCeChmcywgIk9QX0xPQURLIiwgZnMuZnJlZXJlZywgbHVhSzpudW1iZXJLKGZzLCAxKSkKCQkJCWx1YUs6cmVzZXJ2ZXJlZ3MoZnMsIDEpCgkJCWVuZAoJCQlzZWxmOmZvcmJvZHkobHMsIGJhc2UsIGxpbmUsIDEsIHRydWUpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgZ2VuZXJpYyBmb3IgbG9vcCwgY2FsbHMgZm9yYm9keSgpCgkJLS0gKiB1c2VkIGluIGZvcnN0YXQoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Zm9ybGlzdChscywgaW5kZXhuYW1lKQoJCQktLSBmb3JsaXN0IC0+IE5BTUUgeyxOQU1FfSBJTiBleHBsaXN0MSBmb3Jib2R5CgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJbG9jYWwgZSA9IHt9ICAtLSBleHBkZXNjCgkJCWxvY2FsIG52YXJzID0gMAoJCQlsb2NhbCBiYXNlID0gZnMuZnJlZXJlZwoJCQktLSBjcmVhdGUgY29udHJvbCB2YXJpYWJsZXMKCQkJc2VsZjpuZXdfbG9jYWx2YXJsaXRlcmFsKGxzLCAiKGZvciBnZW5lcmF0b3IpIiwgbnZhcnMpCgkJCW52YXJzID0gbnZhcnMgKyAxCgkJCXNlbGY6bmV3X2xvY2FsdmFybGl0ZXJhbChscywgIihmb3Igc3RhdGUpIiwgbnZhcnMpCgkJCW52YXJzID0gbnZhcnMgKyAxCgkJCXNlbGY6bmV3X2xvY2FsdmFybGl0ZXJhbChscywgIihmb3IgY29udHJvbCkiLCBudmFycykKCQkJbnZhcnMgPSBudmFycyArIDEKCQkJLS0gY3JlYXRlIGRlY2xhcmVkIHZhcmlhYmxlcwoJCQlzZWxmOm5ld19sb2NhbHZhcihscywgaW5kZXhuYW1lLCBudmFycykKCQkJbnZhcnMgPSBudmFycyArIDEKCQkJd2hpbGUgc2VsZjp0ZXN0bmV4dChscywgIiwiKSBkbwoJCQkJc2VsZjpuZXdfbG9jYWx2YXIobHMsIHNlbGY6c3RyX2NoZWNrbmFtZShscyksIG52YXJzKQoJCQkJbnZhcnMgPSBudmFycyArIDEKCQkJZW5kCgkJCXNlbGY6Y2hlY2tuZXh0KGxzLCAiVEtfSU4iKQoJCQlsb2NhbCBsaW5lID0gbHMubGluZW51bWJlcgoJCQlzZWxmOmFkanVzdF9hc3NpZ24obHMsIDMsIHNlbGY6ZXhwbGlzdDEobHMsIGUpLCBlKQoJCQlsdWFLOmNoZWNrc3RhY2soZnMsIDMpICAtLSBleHRyYSBzcGFjZSB0byBjYWxsIGdlbmVyYXRvcgoJCQlzZWxmOmZvcmJvZHkobHMsIGJhc2UsIGxpbmUsIG52YXJzIC0gMywgZmFsc2UpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGluaXRpYWwgcGFyc2luZyBmb3IgYSBmb3IgbG9vcCwgY2FsbHMgZm9ybnVtKCkgb3IgZm9ybGlzdCgpCgkJLS0gKiB1c2VkIGluIHN0YXRlbWVudHMoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6Zm9yc3RhdChscywgbGluZSkKCQkJLS0gZm9yc3RhdCAtPiBGT1IgKGZvcm51bSB8IGZvcmxpc3QpIEVORAoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWxvY2FsIGJsID0ge30gIC0tIEJsb2NrQ250CgkJCXNlbGY6ZW50ZXJibG9jayhmcywgYmwsIHRydWUpICAtLSBzY29wZSBmb3IgbG9vcCBhbmQgY29udHJvbCB2YXJpYWJsZXMKCQkJbHVhWDpuZXh0KGxzKSAgLS0gc2tpcCBgZm9yJwoJCQlsb2NhbCB2YXJuYW1lID0gc2VsZjpzdHJfY2hlY2tuYW1lKGxzKSAgLS0gZmlyc3QgdmFyaWFibGUgbmFtZQoJCQlsb2NhbCBjID0gbHMudC50b2tlbgoJCQlpZiBjID09ICI9IiB0aGVuCgkJCQlzZWxmOmZvcm51bShscywgdmFybmFtZSwgbGluZSkKCQkJZWxzZWlmIGMgPT0gIiwiIG9yIGMgPT0gIlRLX0lOIiB0aGVuCgkJCQlzZWxmOmZvcmxpc3QobHMsIHZhcm5hbWUpCgkJCWVsc2UKCQkJCWx1YVg6c3ludGF4ZXJyb3IobHMsIHNlbGY6TFVBX1FMKCI9IikuLiIgb3IgIi4uc2VsZjpMVUFfUUwoImluIikuLiIgZXhwZWN0ZWQiKQoJCQllbmQKCQkJc2VsZjpjaGVja19tYXRjaChscywgIlRLX0VORCIsICJUS19GT1IiLCBsaW5lKQoJCQlzZWxmOmxlYXZlYmxvY2soZnMpICAtLSBsb29wIHNjb3BlIChgYnJlYWsnIGp1bXBzIHRvIHRoaXMgcG9pbnQpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIHBhcnQgb2YgYW4gaWYgY29udHJvbCBzdHJ1Y3R1cmUsIGluY2x1ZGluZyB0aGUgY29uZGl0aW9uCgkJLS0gKiB1c2VkIGluIGlmc3RhdCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTp0ZXN0X3RoZW5fYmxvY2sobHMpCgkJCS0tIHRlc3RfdGhlbl9ibG9jayAtPiBbSUYgfCBFTFNFSUZdIGNvbmQgVEhFTiBibG9jawoJCQlsdWFYOm5leHQobHMpICAtLSBza2lwIElGIG9yIEVMU0VJRgoJCQlsb2NhbCBjb25kZXhpdCA9IHNlbGY6Y29uZChscykKCQkJc2VsZjpjaGVja25leHQobHMsICJUS19USEVOIikKCQkJc2VsZjpibG9jayhscykgIC0tIGB0aGVuJyBwYXJ0CgkJCXJldHVybiBjb25kZXhpdAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhbiBpZiBjb250cm9sIHN0cnVjdHVyZQoJCS0tICogdXNlZCBpbiBzdGF0ZW1lbnRzKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmlmc3RhdChscywgbGluZSkKCQkJLS0gaWZzdGF0IC0+IElGIGNvbmQgVEhFTiBibG9jayB7RUxTRUlGIGNvbmQgVEhFTiBibG9ja30gW0VMU0UgYmxvY2tdIEVORAoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWxvY2FsIGVzY2FwZWxpc3QgPSBsdWFLLk5PX0pVTVAKCQkJbG9jYWwgZmxpc3QgPSBzZWxmOnRlc3RfdGhlbl9ibG9jayhscykgIC0tIElGIGNvbmQgVEhFTiBibG9jawoJCQl3aGlsZSBscy50LnRva2VuID09ICJUS19FTFNFSUYiIGRvCgkJCQllc2NhcGVsaXN0ID0gbHVhSzpjb25jYXQoZnMsIGVzY2FwZWxpc3QsIGx1YUs6anVtcChmcykpCgkJCQlsdWFLOnBhdGNodG9oZXJlKGZzLCBmbGlzdCkKCQkJCWZsaXN0ID0gc2VsZjp0ZXN0X3RoZW5fYmxvY2sobHMpICAtLSBFTFNFSUYgY29uZCBUSEVOIGJsb2NrCgkJCWVuZAoJCQlpZiBscy50LnRva2VuID09ICJUS19FTFNFIiB0aGVuCgkJCQllc2NhcGVsaXN0ID0gbHVhSzpjb25jYXQoZnMsIGVzY2FwZWxpc3QsIGx1YUs6anVtcChmcykpCgkJCQlsdWFLOnBhdGNodG9oZXJlKGZzLCBmbGlzdCkKCQkJCWx1YVg6bmV4dChscykgIC0tIHNraXAgRUxTRSAoYWZ0ZXIgcGF0Y2gsIGZvciBjb3JyZWN0IGxpbmUgaW5mbykKCQkJCXNlbGY6YmxvY2sobHMpICAtLSAnZWxzZScgcGFydAoJCQllbHNlCgkJCQllc2NhcGVsaXN0ID0gbHVhSzpjb25jYXQoZnMsIGVzY2FwZWxpc3QsIGZsaXN0KQoJCQllbmQKCQkJbHVhSzpwYXRjaHRvaGVyZShmcywgZXNjYXBlbGlzdCkKCQkJc2VsZjpjaGVja19tYXRjaChscywgIlRLX0VORCIsICJUS19JRiIsIGxpbmUpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgbG9jYWwgZnVuY3Rpb24gc3RhdGVtZW50CgkJLS0gKiB1c2VkIGluIHN0YXRlbWVudHMoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6bG9jYWxmdW5jKGxzKQoJCQlsb2NhbCB2LCBiID0ge30sIHt9ICAtLSBleHBkZXNjCgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJc2VsZjpuZXdfbG9jYWx2YXIobHMsIHNlbGY6c3RyX2NoZWNrbmFtZShscyksIDApCgkJCXNlbGY6aW5pdF9leHAodiwgIlZMT0NBTCIsIGZzLmZyZWVyZWcpCgkJCWx1YUs6cmVzZXJ2ZXJlZ3MoZnMsIDEpCgkJCXNlbGY6YWRqdXN0bG9jYWx2YXJzKGxzLCAxKQoJCQlzZWxmOmJvZHkobHMsIGIsIGZhbHNlLCBscy5saW5lbnVtYmVyKQoJCQlsdWFLOnN0b3JldmFyKGZzLCB2LCBiKQoJCQktLSBkZWJ1ZyBpbmZvcm1hdGlvbiB3aWxsIG9ubHkgc2VlIHRoZSB2YXJpYWJsZSBhZnRlciB0aGlzIHBvaW50IQoJCQlzZWxmOmdldGxvY3ZhcihmcywgZnMubmFjdHZhciAtIDEpLnN0YXJ0cGMgPSBmcy5wYwoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhIGxvY2FsIHZhcmlhYmxlIGRlY2xhcmF0aW9uIHN0YXRlbWVudAoJCS0tICogdXNlZCBpbiBzdGF0ZW1lbnRzKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmxvY2Fsc3RhdChscykKCQkJLS0gc3RhdCAtPiBMT0NBTCBOQU1FIHsnLCcgTkFNRX0gWyc9JyBleHBsaXN0MV0KCQkJbG9jYWwgbnZhcnMgPSAwCgkJCWxvY2FsIG5leHBzCgkJCWxvY2FsIGUgPSB7fSAgLS0gZXhwZGVzYwoJCQlyZXBlYXQKCQkJCXNlbGY6bmV3X2xvY2FsdmFyKGxzLCBzZWxmOnN0cl9jaGVja25hbWUobHMpLCBudmFycykKCQkJCW52YXJzID0gbnZhcnMgKyAxCgkJCXVudGlsIG5vdCBzZWxmOnRlc3RuZXh0KGxzLCAiLCIpCgkJCWlmIHNlbGY6dGVzdG5leHQobHMsICI9IikgdGhlbgoJCQkJbmV4cHMgPSBzZWxmOmV4cGxpc3QxKGxzLCBlKQoJCQllbHNlCgkJCQllLmsgPSAiVlZPSUQiCgkJCQluZXhwcyA9IDAKCQkJZW5kCgkJCXNlbGY6YWRqdXN0X2Fzc2lnbihscywgbnZhcnMsIG5leHBzLCBlKQoJCQlzZWxmOmFkanVzdGxvY2FsdmFycyhscywgbnZhcnMpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgZnVuY3Rpb24gbmFtZSBzcGVjaWZpY2F0aW9uCgkJLS0gKiB1c2VkIGluIGZ1bmNzdGF0KCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmZ1bmNuYW1lKGxzLCB2KQoJCQktLSBmdW5jbmFtZSAtPiBOQU1FIHtmaWVsZH0gWyc6JyBOQU1FXQoJCQlsb2NhbCBuZWVkc2VsZiA9IGZhbHNlCgkJCXNlbGY6c2luZ2xldmFyKGxzLCB2KQoJCQl3aGlsZSBscy50LnRva2VuID09ICIuIiBkbwoJCQkJc2VsZjpmaWVsZChscywgdikKCQkJZW5kCgkJCWlmIGxzLnQudG9rZW4gPT0gIjoiIHRoZW4KCQkJCW5lZWRzZWxmID0gdHJ1ZQoJCQkJc2VsZjpmaWVsZChscywgdikKCQkJZW5kCgkJCXJldHVybiBuZWVkc2VsZgoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhIGZ1bmN0aW9uIHN0YXRlbWVudAoJCS0tICogdXNlZCBpbiBzdGF0ZW1lbnRzKCkKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQlmdW5jdGlvbiBsdWFZOmZ1bmNzdGF0KGxzLCBsaW5lKQoJCQktLSBmdW5jc3RhdCAtPiBGVU5DVElPTiBmdW5jbmFtZSBib2R5CgkJCWxvY2FsIHYsIGIgPSB7fSwge30gIC0tIGV4cGRlc2MKCQkJbHVhWDpuZXh0KGxzKSAgLS0gc2tpcCBGVU5DVElPTgoJCQlsb2NhbCBuZWVkc2VsZiA9IHNlbGY6ZnVuY25hbWUobHMsIHYpCgkJCXNlbGY6Ym9keShscywgYiwgbmVlZHNlbGYsIGxpbmUpCgkJCWx1YUs6c3RvcmV2YXIobHMuZnMsIHYsIGIpCgkJCWx1YUs6Zml4bGluZShscy5mcywgbGluZSkgIC0tIGRlZmluaXRpb24gJ2hhcHBlbnMnIGluIHRoZSBmaXJzdCBsaW5lCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIHBhcnNlIGEgZnVuY3Rpb24gY2FsbCB3aXRoIG5vIHJldHVybnMgb3IgYW4gYXNzaWdubWVudCBzdGF0ZW1lbnQKCQktLSAqIHVzZWQgaW4gc3RhdGVtZW50cygpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpleHByc3RhdChscykKCQkJLS0gc3RhdCAtPiBmdW5jIHwgYXNzaWdubWVudAoJCQlsb2NhbCBmcyA9IGxzLmZzCgkJCWxvY2FsIHYgPSB7fSAgLS0gTEhTX2Fzc2lnbgoJCQl2LnYgPSB7fQoJCQlzZWxmOnByaW1hcnlleHAobHMsIHYudikKCQkJaWYgdi52LmsgPT0gIlZDQUxMIiB0aGVuICAtLSBzdGF0IC0+IGZ1bmMKCQkJCWx1YVA6U0VUQVJHX0MobHVhSzpnZXRjb2RlKGZzLCB2LnYpLCAxKSAgLS0gY2FsbCBzdGF0ZW1lbnQgdXNlcyBubyByZXN1bHRzCgkJCWVsc2UgIC0tIHN0YXQgLT4gYXNzaWdubWVudAoJCQkJdi5wcmV2ID0gbmlsCgkJCQlzZWxmOmFzc2lnbm1lbnQobHMsIHYsIDEpCgkJCWVuZAoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhIHJldHVybiBzdGF0ZW1lbnQKCQktLSAqIHVzZWQgaW4gc3RhdGVtZW50cygpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpyZXRzdGF0KGxzKQoJCQktLSBzdGF0IC0+IFJFVFVSTiBleHBsaXN0CgkJCWxvY2FsIGZzID0gbHMuZnMKCQkJbG9jYWwgZSA9IHt9ICAtLSBleHBkZXNjCgkJCWxvY2FsIGZpcnN0LCBucmV0ICAtLSByZWdpc3RlcnMgd2l0aCByZXR1cm5lZCB2YWx1ZXMKCQkJbHVhWDpuZXh0KGxzKSAgLS0gc2tpcCBSRVRVUk4KCQkJaWYgc2VsZjpibG9ja19mb2xsb3cobHMudC50b2tlbikgb3IgbHMudC50b2tlbiA9PSAiOyIgdGhlbgoJCQkJZmlyc3QsIG5yZXQgPSAwLCAwICAtLSByZXR1cm4gbm8gdmFsdWVzCgkJCWVsc2UKCQkJCW5yZXQgPSBzZWxmOmV4cGxpc3QxKGxzLCBlKSAgLS0gb3B0aW9uYWwgcmV0dXJuIHZhbHVlcwoJCQkJaWYgc2VsZjpoYXNtdWx0cmV0KGUuaykgdGhlbgoJCQkJCWx1YUs6c2V0bXVsdHJldChmcywgZSkKCQkJCQlpZiBlLmsgPT0gIlZDQUxMIiBhbmQgbnJldCA9PSAxIHRoZW4gIC0tIHRhaWwgY2FsbD8KCQkJCQkJbHVhUDpTRVRfT1BDT0RFKGx1YUs6Z2V0Y29kZShmcywgZSksICJPUF9UQUlMQ0FMTCIpCgkJCQkJCWx1YV9hc3NlcnQobHVhUDpHRVRBUkdfQShsdWFLOmdldGNvZGUoZnMsIGUpKSA9PSBmcy5uYWN0dmFyKQoJCQkJCWVuZAoJCQkJCWZpcnN0ID0gZnMubmFjdHZhcgoJCQkJCW5yZXQgPSBzZWxmLkxVQV9NVUxUUkVUICAtLSByZXR1cm4gYWxsIHZhbHVlcwoJCQkJZWxzZQoJCQkJCWlmIG5yZXQgPT0gMSB0aGVuICAtLSBvbmx5IG9uZSBzaW5nbGUgdmFsdWU/CgkJCQkJCWZpcnN0ID0gbHVhSzpleHAyYW55cmVnKGZzLCBlKQoJCQkJCWVsc2UKCQkJCQkJbHVhSzpleHAybmV4dHJlZyhmcywgZSkgIC0tIHZhbHVlcyBtdXN0IGdvIHRvIHRoZSAnc3RhY2snCgkJCQkJCWZpcnN0ID0gZnMubmFjdHZhciAgLS0gcmV0dXJuIGFsbCAnYWN0aXZlJyB2YWx1ZXMKCQkJCQkJbHVhX2Fzc2VydChucmV0ID09IGZzLmZyZWVyZWcgLSBmaXJzdCkKCQkJCQllbmQKCQkJCWVuZC0taWYKCQkJZW5kLS1pZgoJCQlsdWFLOnJldChmcywgZmlyc3QsIG5yZXQpCgkJZW5kCgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGluaXRpYWwgcGFyc2luZyBmb3Igc3RhdGVtZW50cywgY2FsbHMgYSBsb3Qgb2YgZnVuY3Rpb25zCgkJLS0gKiByZXR1cm5zIGJvb2xlYW4gaW5zdGVhZCBvZiAwfDEKCQktLSAqIHVzZWQgaW4gY2h1bmsoKQoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCWZ1bmN0aW9uIGx1YVk6c3RhdGVtZW50KGxzKQoJCQlsb2NhbCBsaW5lID0gbHMubGluZW51bWJlciAgLS0gbWF5IGJlIG5lZWRlZCBmb3IgZXJyb3IgbWVzc2FnZXMKCQkJbG9jYWwgYyA9IGxzLnQudG9rZW4KCQkJaWYgYyA9PSAiVEtfSUYiIHRoZW4gIC0tIHN0YXQgLT4gaWZzdGF0CgkJCQlzZWxmOmlmc3RhdChscywgbGluZSkKCQkJCXJldHVybiBmYWxzZQoJCQllbHNlaWYgYyA9PSAiVEtfV0hJTEUiIHRoZW4gIC0tIHN0YXQgLT4gd2hpbGVzdGF0CgkJCQlzZWxmOndoaWxlc3RhdChscywgbGluZSkKCQkJCXJldHVybiBmYWxzZQoJCQllbHNlaWYgYyA9PSAiVEtfRE8iIHRoZW4gIC0tIHN0YXQgLT4gRE8gYmxvY2sgRU5ECgkJCQlsdWFYOm5leHQobHMpICAtLSBza2lwIERPCgkJCQlzZWxmOmJsb2NrKGxzKQoJCQkJc2VsZjpjaGVja19tYXRjaChscywgIlRLX0VORCIsICJUS19ETyIsIGxpbmUpCgkJCQlyZXR1cm4gZmFsc2UKCQkJZWxzZWlmIGMgPT0gIlRLX0ZPUiIgdGhlbiAgLS0gc3RhdCAtPiBmb3JzdGF0CgkJCQlzZWxmOmZvcnN0YXQobHMsIGxpbmUpCgkJCQlyZXR1cm4gZmFsc2UKCQkJZWxzZWlmIGMgPT0gIlRLX1JFUEVBVCIgdGhlbiAgLS0gc3RhdCAtPiByZXBlYXRzdGF0CgkJCQlzZWxmOnJlcGVhdHN0YXQobHMsIGxpbmUpCgkJCQlyZXR1cm4gZmFsc2UKCQkJZWxzZWlmIGMgPT0gIlRLX0ZVTkNUSU9OIiB0aGVuICAtLSBzdGF0IC0+IGZ1bmNzdGF0CgkJCQlzZWxmOmZ1bmNzdGF0KGxzLCBsaW5lKQoJCQkJcmV0dXJuIGZhbHNlCgkJCWVsc2VpZiBjID09ICJUS19MT0NBTCIgdGhlbiAgLS0gc3RhdCAtPiBsb2NhbHN0YXQKCQkJCWx1YVg6bmV4dChscykgIC0tIHNraXAgTE9DQUwKCQkJCWlmIHNlbGY6dGVzdG5leHQobHMsICJUS19GVU5DVElPTiIpIHRoZW4gIC0tIGxvY2FsIGZ1bmN0aW9uPwoJCQkJCXNlbGY6bG9jYWxmdW5jKGxzKQoJCQkJZWxzZQoJCQkJCXNlbGY6bG9jYWxzdGF0KGxzKQoJCQkJZW5kCgkJCQlyZXR1cm4gZmFsc2UKCQkJZWxzZWlmIGMgPT0gIlRLX1JFVFVSTiIgdGhlbiAgLS0gc3RhdCAtPiByZXRzdGF0CgkJCQlzZWxmOnJldHN0YXQobHMpCgkJCQlyZXR1cm4gdHJ1ZSAgLS0gbXVzdCBiZSBsYXN0IHN0YXRlbWVudAoJCQllbHNlaWYgYyA9PSAiVEtfQlJFQUsiIHRoZW4gIC0tIHN0YXQgLT4gYnJlYWtzdGF0CgkJCQlsdWFYOm5leHQobHMpICAtLSBza2lwIEJSRUFLCgkJCQlzZWxmOmJyZWFrc3RhdChscykKCQkJCXJldHVybiB0cnVlICAtLSBtdXN0IGJlIGxhc3Qgc3RhdGVtZW50CgkJCWVsc2UKCQkJCXNlbGY6ZXhwcnN0YXQobHMpCgkJCQlyZXR1cm4gZmFsc2UgIC0tIHRvIGF2b2lkIHdhcm5pbmdzCgkJCWVuZC0taWYgYwoJCWVuZAoKCQktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQktLSBwYXJzZSBhIGNodW5rLCB3aGljaCBjb25zaXN0cyBvZiBhIGJ1bmNoIG9mIHN0YXRlbWVudHMKCQktLSAqIHVzZWQgaW4gcGFyc2VyKCksIGJvZHkoKSwgYmxvY2soKSwgcmVwZWF0c3RhdCgpCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJZnVuY3Rpb24gbHVhWTpjaHVuayhscykKCQkJLS0gY2h1bmsgLT4geyBzdGF0IFsnOyddIH0KCQkJbG9jYWwgaXNsYXN0ID0gZmFsc2UKCQkJc2VsZjplbnRlcmxldmVsKGxzKQoJCQl3aGlsZSBub3QgaXNsYXN0IGFuZCBub3Qgc2VsZjpibG9ja19mb2xsb3cobHMudC50b2tlbikgZG8KCQkJCWlzbGFzdCA9IHNlbGY6c3RhdGVtZW50KGxzKQoJCQkJc2VsZjp0ZXN0bmV4dChscywgIjsiKQoJCQkJbHVhX2Fzc2VydChscy5mcy5mLm1heHN0YWNrc2l6ZSA+PSBscy5mcy5mcmVlcmVnIGFuZAoJCQkJCWxzLmZzLmZyZWVyZWcgPj0gbHMuZnMubmFjdHZhcikKCQkJCWxzLmZzLmZyZWVyZWcgPSBscy5mcy5uYWN0dmFyICAtLSBmcmVlIHJlZ2lzdGVycwoJCQllbmQKCQkJc2VsZjpsZWF2ZWxldmVsKGxzKQoJCWVuZAoKCQktLSB9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKCgoKCgkJbHVhWDppbml0KCkgIC0tIHJlcXVpcmVkIGJ5IGxsZXgKCQlsb2NhbCBMdWFTdGF0ZSA9IHt9ICAtLSBkdW1teSwgbm90IGFjdHVhbGx5IHVzZWQsIGJ1dCByZXRhaW5lZCBzaW5jZQoJCS0tIHRoZSBpbnRlbnRpb24gaXMgdG8gY29tcGxldGUgYSBzdHJhaWdodCBwb3J0CgoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCS0tIGludGVyZmFjaW5nIHRvIHl1ZWxpYW5nCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCQlyZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSwgbmFtZSkKCQkJbmFtZSA9IG5hbWUgb3IgJ2NvbXBpbGVkLWx1YScKCQkJLS0gbHVhWjptYWtlX2dldEYgcmV0dXJucyBhIGZpbGUgY2h1bmsgcmVhZGVyCgkJCS0tIGx1YVo6aW5pdCByZXR1cm5zIGEgemlvIGlucHV0IHN0cmVhbQoJCQlsb2NhbCB6aW8gPSBsdWFaOmluaXQobHVhWjptYWtlX2dldEYoc291cmNlKSwgbmlsKQoJCQlpZiBub3QgemlvIHRoZW4gcmV0dXJuIGVuZAoJCQktLSBsdWFZOnBhcnNlciBwYXJzZXMgdGhlIGlucHV0IHN0cmVhbQoJCQktLSBmdW5jIGlzIHRoZSBmdW5jdGlvbiBwcm90b3R5cGUgaW4gdGFidWxhciBmb3JtOyBpbiBDLCBmdW5jIGNhbgoJCQktLSBub3cgYmUgdXNlZCBkaXJlY3RseSBieSB0aGUgVk0sIHRoaXMgY2FuJ3QgYmUgZG9uZSBpbiBMdWEKCgkJCWxvY2FsIGZ1bmMgPSBsdWFZOnBhcnNlcihMdWFTdGF0ZSwgemlvLCBuaWwsICJAIi4ubmFtZSkKCQkJLS0gbHVhVTptYWtlX3NldFMgcmV0dXJucyBhIHN0cmluZyBjaHVuayB3cml0ZXIKCQkJbG9jYWwgd3JpdGVyLCBidWZmID0gbHVhVTptYWtlX3NldFMoKQoJCQktLSBsdWFVOmR1bXAgYnVpbGRzIGEgYmluYXJ5IGNodW5rCgkJCWx1YVU6ZHVtcChMdWFTdGF0ZSwgZnVuYywgd3JpdGVyLCBidWZmKQoJCQktLSBhIHN0cmluZy5kdW1wIGVxdWl2YWxlbnQgaW4gcmV0dXJuZWQKCgkJCXJldHVybiBidWZmLmRhdGEKCQllbmQKCWVuZCkoKQoKCWxvY2FsIGNyZWF0ZUV4ZWN1dGFibGUgPSBjb3JvdXRpbmUud3JhcChmdW5jdGlvbigpCiAgICAtLVtbCkZpT25lCkNvcHlyaWdodCAoQykgMjAyMSAgUmVydW11CgpUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQppdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQp0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgooYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgoKVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCmFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgpdXSAtLQoJCWxvY2FsIGJpdCA9IGJpdCBvciBiaXQzMiBvciByZXF1aXJlKCdiaXQnKQoKCQlpZiBub3QgdGFibGUuY3JlYXRlIHRoZW4gZnVuY3Rpb24gdGFibGUuY3JlYXRlKF8pIHJldHVybiB7fSBlbmQgZW5kCgoJCWlmIG5vdCB0YWJsZS51bnBhY2sgdGhlbiB0YWJsZS51bnBhY2sgPSB1bnBhY2sgZW5kCgoJCWlmIG5vdCB0YWJsZS5wYWNrIHRoZW4gZnVuY3Rpb24gdGFibGUucGFjayguLi4pIHJldHVybiB7biA9IHNlbGVjdCgnIycsIC4uLiksIC4uLn0gZW5kIGVuZAoKCQlpZiBub3QgdGFibGUubW92ZSB0aGVuCgkJCWZ1bmN0aW9uIHRhYmxlLm1vdmUoc3JjLCBmaXJzdCwgbGFzdCwgb2Zmc2V0LCBkc3QpCgkJCQlmb3IgaSA9IDAsIGxhc3QgLSBmaXJzdCBkbyBkc3Rbb2Zmc2V0ICsgaV0gPSBzcmNbZmlyc3QgKyBpXSBlbmQKCQkJZW5kCgkJZW5kCgoJCWxvY2FsIGx1YV9iY190b19zdGF0ZQoJCWxvY2FsIGx1YV93cmFwX3N0YXRlCgkJbG9jYWwgc3RtX2x1YV9mdW5jCgoJCS0tIFNFVExJU1QgY29uZmlnCgkJbG9jYWwgRklFTERTX1BFUl9GTFVTSCA9IDUwCgoJCS0tIHJlbWFwIGZvciBiZXR0ZXIgbG9va3VwCgkJbG9jYWwgT1BDT0RFX1JNID0gewoJCQktLSBsZXZlbCAxCgkJCVsyMl0gPSAxOCwgLS0gSk1QCgkJCVszMV0gPSA4LCAtLSBGT1JMT09QCgkJCVszM10gPSAyOCwgLS0gVEZPUkxPT1AKCQkJLS0gbGV2ZWwgMgoJCQlbMF0gPSAzLCAtLSBNT1ZFCgkJCVsxXSA9IDEzLCAtLSBMT0FESwoJCQlbMl0gPSAyMywgLS0gTE9BREJPT0wKCQkJWzI2XSA9IDMzLCAtLSBURVNUCgkJCS0tIGxldmVsIDMKCQkJWzEyXSA9IDEsIC0tIEFERAoJCQlbMTNdID0gNiwgLS0gU1VCCgkJCVsxNF0gPSAxMCwgLS0gTVVMCgkJCVsxNV0gPSAxNiwgLS0gRElWCgkJCVsxNl0gPSAyMCwgLS0gTU9ECgkJCVsxN10gPSAyNiwgLS0gUE9XCgkJCVsxOF0gPSAzMCwgLS0gVU5NCgkJCVsxOV0gPSAzNiwgLS0gTk9UCgkJCS0tIGxldmVsIDQKCQkJWzNdID0gMCwgLS0gTE9BRE5JTAoJCQlbNF0gPSAyLCAtLSBHRVRVUFZBTAoJCQlbNV0gPSA0LCAtLSBHRVRHTE9CQUwKCQkJWzZdID0gNywgLS0gR0VUVEFCTEUKCQkJWzddID0gOSwgLS0gU0VUR0xPQkFMCgkJCVs4XSA9IDEyLCAtLSBTRVRVUFZBTAoJCQlbOV0gPSAxNCwgLS0gU0VUVEFCTEUKCQkJWzEwXSA9IDE3LCAtLSBORVdUQUJMRQoJCQlbMjBdID0gMTksIC0tIExFTgoJCQlbMjFdID0gMjIsIC0tIENPTkNBVAoJCQlbMjNdID0gMjQsIC0tIEVRCgkJCVsyNF0gPSAyNywgLS0gTFQKCQkJWzI1XSA9IDI5LCAtLSBMRQoJCQlbMjddID0gMzIsIC0tIFRFU1RTRVQKCQkJWzMyXSA9IDM0LCAtLSBGT1JQUkVQCgkJCVszNF0gPSAzNywgLS0gU0VUTElTVAoJCQktLSBsZXZlbCA1CgkJCVsxMV0gPSA1LCAtLSBTRUxGCgkJCVsyOF0gPSAxMSwgLS0gQ0FMTAoJCQlbMjldID0gMTUsIC0tIFRBSUxDQUxMCgkJCVszMF0gPSAyMSwgLS0gUkVUVVJOCgkJCVszNV0gPSAyNSwgLS0gQ0xPU0UKCQkJWzM2XSA9IDMxLCAtLSBDTE9TVVJFCgkJCVszN10gPSAzNSwgLS0gVkFSQVJHCgkJfQoKCQktLSBvcGNvZGUgdHlwZXMgZm9yIGdldHRpbmcgdmFsdWVzCgkJbG9jYWwgT1BDT0RFX1QgPSB7CgkJCVswXSA9ICdBQkMnLAoJCQknQUJ4JywKCQkJJ0FCQycsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FCeCcsCgkJCSdBQkMnLAoJCQknQUJ4JywKCQkJJ0FCQycsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FCQycsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FCQycsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FCQycsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FCQycsCgkJCSdBQkMnLAoJCQknQXNCeCcsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FCQycsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FCQycsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FzQngnLAoJCQknQXNCeCcsCgkJCSdBQkMnLAoJCQknQUJDJywKCQkJJ0FCQycsCgkJCSdBQngnLAoJCQknQUJDJywKCQl9CgoJCWxvY2FsIE9QQ09ERV9NID0gewoJCQlbMF0gPSB7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnVSd9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnVSd9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnUid9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ0snLCBjID0gJ09wQXJnSyd9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnVSd9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnVSd9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnVSd9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnVSd9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1InLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ04nLCBjID0gJ09wQXJnVSd9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnVSd9LAoJCQl7YiA9ICdPcEFyZ04nLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnTid9LAoJCQl7YiA9ICdPcEFyZ1UnLCBjID0gJ09wQXJnTid9LAoJCX0KCgkJLS0gaW50IHJkX2ludF9iYXNpYyhzdHJpbmcgc3JjLCBpbnQgcywgaW50IGUsIGludCBkKQoJCS0tIEBzcmMgLSBTb3VyY2UgYmluYXJ5IHN0cmluZwoJCS0tIEBzIC0gU3RhcnQgaW5kZXggb2YgYSBsaXR0bGUgZW5kaWFuIGludGVnZXIKCQktLSBAZSAtIEVuZCBpbmRleCBvZiB0aGUgaW50ZWdlcgoJCS0tIEBkIC0gRGlyZWN0aW9uIG9mIHRoZSBsb29wCgkJbG9jYWwgZnVuY3Rpb24gcmRfaW50X2Jhc2ljKHNyYywgcywgZSwgZCkKCQkJbG9jYWwgbnVtID0gMAoKCQkJLS0gaWYgYmJbbF0gPiAxMjcgdGhlbiAtLSBzaWduZWQgbmVnYXRpdmUKCQkJLS0gCW51bSA9IG51bSAtIDI1NiBeIGwKCQkJLS0gCWJiW2xdID0gYmJbbF0gLSAxMjgKCQkJLS0gZW5kCgoJCQlmb3IgaSA9IHMsIGUsIGQgZG8KCQkJCWxvY2FsIG11bCA9IDI1NiBeIG1hdGguYWJzKGkgLSBzKQoKCQkJCW51bSA9IG51bSArIG11bCAqIHN0cmluZy5ieXRlKHNyYywgaSwgaSkKCQkJZW5kCgoJCQlyZXR1cm4gbnVtCgkJZW5kCgoJCS0tIGZsb2F0IHJkX2ZsdF9iYXNpYyhieXRlIGYxLi44KQoJCS0tIEBmMS4uNCAtIFRoZSA0IGJ5dGVzIGNvbXBvc2luZyBhIGxpdHRsZSBlbmRpYW4gZmxvYXQKCQlsb2NhbCBmdW5jdGlvbiByZF9mbHRfYmFzaWMoZjEsIGYyLCBmMywgZjQpCgkJCWxvY2FsIHNpZ24gPSAoLTEpIF4gYml0LnJzaGlmdChmNCwgNykKCQkJbG9jYWwgZXhwID0gYml0LnJzaGlmdChmMywgNykgKyBiaXQubHNoaWZ0KGJpdC5iYW5kKGY0LCAweDdGKSwgMSkKCQkJbG9jYWwgZnJhYyA9IGYxICsgYml0LmxzaGlmdChmMiwgOCkgKyBiaXQubHNoaWZ0KGJpdC5iYW5kKGYzLCAweDdGKSwgMTYpCgkJCWxvY2FsIG5vcm1hbCA9IDEKCgkJCWlmIGV4cCA9PSAwIHRoZW4KCQkJCWlmIGZyYWMgPT0gMCB0aGVuCgkJCQkJcmV0dXJuIHNpZ24gKiAwCgkJCQllbHNlCgkJCQkJbm9ybWFsID0gMAoJCQkJCWV4cCA9IDEKCQkJCWVuZAoJCQllbHNlaWYgZXhwID09IDB4N0YgdGhlbgoJCQkJaWYgZnJhYyA9PSAwIHRoZW4KCQkJCQlyZXR1cm4gc2lnbiAqICgxIC8gMCkKCQkJCWVsc2UKCQkJCQlyZXR1cm4gc2lnbiAqICgwIC8gMCkKCQkJCWVuZAoJCQllbmQKCgkJCXJldHVybiBzaWduICogMiBeIChleHAgLSAxMjcpICogKDEgKyBub3JtYWwgLyAyIF4gMjMpCgkJZW5kCgoJCS0tIGRvdWJsZSByZF9kYmxfYmFzaWMoYnl0ZSBmMS4uOCkKCQktLSBAZjEuLjggLSBUaGUgOCBieXRlcyBjb21wb3NpbmcgYSBsaXR0bGUgZW5kaWFuIGRvdWJsZQoJCWxvY2FsIGZ1bmN0aW9uIHJkX2RibF9iYXNpYyhmMSwgZjIsIGYzLCBmNCwgZjUsIGY2LCBmNywgZjgpCgkJCWxvY2FsIHNpZ24gPSAoLTEpIF4gYml0LnJzaGlmdChmOCwgNykKCQkJbG9jYWwgZXhwID0gYml0LmxzaGlmdChiaXQuYmFuZChmOCwgMHg3RiksIDQpICsgYml0LnJzaGlmdChmNywgNCkKCQkJbG9jYWwgZnJhYyA9IGJpdC5iYW5kKGY3LCAweDBGKSAqIDIgXiA0OAoJCQlsb2NhbCBub3JtYWwgPSAxCgoJCQlmcmFjID0gZnJhYyArIChmNiAqIDIgXiA0MCkgKyAoZjUgKiAyIF4gMzIpICsgKGY0ICogMiBeIDI0KSArIChmMyAqIDIgXiAxNikgKyAoZjIgKiAyIF4gOCkgKyBmMSAtLSBoZWxwCgoJCQlpZiBleHAgPT0gMCB0aGVuCgkJCQlpZiBmcmFjID09IDAgdGhlbgoJCQkJCXJldHVybiBzaWduICogMAoJCQkJZWxzZQoJCQkJCW5vcm1hbCA9IDAKCQkJCQlleHAgPSAxCgkJCQllbmQKCQkJZWxzZWlmIGV4cCA9PSAweDdGRiB0aGVuCgkJCQlpZiBmcmFjID09IDAgdGhlbgoJCQkJCXJldHVybiBzaWduICogKDEgLyAwKQoJCQkJZWxzZQoJCQkJCXJldHVybiBzaWduICogKDAgLyAwKQoJCQkJZW5kCgkJCWVuZAoKCQkJcmV0dXJuIHNpZ24gKiAyIF4gKGV4cCAtIDEwMjMpICogKG5vcm1hbCArIGZyYWMgLyAyIF4gNTIpCgkJZW5kCgoJCS0tIGludCByZF9pbnRfbGUoc3RyaW5nIHNyYywgaW50IHMsIGludCBlKQoJCS0tIEBzcmMgLSBTb3VyY2UgYmluYXJ5IHN0cmluZwoJCS0tIEBzIC0gU3RhcnQgaW5kZXggb2YgYSBsaXR0bGUgZW5kaWFuIGludGVnZXIKCQktLSBAZSAtIEVuZCBpbmRleCBvZiB0aGUgaW50ZWdlcgoJCWxvY2FsIGZ1bmN0aW9uIHJkX2ludF9sZShzcmMsIHMsIGUpIHJldHVybiByZF9pbnRfYmFzaWMoc3JjLCBzLCBlIC0gMSwgMSkgZW5kCgoJCS0tIGludCByZF9pbnRfYmUoc3RyaW5nIHNyYywgaW50IHMsIGludCBlKQoJCS0tIEBzcmMgLSBTb3VyY2UgYmluYXJ5IHN0cmluZwoJCS0tIEBzIC0gU3RhcnQgaW5kZXggb2YgYSBiaWcgZW5kaWFuIGludGVnZXIKCQktLSBAZSAtIEVuZCBpbmRleCBvZiB0aGUgaW50ZWdlcgoJCWxvY2FsIGZ1bmN0aW9uIHJkX2ludF9iZShzcmMsIHMsIGUpIHJldHVybiByZF9pbnRfYmFzaWMoc3JjLCBlIC0gMSwgcywgLTEpIGVuZAoKCQktLSBmbG9hdCByZF9mbHRfbGUoc3RyaW5nIHNyYywgaW50IHMpCgkJLS0gQHNyYyAtIFNvdXJjZSBiaW5hcnkgc3RyaW5nCgkJLS0gQHMgLSBTdGFydCBpbmRleCBvZiBsaXR0bGUgZW5kaWFuIGZsb2F0CgkJbG9jYWwgZnVuY3Rpb24gcmRfZmx0X2xlKHNyYywgcykgcmV0dXJuIHJkX2ZsdF9iYXNpYyhzdHJpbmcuYnl0ZShzcmMsIHMsIHMgKyAzKSkgZW5kCgoJCS0tIGZsb2F0IHJkX2ZsdF9iZShzdHJpbmcgc3JjLCBpbnQgcykKCQktLSBAc3JjIC0gU291cmNlIGJpbmFyeSBzdHJpbmcKCQktLSBAcyAtIFN0YXJ0IGluZGV4IG9mIGJpZyBlbmRpYW4gZmxvYXQKCQlsb2NhbCBmdW5jdGlvbiByZF9mbHRfYmUoc3JjLCBzKQoJCQlsb2NhbCBmMSwgZjIsIGYzLCBmNCA9IHN0cmluZy5ieXRlKHNyYywgcywgcyArIDMpCgkJCXJldHVybiByZF9mbHRfYmFzaWMoZjQsIGYzLCBmMiwgZjEpCgkJZW5kCgoJCS0tIGRvdWJsZSByZF9kYmxfbGUoc3RyaW5nIHNyYywgaW50IHMpCgkJLS0gQHNyYyAtIFNvdXJjZSBiaW5hcnkgc3RyaW5nCgkJLS0gQHMgLSBTdGFydCBpbmRleCBvZiBsaXR0bGUgZW5kaWFuIGRvdWJsZQoJCWxvY2FsIGZ1bmN0aW9uIHJkX2RibF9sZShzcmMsIHMpIHJldHVybiByZF9kYmxfYmFzaWMoc3RyaW5nLmJ5dGUoc3JjLCBzLCBzICsgNykpIGVuZAoKCQktLSBkb3VibGUgcmRfZGJsX2JlKHN0cmluZyBzcmMsIGludCBzKQoJCS0tIEBzcmMgLSBTb3VyY2UgYmluYXJ5IHN0cmluZwoJCS0tIEBzIC0gU3RhcnQgaW5kZXggb2YgYmlnIGVuZGlhbiBkb3VibGUKCQlsb2NhbCBmdW5jdGlvbiByZF9kYmxfYmUoc3JjLCBzKQoJCQlsb2NhbCBmMSwgZjIsIGYzLCBmNCwgZjUsIGY2LCBmNywgZjggPSBzdHJpbmcuYnl0ZShzcmMsIHMsIHMgKyA3KSAtLSBzYW1lCgkJCXJldHVybiByZF9kYmxfYmFzaWMoZjgsIGY3LCBmNiwgZjUsIGY0LCBmMywgZjIsIGYxKQoJCWVuZAoKCQktLSB0byBhdm9pZCBuZXN0ZWQgaWZzIGluIGRlc2VyaWFsaXppbmcKCQlsb2NhbCBmbG9hdF90eXBlcyA9IHsKCQkJWzRdID0ge2xpdHRsZSA9IHJkX2ZsdF9sZSwgYmlnID0gcmRfZmx0X2JlfSwKCQkJWzhdID0ge2xpdHRsZSA9IHJkX2RibF9sZSwgYmlnID0gcmRfZGJsX2JlfSwKCQl9CgoJCS0tIGJ5dGUgc3RtX2J5dGUoU3RyZWFtIFMpCgkJLS0gQFMgLSBTdHJlYW0gb2JqZWN0IHRvIHJlYWQgZnJvbQoJCWxvY2FsIGZ1bmN0aW9uIHN0bV9ieXRlKFMpCgkJCWxvY2FsIGlkeCA9IFMuaW5kZXgKCQkJbG9jYWwgYnQgPSBzdHJpbmcuYnl0ZShTLnNvdXJjZSwgaWR4LCBpZHgpCgoJCQlTLmluZGV4ID0gaWR4ICsgMQoJCQlyZXR1cm4gYnQKCQllbmQKCgkJLS0gc3RyaW5nIHN0bV9zdHJpbmcoU3RyZWFtIFMsIGludCBsZW4pCgkJLS0gQFMgLSBTdHJlYW0gb2JqZWN0IHRvIHJlYWQgZnJvbQoJCS0tIEBsZW4gLSBMZW5ndGggb2Ygc3RyaW5nIGJlaW5nIHJlYWQKCQlsb2NhbCBmdW5jdGlvbiBzdG1fc3RyaW5nKFMsIGxlbikKCQkJbG9jYWwgcG9zID0gUy5pbmRleCArIGxlbgoJCQlsb2NhbCBzdHIgPSBzdHJpbmcuc3ViKFMuc291cmNlLCBTLmluZGV4LCBwb3MgLSAxKQoKCQkJUy5pbmRleCA9IHBvcwoJCQlyZXR1cm4gc3RyCgkJZW5kCgoJCS0tIHN0cmluZyBzdG1fbHN0cmluZyhTdHJlYW0gUykKCQktLSBAUyAtIFN0cmVhbSBvYmplY3QgdG8gcmVhZCBmcm9tCgkJbG9jYWwgZnVuY3Rpb24gc3RtX2xzdHJpbmcoUykKCQkJbG9jYWwgbGVuID0gUzpzX3N6dCgpCgkJCWxvY2FsIHN0cgoKCQkJaWYgbGVuIH49IDAgdGhlbiBzdHIgPSBzdHJpbmcuc3ViKHN0bV9zdHJpbmcoUywgbGVuKSwgMSwgLTIpIGVuZAoKCQkJcmV0dXJuIHN0cgoJCWVuZAoKCQktLSBmbiBjc3RfaW50X3JkcihzdHJpbmcgc3JjLCBpbnQgbGVuLCBmbiBmdW5jKQoJCS0tIEBsZW4gLSBMZW5ndGggb2YgdHlwZSBmb3IgcmVhZGVyCgkJLS0gQGZ1bmMgLSBSZWFkZXIgY2FsbGJhY2sKCQlsb2NhbCBmdW5jdGlvbiBjc3RfaW50X3JkcihsZW4sIGZ1bmMpCgkJCXJldHVybiBmdW5jdGlvbihTKQoJCQkJbG9jYWwgcG9zID0gUy5pbmRleCArIGxlbgoJCQkJbG9jYWwgaW50ID0gZnVuYyhTLnNvdXJjZSwgUy5pbmRleCwgcG9zKQoJCQkJUy5pbmRleCA9IHBvcwoKCQkJCXJldHVybiBpbnQKCQkJZW5kCgkJZW5kCgoJCS0tIGZuIGNzdF9mbHRfcmRyKHN0cmluZyBzcmMsIGludCBsZW4sIGZuIGZ1bmMpCgkJLS0gQGxlbiAtIExlbmd0aCBvZiB0eXBlIGZvciByZWFkZXIKCQktLSBAZnVuYyAtIFJlYWRlciBjYWxsYmFjawoJCWxvY2FsIGZ1bmN0aW9uIGNzdF9mbHRfcmRyKGxlbiwgZnVuYykKCQkJcmV0dXJuIGZ1bmN0aW9uKFMpCgkJCQlsb2NhbCBmbHQgPSBmdW5jKFMuc291cmNlLCBTLmluZGV4KQoJCQkJUy5pbmRleCA9IFMuaW5kZXggKyBsZW4KCgkJCQlyZXR1cm4gZmx0CgkJCWVuZAoJCWVuZAoKCQlsb2NhbCBmdW5jdGlvbiBzdG1faW5zdF9saXN0KFMpCgkJCWxvY2FsIGxlbiA9IFM6c19pbnQoKQoJCQlsb2NhbCBsaXN0ID0gdGFibGUuY3JlYXRlKGxlbikKCgkJCWZvciBpID0gMSwgbGVuIGRvCgkJCQlsb2NhbCBpbnMgPSBTOnNfaW5zKCkKCQkJCWxvY2FsIG9wID0gYml0LmJhbmQoaW5zLCAweDNGKQoJCQkJbG9jYWwgYXJncyA9IE9QQ09ERV9UW29wXQoJCQkJbG9jYWwgbW9kZSA9IE9QQ09ERV9NW29wXQoJCQkJbG9jYWwgZGF0YSA9IHt2YWx1ZSA9IGlucywgb3AgPSBPUENPREVfUk1bb3BdLCBBID0gYml0LmJhbmQoYml0LnJzaGlmdChpbnMsIDYpLCAweEZGKX0KCgkJCQlpZiBhcmdzID09ICdBQkMnIHRoZW4KCQkJCQlkYXRhLkIgPSBiaXQuYmFuZChiaXQucnNoaWZ0KGlucywgMjMpLCAweDFGRikKCQkJCQlkYXRhLkMgPSBiaXQuYmFuZChiaXQucnNoaWZ0KGlucywgMTQpLCAweDFGRikKCQkJCQlkYXRhLmlzX0tCID0gbW9kZS5iID09ICdPcEFyZ0snIGFuZCBkYXRhLkIgPiAweEZGIC0tIHBvc3QgcHJvY2VzcyBvcHRpbWl6YXRpb24KCQkJCQlkYXRhLmlzX0tDID0gbW9kZS5jID09ICdPcEFyZ0snIGFuZCBkYXRhLkMgPiAweEZGCgkJCQllbHNlaWYgYXJncyA9PSAnQUJ4JyB0aGVuCgkJCQkJZGF0YS5CeCA9IGJpdC5iYW5kKGJpdC5yc2hpZnQoaW5zLCAxNCksIDB4M0ZGRkYpCgkJCQkJZGF0YS5pc19LID0gbW9kZS5iID09ICdPcEFyZ0snCgkJCQllbHNlaWYgYXJncyA9PSAnQXNCeCcgdGhlbgoJCQkJCWRhdGEuc0J4ID0gYml0LmJhbmQoYml0LnJzaGlmdChpbnMsIDE0KSwgMHgzRkZGRikgLSAxMzEwNzEKCQkJCWVuZAoKCQkJCWxpc3RbaV0gPSBkYXRhCgkJCWVuZAoKCQkJcmV0dXJuIGxpc3QKCQllbmQKCgkJbG9jYWwgZnVuY3Rpb24gc3RtX2NvbnN0X2xpc3QoUykKCQkJbG9jYWwgbGVuID0gUzpzX2ludCgpCgkJCWxvY2FsIGxpc3QgPSB0YWJsZS5jcmVhdGUobGVuKQoKCQkJZm9yIGkgPSAxLCBsZW4gZG8KCQkJCWxvY2FsIHR0ID0gc3RtX2J5dGUoUykKCQkJCWxvY2FsIGsKCgkJCQlpZiB0dCA9PSAxIHRoZW4KCQkJCQlrID0gc3RtX2J5dGUoUykgfj0gMAoJCQkJZWxzZWlmIHR0ID09IDMgdGhlbgoJCQkJCWsgPSBTOnNfbnVtKCkKCQkJCWVsc2VpZiB0dCA9PSA0IHRoZW4KCQkJCQlrID0gc3RtX2xzdHJpbmcoUykKCQkJCWVuZAoKCQkJCWxpc3RbaV0gPSBrIC0tIG9mZnNldCArMSBkdXJpbmcgaW5zdHJ1Y3Rpb24gZGVjb2RlCgkJCWVuZAoKCQkJcmV0dXJuIGxpc3QKCQllbmQKCgkJbG9jYWwgZnVuY3Rpb24gc3RtX3N1Yl9saXN0KFMsIHNyYykKCQkJbG9jYWwgbGVuID0gUzpzX2ludCgpCgkJCWxvY2FsIGxpc3QgPSB0YWJsZS5jcmVhdGUobGVuKQoKCQkJZm9yIGkgPSAxLCBsZW4gZG8KCQkJCWxpc3RbaV0gPSBzdG1fbHVhX2Z1bmMoUywgc3JjKSAtLSBvZmZzZXQgKzEgaW4gQ0xPU1VSRQoJCQllbmQKCgkJCXJldHVybiBsaXN0CgkJZW5kCgoJCWxvY2FsIGZ1bmN0aW9uIHN0bV9saW5lX2xpc3QoUykKCQkJbG9jYWwgbGVuID0gUzpzX2ludCgpCgkJCWxvY2FsIGxpc3QgPSB0YWJsZS5jcmVhdGUobGVuKQoKCQkJZm9yIGkgPSAxLCBsZW4gZG8gbGlzdFtpXSA9IFM6c19pbnQoKSBlbmQKCgkJCXJldHVybiBsaXN0CgkJZW5kCgoJCWxvY2FsIGZ1bmN0aW9uIHN0bV9sb2NfbGlzdChTKQoJCQlsb2NhbCBsZW4gPSBTOnNfaW50KCkKCQkJbG9jYWwgbGlzdCA9IHRhYmxlLmNyZWF0ZShsZW4pCgoJCQlmb3IgaSA9IDEsIGxlbiBkbyBsaXN0W2ldID0ge3Zhcm5hbWUgPSBzdG1fbHN0cmluZyhTKSwgc3RhcnRwYyA9IFM6c19pbnQoKSwgZW5kcGMgPSBTOnNfaW50KCl9IGVuZAoKCQkJcmV0dXJuIGxpc3QKCQllbmQKCgkJbG9jYWwgZnVuY3Rpb24gc3RtX3VwdmFsX2xpc3QoUykKCQkJbG9jYWwgbGVuID0gUzpzX2ludCgpCgkJCWxvY2FsIGxpc3QgPSB0YWJsZS5jcmVhdGUobGVuKQoKCQkJZm9yIGkgPSAxLCBsZW4gZG8gbGlzdFtpXSA9IHN0bV9sc3RyaW5nKFMpIGVuZAoKCQkJcmV0dXJuIGxpc3QKCQllbmQKCgkJZnVuY3Rpb24gc3RtX2x1YV9mdW5jKFMsIHBzcmMpCgkJCWxvY2FsIHByb3RvID0ge30KCQkJbG9jYWwgc3JjID0gc3RtX2xzdHJpbmcoUykgb3IgcHNyYyAtLSBzb3VyY2UgaXMgcHJvcGFnYXRlZAoKCQkJcHJvdG8uc291cmNlID0gc3JjIC0tIHNvdXJjZSBuYW1lCgoJCQlTOnNfaW50KCkgLS0gbGluZSBkZWZpbmVkCgkJCVM6c19pbnQoKSAtLSBsYXN0IGxpbmUgZGVmaW5lZAoKCQkJcHJvdG8ubnVtX3VwdmFsID0gc3RtX2J5dGUoUykgLS0gbnVtIHVwdmFsdWVzCgkJCXByb3RvLm51bV9wYXJhbSA9IHN0bV9ieXRlKFMpIC0tIG51bSBwYXJhbXMKCgkJCXN0bV9ieXRlKFMpIC0tIHZhcmFyZyBmbGFnCgkJCXByb3RvLm1heF9zdGFjayA9IHN0bV9ieXRlKFMpIC0tIG1heCBzdGFjayBzaXplCgoJCQlwcm90by5jb2RlID0gc3RtX2luc3RfbGlzdChTKQoJCQlwcm90by5jb25zdCA9IHN0bV9jb25zdF9saXN0KFMpCgkJCXByb3RvLnN1YnMgPSBzdG1fc3ViX2xpc3QoUywgc3JjKQoJCQlwcm90by5saW5lcyA9IHN0bV9saW5lX2xpc3QoUykKCgkJCXN0bV9sb2NfbGlzdChTKQoJCQlzdG1fdXB2YWxfbGlzdChTKQoKCQkJLS0gcG9zdCBwcm9jZXNzIG9wdGltaXphdGlvbgoJCQlmb3IgXywgdiBpbiBpcGFpcnMocHJvdG8uY29kZSkgZG8KCQkJCWlmIHYuaXNfSyB0aGVuCgkJCQkJdi5jb25zdCA9IHByb3RvLmNvbnN0W3YuQnggKyAxXSAtLSBvZmZzZXQgZm9yIDEgYmFzZWQgaW5kZXgKCQkJCWVsc2UKCQkJCQlpZiB2LmlzX0tCIHRoZW4gdi5jb25zdF9CID0gcHJvdG8uY29uc3Rbdi5CIC0gMHhGRl0gZW5kCgoJCQkJCWlmIHYuaXNfS0MgdGhlbiB2LmNvbnN0X0MgPSBwcm90by5jb25zdFt2LkMgLSAweEZGXSBlbmQKCQkJCWVuZAoJCQllbmQKCgkJCXJldHVybiBwcm90bwoJCWVuZAoKCQlmdW5jdGlvbiBsdWFfYmNfdG9fc3RhdGUoc3JjKQoJCQktLSBmdW5jIHJlYWRlcgoJCQlsb2NhbCByZHJfZnVuYwoKCQkJLS0gaGVhZGVyIGZsYWdzCgkJCWxvY2FsIGxpdHRsZQoJCQlsb2NhbCBzaXplX2ludAoJCQlsb2NhbCBzaXplX3N6dAoJCQlsb2NhbCBzaXplX2lucwoJCQlsb2NhbCBzaXplX251bQoJCQlsb2NhbCBmbGFnX2ludAoKCQkJLS0gc3RyZWFtIG9iamVjdAoJCQlsb2NhbCBzdHJlYW0gPSB7CgkJCQktLSBkYXRhCgkJCQlpbmRleCA9IDEsCgkJCQlzb3VyY2UgPSBzcmMsCgkJCX0KCgkJCWFzc2VydChzdG1fc3RyaW5nKHN0cmVhbSwgNCkgPT0gJ1wyN0x1YScsICdpbnZhbGlkIEx1YSBzaWduYXR1cmUnKQoJCQlhc3NlcnQoc3RtX2J5dGUoc3RyZWFtKSA9PSAweDUxLCAnaW52YWxpZCBMdWEgdmVyc2lvbicpCgkJCWFzc2VydChzdG1fYnl0ZShzdHJlYW0pID09IDAsICdpbnZhbGlkIEx1YSBmb3JtYXQnKQoKCQkJbGl0dGxlID0gc3RtX2J5dGUoc3RyZWFtKSB+PSAwCgkJCXNpemVfaW50ID0gc3RtX2J5dGUoc3RyZWFtKQoJCQlzaXplX3N6dCA9IHN0bV9ieXRlKHN0cmVhbSkKCQkJc2l6ZV9pbnMgPSBzdG1fYnl0ZShzdHJlYW0pCgkJCXNpemVfbnVtID0gc3RtX2J5dGUoc3RyZWFtKQoJCQlmbGFnX2ludCA9IHN0bV9ieXRlKHN0cmVhbSkgfj0gMAoKCQkJcmRyX2Z1bmMgPSBsaXR0bGUgYW5kIHJkX2ludF9sZSBvciByZF9pbnRfYmUKCQkJc3RyZWFtLnNfaW50ID0gY3N0X2ludF9yZHIoc2l6ZV9pbnQsIHJkcl9mdW5jKQoJCQlzdHJlYW0uc19zenQgPSBjc3RfaW50X3JkcihzaXplX3N6dCwgcmRyX2Z1bmMpCgkJCXN0cmVhbS5zX2lucyA9IGNzdF9pbnRfcmRyKHNpemVfaW5zLCByZHJfZnVuYykKCgkJCWlmIGZsYWdfaW50IHRoZW4KCQkJCXN0cmVhbS5zX251bSA9IGNzdF9pbnRfcmRyKHNpemVfbnVtLCByZHJfZnVuYykKCQkJZWxzZWlmIGZsb2F0X3R5cGVzW3NpemVfbnVtXSB0aGVuCgkJCQlzdHJlYW0uc19udW0gPSBjc3RfZmx0X3JkcihzaXplX251bSwgZmxvYXRfdHlwZXNbc2l6ZV9udW1dW2xpdHRsZSBhbmQgJ2xpdHRsZScgb3IgJ2JpZyddKQoJCQllbHNlCgkJCQllcnJvcigndW5zdXBwb3J0ZWQgZmxvYXQgc2l6ZScpCgkJCWVuZAoKCQkJcmV0dXJuIHN0bV9sdWFfZnVuYyhzdHJlYW0sICdAdmlydHVhbCcpCgkJZW5kCgoJCWxvY2FsIGZ1bmN0aW9uIGNsb3NlX2x1YV91cHZhbHVlcyhsaXN0LCBpbmRleCkKCQkJZm9yIGksIHV2IGluIHBhaXJzKGxpc3QpIGRvCgkJCQlpZiB1di5pbmRleCA+PSBpbmRleCB0aGVuCgkJCQkJdXYudmFsdWUgPSB1di5zdG9yZVt1di5pbmRleF0gLS0gc3RvcmUgdmFsdWUKCQkJCQl1di5zdG9yZSA9IHV2CgkJCQkJdXYuaW5kZXggPSAndmFsdWUnIC0tIHNlbGYgcmVmZXJlbmNlCgkJCQkJbGlzdFtpXSA9IG5pbAoJCQkJZW5kCgkJCWVuZAoJCWVuZAoKCQlsb2NhbCBmdW5jdGlvbiBvcGVuX2x1YV91cHZhbHVlKGxpc3QsIGluZGV4LCBtZW1vcnkpCgkJCWxvY2FsIHByZXYgPSBsaXN0W2luZGV4XQoKCQkJaWYgbm90IHByZXYgdGhlbgoJCQkJcHJldiA9IHtpbmRleCA9IGluZGV4LCBzdG9yZSA9IG1lbW9yeX0KCQkJCWxpc3RbaW5kZXhdID0gcHJldgoJCQllbmQKCgkJCXJldHVybiBwcmV2CgkJZW5kCgoJCWxvY2FsIGZ1bmN0aW9uIG9uX2x1YV9lcnJvcihmYWlsZWQsIGVycikKCQkJbG9jYWwgc3JjID0gZmFpbGVkLnNvdXJjZQoJCQlsb2NhbCBsaW5lID0gZmFpbGVkLmxpbmVzW2ZhaWxlZC5wYyAtIDFdCgoJCQllcnJvcihzdHJpbmcuZm9ybWF0KCclczolaTogJXMnLCBzcmMsIGxpbmUsIGVyciksIDApCgkJZW5kCgoJCWxvY2FsIGZ1bmN0aW9uIHJ1bl9sdWFfZnVuYyhzdGF0ZSwgZW52LCB1cHZhbHMpCgkJCWxvY2FsIGNvZGUgPSBzdGF0ZS5jb2RlCgkJCWxvY2FsIHN1YnMgPSBzdGF0ZS5zdWJzCgkJCWxvY2FsIHZhcmFyZyA9IHN0YXRlLnZhcmFyZwoKCQkJbG9jYWwgdG9wX2luZGV4ID0gLTEKCQkJbG9jYWwgb3Blbl9saXN0ID0ge30KCQkJbG9jYWwgbWVtb3J5ID0gc3RhdGUubWVtb3J5CgkJCWxvY2FsIHBjID0gc3RhdGUucGMKCgkJCXdoaWxlIHRydWUgZG8KCQkJCWxvY2FsIGluc3QgPSBjb2RlW3BjXQoJCQkJbG9jYWwgb3AgPSBpbnN0Lm9wCgkJCQlwYyA9IHBjICsgMQoKCQkJCWlmIG9wIDwgMTggdGhlbgoJCQkJCWlmIG9wIDwgOCB0aGVuCgkJCQkJCWlmIG9wIDwgMyB0aGVuCgkJCQkJCQlpZiBvcCA8IDEgdGhlbgoJCQkJCQkJCS0tW1tMT0FETklMXV0KCQkJCQkJCQlmb3IgaSA9IGluc3QuQSwgaW5zdC5CIGRvIG1lbW9yeVtpXSA9IG5pbCBlbmQKCQkJCQkJCWVsc2VpZiBvcCA+IDEgdGhlbgoJCQkJCQkJCS0tW1tHRVRVUFZBTF1dCgkJCQkJCQkJbG9jYWwgdXYgPSB1cHZhbHNbaW5zdC5CXQoKCQkJCQkJCQltZW1vcnlbaW5zdC5BXSA9IHV2LnN0b3JlW3V2LmluZGV4XQoJCQkJCQkJZWxzZQoJCQkJCQkJCS0tW1tBRERdXQoJCQkJCQkJCWxvY2FsIGxocywgcmhzCgoJCQkJCQkJCWlmIGluc3QuaXNfS0IgdGhlbgoJCQkJCQkJCQlsaHMgPSBpbnN0LmNvbnN0X0IKCQkJCQkJCQllbHNlCgkJCQkJCQkJCWxocyA9IG1lbW9yeVtpbnN0LkJdCgkJCQkJCQkJZW5kCgoJCQkJCQkJCWlmIGluc3QuaXNfS0MgdGhlbgoJCQkJCQkJCQlyaHMgPSBpbnN0LmNvbnN0X0MKCQkJCQkJCQllbHNlCgkJCQkJCQkJCXJocyA9IG1lbW9yeVtpbnN0LkNdCgkJCQkJCQkJZW5kCgoJCQkJCQkJCW1lbW9yeVtpbnN0LkFdID0gbGhzICsgcmhzCgkJCQkJCQllbmQKCQkJCQkJZWxzZWlmIG9wID4gMyB0aGVuCgkJCQkJCQlpZiBvcCA8IDYgdGhlbgoJCQkJCQkJCWlmIG9wID4gNCB0aGVuCgkJCQkJCQkJCS0tW1tTRUxGXV0KCQkJCQkJCQkJbG9jYWwgQSA9IGluc3QuQQoJCQkJCQkJCQlsb2NhbCBCID0gaW5zdC5CCgkJCQkJCQkJCWxvY2FsIGluZGV4CgoJCQkJCQkJCQlpZiBpbnN0LmlzX0tDIHRoZW4KCQkJCQkJCQkJCWluZGV4ID0gaW5zdC5jb25zdF9DCgkJCQkJCQkJCWVsc2UKCQkJCQkJCQkJCWluZGV4ID0gbWVtb3J5W2luc3QuQ10KCQkJCQkJCQkJZW5kCgoJCQkJCQkJCQltZW1vcnlbQSArIDFdID0gbWVtb3J5W0JdCgkJCQkJCQkJCW1lbW9yeVtBXSA9IG1lbW9yeVtCXVtpbmRleF0KCQkJCQkJCQllbHNlCgkJCQkJCQkJCS0tW1tHRVRHTE9CQUxdXQoJCQkJCQkJCQltZW1vcnlbaW5zdC5BXSA9IGVudltpbnN0LmNvbnN0XQoJCQkJCQkJCWVuZAoJCQkJCQkJZWxzZWlmIG9wID4gNiB0aGVuCgkJCQkJCQkJLS1bW0dFVFRBQkxFXV0KCQkJCQkJCQlsb2NhbCBpbmRleAoKCQkJCQkJCQlpZiBpbnN0LmlzX0tDIHRoZW4KCQkJCQkJCQkJaW5kZXggPSBpbnN0LmNvbnN0X0MKCQkJCQkJCQllbHNlCgkJCQkJCQkJCWluZGV4ID0gbWVtb3J5W2luc3QuQ10KCQkJCQkJCQllbmQKCgkJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBtZW1vcnlbaW5zdC5CXVtpbmRleF0KCQkJCQkJCWVsc2UKCQkJCQkJCQktLVtbU1VCXV0KCQkJCQkJCQlsb2NhbCBsaHMsIHJocwoKCQkJCQkJCQlpZiBpbnN0LmlzX0tCIHRoZW4KCQkJCQkJCQkJbGhzID0gaW5zdC5jb25zdF9CCgkJCQkJCQkJZWxzZQoJCQkJCQkJCQlsaHMgPSBtZW1vcnlbaW5zdC5CXQoJCQkJCQkJCWVuZAoKCQkJCQkJCQlpZiBpbnN0LmlzX0tDIHRoZW4KCQkJCQkJCQkJcmhzID0gaW5zdC5jb25zdF9DCgkJCQkJCQkJZWxzZQoJCQkJCQkJCQlyaHMgPSBtZW1vcnlbaW5zdC5DXQoJCQkJCQkJCWVuZAoKCQkJCQkJCQltZW1vcnlbaW5zdC5BXSA9IGxocyAtIHJocwoJCQkJCQkJZW5kCgkJCQkJCWVsc2UgLS1bW01PVkVdXQoJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBtZW1vcnlbaW5zdC5CXQoJCQkJCQllbmQKCQkJCQllbHNlaWYgb3AgPiA4IHRoZW4KCQkJCQkJaWYgb3AgPCAxMyB0aGVuCgkJCQkJCQlpZiBvcCA8IDEwIHRoZW4KCQkJCQkJCQktLVtbU0VUR0xPQkFMXV0KCQkJCQkJCQllbnZbaW5zdC5jb25zdF0gPSBtZW1vcnlbaW5zdC5BXQoJCQkJCQkJZWxzZWlmIG9wID4gMTAgdGhlbgoJCQkJCQkJCWlmIG9wIDwgMTIgdGhlbgoJCQkJCQkJCQktLVtbQ0FMTF1dCgkJCQkJCQkJCWxvY2FsIEEgPSBpbnN0LkEKCQkJCQkJCQkJbG9jYWwgQiA9IGluc3QuQgoJCQkJCQkJCQlsb2NhbCBDID0gaW5zdC5DCgkJCQkJCQkJCWxvY2FsIHBhcmFtcwoKCQkJCQkJCQkJaWYgQiA9PSAwIHRoZW4KCQkJCQkJCQkJCXBhcmFtcyA9IHRvcF9pbmRleCAtIEEKCQkJCQkJCQkJZWxzZQoJCQkJCQkJCQkJcGFyYW1zID0gQiAtIDEKCQkJCQkJCQkJZW5kCgoJCQkJCQkJCQlsb2NhbCByZXRfbGlzdCA9IHRhYmxlLnBhY2sobWVtb3J5W0FdKHRhYmxlLnVucGFjayhtZW1vcnksIEEgKyAxLCBBICsgcGFyYW1zKSkpCgkJCQkJCQkJCWxvY2FsIHJldF9udW0gPSByZXRfbGlzdC5uCgoJCQkJCQkJCQlpZiBDID09IDAgdGhlbgoJCQkJCQkJCQkJdG9wX2luZGV4ID0gQSArIHJldF9udW0gLSAxCgkJCQkJCQkJCWVsc2UKCQkJCQkJCQkJCXJldF9udW0gPSBDIC0gMQoJCQkJCQkJCQllbmQKCgkJCQkJCQkJCXRhYmxlLm1vdmUocmV0X2xpc3QsIDEsIHJldF9udW0sIEEsIG1lbW9yeSkKCQkJCQkJCQllbHNlCgkJCQkJCQkJCS0tW1tTRVRVUFZBTF1dCgkJCQkJCQkJCWxvY2FsIHV2ID0gdXB2YWxzW2luc3QuQl0KCgkJCQkJCQkJCXV2LnN0b3JlW3V2LmluZGV4XSA9IG1lbW9yeVtpbnN0LkFdCgkJCQkJCQkJZW5kCgkJCQkJCQllbHNlCgkJCQkJCQkJLS1bW01VTF1dCgkJCQkJCQkJbG9jYWwgbGhzLCByaHMKCgkJCQkJCQkJaWYgaW5zdC5pc19LQiB0aGVuCgkJCQkJCQkJCWxocyA9IGluc3QuY29uc3RfQgoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJbGhzID0gbWVtb3J5W2luc3QuQl0KCQkJCQkJCQllbmQKCgkJCQkJCQkJaWYgaW5zdC5pc19LQyB0aGVuCgkJCQkJCQkJCXJocyA9IGluc3QuY29uc3RfQwoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJcmhzID0gbWVtb3J5W2luc3QuQ10KCQkJCQkJCQllbmQKCgkJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBsaHMgKiByaHMKCQkJCQkJCWVuZAoJCQkJCQllbHNlaWYgb3AgPiAxMyB0aGVuCgkJCQkJCQlpZiBvcCA8IDE2IHRoZW4KCQkJCQkJCQlpZiBvcCA+IDE0IHRoZW4KCQkJCQkJCQkJLS1bW1RBSUxDQUxMXV0KCQkJCQkJCQkJbG9jYWwgQSA9IGluc3QuQQoJCQkJCQkJCQlsb2NhbCBCID0gaW5zdC5CCgkJCQkJCQkJCWxvY2FsIHBhcmFtcwoKCQkJCQkJCQkJaWYgQiA9PSAwIHRoZW4KCQkJCQkJCQkJCXBhcmFtcyA9IHRvcF9pbmRleCAtIEEKCQkJCQkJCQkJZWxzZQoJCQkJCQkJCQkJcGFyYW1zID0gQiAtIDEKCQkJCQkJCQkJZW5kCgoJCQkJCQkJCQljbG9zZV9sdWFfdXB2YWx1ZXMob3Blbl9saXN0LCAwKQoKCQkJCQkJCQkJcmV0dXJuIG1lbW9yeVtBXSh0YWJsZS51bnBhY2sobWVtb3J5LCBBICsgMSwgQSArIHBhcmFtcykpCgkJCQkJCQkJZWxzZQoJCQkJCQkJCQktLVtbU0VUVEFCTEVdXQoJCQkJCQkJCQlsb2NhbCBpbmRleCwgdmFsdWUKCgkJCQkJCQkJCWlmIGluc3QuaXNfS0IgdGhlbgoJCQkJCQkJCQkJaW5kZXggPSBpbnN0LmNvbnN0X0IKCQkJCQkJCQkJZWxzZQoJCQkJCQkJCQkJaW5kZXggPSBtZW1vcnlbaW5zdC5CXQoJCQkJCQkJCQllbmQKCgkJCQkJCQkJCWlmIGluc3QuaXNfS0MgdGhlbgoJCQkJCQkJCQkJdmFsdWUgPSBpbnN0LmNvbnN0X0MKCQkJCQkJCQkJZWxzZQoJCQkJCQkJCQkJdmFsdWUgPSBtZW1vcnlbaW5zdC5DXQoJCQkJCQkJCQllbmQKCgkJCQkJCQkJCW1lbW9yeVtpbnN0LkFdW2luZGV4XSA9IHZhbHVlCgkJCQkJCQkJZW5kCgkJCQkJCQllbHNlaWYgb3AgPiAxNiB0aGVuCgkJCQkJCQkJLS1bW05FV1RBQkxFXV0KCQkJCQkJCQltZW1vcnlbaW5zdC5BXSA9IHt9CgkJCQkJCQllbHNlCgkJCQkJCQkJLS1bW0RJVl1dCgkJCQkJCQkJbG9jYWwgbGhzLCByaHMKCgkJCQkJCQkJaWYgaW5zdC5pc19LQiB0aGVuCgkJCQkJCQkJCWxocyA9IGluc3QuY29uc3RfQgoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJbGhzID0gbWVtb3J5W2luc3QuQl0KCQkJCQkJCQllbmQKCgkJCQkJCQkJaWYgaW5zdC5pc19LQyB0aGVuCgkJCQkJCQkJCXJocyA9IGluc3QuY29uc3RfQwoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJcmhzID0gbWVtb3J5W2luc3QuQ10KCQkJCQkJCQllbmQKCgkJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBsaHMgLyByaHMKCQkJCQkJCWVuZAoJCQkJCQllbHNlCgkJCQkJCQktLVtbTE9BREtdXQoJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBpbnN0LmNvbnN0CgkJCQkJCWVuZAoJCQkJCWVsc2UKCQkJCQkJLS1bW0ZPUkxPT1BdXQoJCQkJCQlsb2NhbCBBID0gaW5zdC5BCgkJCQkJCWxvY2FsIHN0ZXAgPSBtZW1vcnlbQSArIDJdCgkJCQkJCWxvY2FsIGluZGV4ID0gbWVtb3J5W0FdICsgc3RlcAoJCQkJCQlsb2NhbCBsaW1pdCA9IG1lbW9yeVtBICsgMV0KCQkJCQkJbG9jYWwgbG9vcHMKCgkJCQkJCWlmIHN0ZXAgPT0gbWF0aC5hYnMoc3RlcCkgdGhlbgoJCQkJCQkJbG9vcHMgPSBpbmRleCA8PSBsaW1pdAoJCQkJCQllbHNlCgkJCQkJCQlsb29wcyA9IGluZGV4ID49IGxpbWl0CgkJCQkJCWVuZAoKCQkJCQkJaWYgbG9vcHMgdGhlbgoJCQkJCQkJbWVtb3J5W0FdID0gaW5kZXgKCQkJCQkJCW1lbW9yeVtBICsgM10gPSBpbmRleAoJCQkJCQkJcGMgPSBwYyArIGluc3Quc0J4CgkJCQkJCWVuZAoJCQkJCWVuZAoJCQkJZWxzZWlmIG9wID4gMTggdGhlbgoJCQkJCWlmIG9wIDwgMjggdGhlbgoJCQkJCQlpZiBvcCA8IDIzIHRoZW4KCQkJCQkJCWlmIG9wIDwgMjAgdGhlbgoJCQkJCQkJCS0tW1tMRU5dXQoJCQkJCQkJCW1lbW9yeVtpbnN0LkFdID0gI21lbW9yeVtpbnN0LkJdCgkJCQkJCQllbHNlaWYgb3AgPiAyMCB0aGVuCgkJCQkJCQkJaWYgb3AgPCAyMiB0aGVuCgkJCQkJCQkJCS0tW1tSRVRVUk5dXQoJCQkJCQkJCQlsb2NhbCBBID0gaW5zdC5BCgkJCQkJCQkJCWxvY2FsIEIgPSBpbnN0LkIKCQkJCQkJCQkJbG9jYWwgbGVuCgoJCQkJCQkJCQlpZiBCID09IDAgdGhlbgoJCQkJCQkJCQkJbGVuID0gdG9wX2luZGV4IC0gQSArIDEKCQkJCQkJCQkJZWxzZQoJCQkJCQkJCQkJbGVuID0gQiAtIDEKCQkJCQkJCQkJZW5kCgoJCQkJCQkJCQljbG9zZV9sdWFfdXB2YWx1ZXMob3Blbl9saXN0LCAwKQoKCQkJCQkJCQkJcmV0dXJuIHRhYmxlLnVucGFjayhtZW1vcnksIEEsIEEgKyBsZW4gLSAxKQoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJLS1bW0NPTkNBVF1dCgkJCQkJCQkJCWxvY2FsIEIgPSBpbnN0LkIKCQkJCQkJCQkJbG9jYWwgc3RyID0gbWVtb3J5W0JdCgoJCQkJCQkJCQlmb3IgaSA9IEIgKyAxLCBpbnN0LkMgZG8gc3RyID0gc3RyIC4uIG1lbW9yeVtpXSBlbmQKCgkJCQkJCQkJCW1lbW9yeVtpbnN0LkFdID0gc3RyCgkJCQkJCQkJZW5kCgkJCQkJCQllbHNlCgkJCQkJCQkJLS1bW01PRF1dCgkJCQkJCQkJbG9jYWwgbGhzLCByaHMKCgkJCQkJCQkJaWYgaW5zdC5pc19LQiB0aGVuCgkJCQkJCQkJCWxocyA9IGluc3QuY29uc3RfQgoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJbGhzID0gbWVtb3J5W2luc3QuQl0KCQkJCQkJCQllbmQKCgkJCQkJCQkJaWYgaW5zdC5pc19LQyB0aGVuCgkJCQkJCQkJCXJocyA9IGluc3QuY29uc3RfQwoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJcmhzID0gbWVtb3J5W2luc3QuQ10KCQkJCQkJCQllbmQKCgkJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBsaHMgJSByaHMKCQkJCQkJCWVuZAoJCQkJCQllbHNlaWYgb3AgPiAyMyB0aGVuCgkJCQkJCQlpZiBvcCA8IDI2IHRoZW4KCQkJCQkJCQlpZiBvcCA+IDI0IHRoZW4KCQkJCQkJCQkJLS1bW0NMT1NFXV0KCQkJCQkJCQkJY2xvc2VfbHVhX3VwdmFsdWVzKG9wZW5fbGlzdCwgaW5zdC5BKQoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJLS1bW0VRXV0KCQkJCQkJCQkJbG9jYWwgbGhzLCByaHMKCgkJCQkJCQkJCWlmIGluc3QuaXNfS0IgdGhlbgoJCQkJCQkJCQkJbGhzID0gaW5zdC5jb25zdF9CCgkJCQkJCQkJCWVsc2UKCQkJCQkJCQkJCWxocyA9IG1lbW9yeVtpbnN0LkJdCgkJCQkJCQkJCWVuZAoKCQkJCQkJCQkJaWYgaW5zdC5pc19LQyB0aGVuCgkJCQkJCQkJCQlyaHMgPSBpbnN0LmNvbnN0X0MKCQkJCQkJCQkJZWxzZQoJCQkJCQkJCQkJcmhzID0gbWVtb3J5W2luc3QuQ10KCQkJCQkJCQkJZW5kCgoJCQkJCQkJCQlpZiAobGhzID09IHJocykgPT0gKGluc3QuQSB+PSAwKSB0aGVuIHBjID0gcGMgKyBjb2RlW3BjXS5zQnggZW5kCgoJCQkJCQkJCQlwYyA9IHBjICsgMQoJCQkJCQkJCWVuZAoJCQkJCQkJZWxzZWlmIG9wID4gMjYgdGhlbgoJCQkJCQkJCS0tW1tMVF1dCgkJCQkJCQkJbG9jYWwgbGhzLCByaHMKCgkJCQkJCQkJaWYgaW5zdC5pc19LQiB0aGVuCgkJCQkJCQkJCWxocyA9IGluc3QuY29uc3RfQgoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJbGhzID0gbWVtb3J5W2luc3QuQl0KCQkJCQkJCQllbmQKCgkJCQkJCQkJaWYgaW5zdC5pc19LQyB0aGVuCgkJCQkJCQkJCXJocyA9IGluc3QuY29uc3RfQwoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJcmhzID0gbWVtb3J5W2luc3QuQ10KCQkJCQkJCQllbmQKCgkJCQkJCQkJaWYgKGxocyA8IHJocykgPT0gKGluc3QuQSB+PSAwKSB0aGVuIHBjID0gcGMgKyBjb2RlW3BjXS5zQnggZW5kCgoJCQkJCQkJCXBjID0gcGMgKyAxCgkJCQkJCQllbHNlCgkJCQkJCQkJLS1bW1BPV11dCgkJCQkJCQkJbG9jYWwgbGhzLCByaHMKCgkJCQkJCQkJaWYgaW5zdC5pc19LQiB0aGVuCgkJCQkJCQkJCWxocyA9IGluc3QuY29uc3RfQgoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJbGhzID0gbWVtb3J5W2luc3QuQl0KCQkJCQkJCQllbmQKCgkJCQkJCQkJaWYgaW5zdC5pc19LQyB0aGVuCgkJCQkJCQkJCXJocyA9IGluc3QuY29uc3RfQwoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJcmhzID0gbWVtb3J5W2luc3QuQ10KCQkJCQkJCQllbmQKCgkJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBsaHMgXiByaHMKCQkJCQkJCWVuZAoJCQkJCQllbHNlCgkJCQkJCQktLVtbTE9BREJPT0xdXQoJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBpbnN0LkIgfj0gMAoKCQkJCQkJCWlmIGluc3QuQyB+PSAwIHRoZW4gcGMgPSBwYyArIDEgZW5kCgkJCQkJCWVuZAoJCQkJCWVsc2VpZiBvcCA+IDI4IHRoZW4KCQkJCQkJaWYgb3AgPCAzMyB0aGVuCgkJCQkJCQlpZiBvcCA8IDMwIHRoZW4KCQkJCQkJCQktLVtbTEVdXQoJCQkJCQkJCWxvY2FsIGxocywgcmhzCgoJCQkJCQkJCWlmIGluc3QuaXNfS0IgdGhlbgoJCQkJCQkJCQlsaHMgPSBpbnN0LmNvbnN0X0IKCQkJCQkJCQllbHNlCgkJCQkJCQkJCWxocyA9IG1lbW9yeVtpbnN0LkJdCgkJCQkJCQkJZW5kCgoJCQkJCQkJCWlmIGluc3QuaXNfS0MgdGhlbgoJCQkJCQkJCQlyaHMgPSBpbnN0LmNvbnN0X0MKCQkJCQkJCQllbHNlCgkJCQkJCQkJCXJocyA9IG1lbW9yeVtpbnN0LkNdCgkJCQkJCQkJZW5kCgoJCQkJCQkJCWlmIChsaHMgPD0gcmhzKSA9PSAoaW5zdC5BIH49IDApIHRoZW4gcGMgPSBwYyArIGNvZGVbcGNdLnNCeCBlbmQKCgkJCQkJCQkJcGMgPSBwYyArIDEKCQkJCQkJCWVsc2VpZiBvcCA+IDMwIHRoZW4KCQkJCQkJCQlpZiBvcCA8IDMyIHRoZW4KCQkJCQkJCQkJLS1bW0NMT1NVUkVdXQoJCQkJCQkJCQlsb2NhbCBzdWIgPSBzdWJzW2luc3QuQnggKyAxXSAtLSBvZmZzZXQgZm9yIDEgYmFzZWQgaW5kZXgKCQkJCQkJCQkJbG9jYWwgbnVwcyA9IHN1Yi5udW1fdXB2YWwKCQkJCQkJCQkJbG9jYWwgdXZsaXN0CgoJCQkJCQkJCQlpZiBudXBzIH49IDAgdGhlbgoJCQkJCQkJCQkJdXZsaXN0ID0ge30KCgkJCQkJCQkJCQlmb3IgaSA9IDEsIG51cHMgZG8KCQkJCQkJCQkJCQlsb2NhbCBwc2V1ZG8gPSBjb2RlW3BjICsgaSAtIDFdCgoJCQkJCQkJCQkJCWlmIHBzZXVkby5vcCA9PSBPUENPREVfUk1bMF0gdGhlbiAtLSBATU9WRQoJCQkJCQkJCQkJCQl1dmxpc3RbaSAtIDFdID0gb3Blbl9sdWFfdXB2YWx1ZShvcGVuX2xpc3QsIHBzZXVkby5CLCBtZW1vcnkpCgkJCQkJCQkJCQkJZWxzZWlmIHBzZXVkby5vcCA9PSBPUENPREVfUk1bNF0gdGhlbiAtLSBAR0VUVVBWQUwKCQkJCQkJCQkJCQkJdXZsaXN0W2kgLSAxXSA9IHVwdmFsc1twc2V1ZG8uQl0KCQkJCQkJCQkJCQllbmQKCQkJCQkJCQkJCWVuZAoKCQkJCQkJCQkJCXBjID0gcGMgKyBudXBzCgkJCQkJCQkJCWVuZAoKCQkJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBsdWFfd3JhcF9zdGF0ZShzdWIsIGVudiwgdXZsaXN0KQoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJLS1bW1RFU1RTRVRdXQoJCQkJCQkJCQlsb2NhbCBBID0gaW5zdC5BCgkJCQkJCQkJCWxvY2FsIEIgPSBpbnN0LkIKCgkJCQkJCQkJCWlmIChub3QgbWVtb3J5W0JdKSB+PSAoaW5zdC5DIH49IDApIHRoZW4KCQkJCQkJCQkJCW1lbW9yeVtBXSA9IG1lbW9yeVtCXQoJCQkJCQkJCQkJcGMgPSBwYyArIGNvZGVbcGNdLnNCeAoJCQkJCQkJCQllbmQKCQkJCQkJCQkJcGMgPSBwYyArIDEKCQkJCQkJCQllbmQKCQkJCQkJCWVsc2UKCQkJCQkJCQktLVtbVU5NXV0KCQkJCQkJCQltZW1vcnlbaW5zdC5BXSA9IC1tZW1vcnlbaW5zdC5CXQoJCQkJCQkJZW5kCgkJCQkJCWVsc2VpZiBvcCA+IDMzIHRoZW4KCQkJCQkJCWlmIG9wIDwgMzYgdGhlbgoJCQkJCQkJCWlmIG9wID4gMzQgdGhlbgoJCQkJCQkJCQktLVtbVkFSQVJHXV0KCQkJCQkJCQkJbG9jYWwgQSA9IGluc3QuQQoJCQkJCQkJCQlsb2NhbCBsZW4gPSBpbnN0LkIKCgkJCQkJCQkJCWlmIGxlbiA9PSAwIHRoZW4KCQkJCQkJCQkJCWxlbiA9IHZhcmFyZy5sZW4KCQkJCQkJCQkJCXRvcF9pbmRleCA9IEEgKyBsZW4gLSAxCgkJCQkJCQkJCWVuZAoKCQkJCQkJCQkJdGFibGUubW92ZSh2YXJhcmcubGlzdCwgMSwgbGVuLCBBLCBtZW1vcnkpCgkJCQkJCQkJZWxzZQoJCQkJCQkJCQktLVtbRk9SUFJFUF1dCgkJCQkJCQkJCWxvY2FsIEEgPSBpbnN0LkEKCQkJCQkJCQkJbG9jYWwgaW5pdCwgbGltaXQsIHN0ZXAKCgkJCQkJCQkJCWluaXQgPSBhc3NlcnQodG9udW1iZXIobWVtb3J5W0FdKSwgJ2Bmb3JgIGluaXRpYWwgdmFsdWUgbXVzdCBiZSBhIG51bWJlcicpCgkJCQkJCQkJCWxpbWl0ID0gYXNzZXJ0KHRvbnVtYmVyKG1lbW9yeVtBICsgMV0pLCAnYGZvcmAgbGltaXQgbXVzdCBiZSBhIG51bWJlcicpCgkJCQkJCQkJCXN0ZXAgPSBhc3NlcnQodG9udW1iZXIobWVtb3J5W0EgKyAyXSksICdgZm9yYCBzdGVwIG11c3QgYmUgYSBudW1iZXInKQoKCQkJCQkJCQkJbWVtb3J5W0FdID0gaW5pdCAtIHN0ZXAKCQkJCQkJCQkJbWVtb3J5W0EgKyAxXSA9IGxpbWl0CgkJCQkJCQkJCW1lbW9yeVtBICsgMl0gPSBzdGVwCgoJCQkJCQkJCQlwYyA9IHBjICsgaW5zdC5zQngKCQkJCQkJCQllbmQKCQkJCQkJCWVsc2VpZiBvcCA+IDM2IHRoZW4KCQkJCQkJCQktLVtbU0VUTElTVF1dCgkJCQkJCQkJbG9jYWwgQSA9IGluc3QuQQoJCQkJCQkJCWxvY2FsIEMgPSBpbnN0LkMKCQkJCQkJCQlsb2NhbCBsZW4gPSBpbnN0LkIKCQkJCQkJCQlsb2NhbCB0YWIgPSBtZW1vcnlbQV0KCQkJCQkJCQlsb2NhbCBvZmZzZXQKCgkJCQkJCQkJaWYgbGVuID09IDAgdGhlbiBsZW4gPSB0b3BfaW5kZXggLSBBIGVuZAoKCQkJCQkJCQlpZiBDID09IDAgdGhlbgoJCQkJCQkJCQlDID0gaW5zdFtwY10udmFsdWUKCQkJCQkJCQkJcGMgPSBwYyArIDEKCQkJCQkJCQllbmQKCgkJCQkJCQkJb2Zmc2V0ID0gKEMgLSAxKSAqIEZJRUxEU19QRVJfRkxVU0gKCgkJCQkJCQkJdGFibGUubW92ZShtZW1vcnksIEEgKyAxLCBBICsgbGVuLCBvZmZzZXQgKyAxLCB0YWIpCgkJCQkJCQllbHNlCgkJCQkJCQkJLS1bW05PVF1dCgkJCQkJCQkJbWVtb3J5W2luc3QuQV0gPSBub3QgbWVtb3J5W2luc3QuQl0KCQkJCQkJCWVuZAoJCQkJCQllbHNlCgkJCQkJCQktLVtbVEVTVF1dCgkJCQkJCQlpZiAobm90IG1lbW9yeVtpbnN0LkFdKSB+PSAoaW5zdC5DIH49IDApIHRoZW4gcGMgPSBwYyArIGNvZGVbcGNdLnNCeCBlbmQKCQkJCQkJCXBjID0gcGMgKyAxCgkJCQkJCWVuZAoJCQkJCWVsc2UKCQkJCQkJLS1bW1RGT1JMT09QXV0KCQkJCQkJbG9jYWwgQSA9IGluc3QuQQoJCQkJCQlsb2NhbCBiYXNlID0gQSArIDMKCgkJCQkJCWxvY2FsIHZhbHMgPSB7bWVtb3J5W0FdKG1lbW9yeVtBICsgMV0sIG1lbW9yeVtBICsgMl0pfQoKCQkJCQkJdGFibGUubW92ZSh2YWxzLCAxLCBpbnN0LkMsIGJhc2UsIG1lbW9yeSkKCgkJCQkJCWlmIG1lbW9yeVtiYXNlXSB+PSBuaWwgdGhlbgoJCQkJCQkJbWVtb3J5W0EgKyAyXSA9IG1lbW9yeVtiYXNlXQoJCQkJCQkJcGMgPSBwYyArIGNvZGVbcGNdLnNCeAoJCQkJCQllbmQKCgkJCQkJCXBjID0gcGMgKyAxCgkJCQkJZW5kCgkJCQllbHNlCgkJCQkJLS1bW0pNUF1dCgkJCQkJcGMgPSBwYyArIGluc3Quc0J4CgkJCQllbmQKCgkJCQlzdGF0ZS5wYyA9IHBjCgkJCWVuZAoJCWVuZAoKCQlmdW5jdGlvbiBsdWFfd3JhcF9zdGF0ZShwcm90bywgZW52LCB1cHZhbCkKCQkJbG9jYWwgZnVuY3Rpb24gd3JhcHBlZCguLi4pCgkJCQlsb2NhbCBwYXNzZWQgPSB0YWJsZS5wYWNrKC4uLikKCQkJCWxvY2FsIG1lbW9yeSA9IHRhYmxlLmNyZWF0ZShwcm90by5tYXhfc3RhY2spCgkJCQlsb2NhbCB2YXJhcmcgPSB7bGVuID0gMCwgbGlzdCA9IHt9fQoKCQkJCXRhYmxlLm1vdmUocGFzc2VkLCAxLCBwcm90by5udW1fcGFyYW0sIDAsIG1lbW9yeSkKCgkJCQlpZiBwcm90by5udW1fcGFyYW0gPCBwYXNzZWQubiB0aGVuCgkJCQkJbG9jYWwgc3RhcnQgPSBwcm90by5udW1fcGFyYW0gKyAxCgkJCQkJbG9jYWwgbGVuID0gcGFzc2VkLm4gLSBwcm90by5udW1fcGFyYW0KCgkJCQkJdmFyYXJnLmxlbiA9IGxlbgoJCQkJCXRhYmxlLm1vdmUocGFzc2VkLCBzdGFydCwgc3RhcnQgKyBsZW4gLSAxLCAxLCB2YXJhcmcubGlzdCkKCQkJCWVuZAoKCQkJCWxvY2FsIHN0YXRlID0ge3ZhcmFyZyA9IHZhcmFyZywgbWVtb3J5ID0gbWVtb3J5LCBjb2RlID0gcHJvdG8uY29kZSwgc3VicyA9IHByb3RvLnN1YnMsIHBjID0gMX0KCgkJCQlsb2NhbCByZXN1bHQgPSB0YWJsZS5wYWNrKHBjYWxsKHJ1bl9sdWFfZnVuYywgc3RhdGUsIGVudiwgdXB2YWwpKQoKCQkJCWlmIHJlc3VsdFsxXSB0aGVuCgkJCQkJcmV0dXJuIHRhYmxlLnVucGFjayhyZXN1bHQsIDIsIHJlc3VsdC5uKQoJCQkJZWxzZQoJCQkJCWxvY2FsIGZhaWxlZCA9IHtwYyA9IHN0YXRlLnBjLCBzb3VyY2UgPSBwcm90by5zb3VyY2UsIGxpbmVzID0gcHJvdG8ubGluZXN9CgoJCQkJCW9uX2x1YV9lcnJvcihmYWlsZWQsIHJlc3VsdFsyXSkKCgkJCQkJcmV0dXJuCgkJCQllbmQKCQkJZW5kCgoJCQlyZXR1cm4gd3JhcHBlZAoJCWVuZAoKCQlyZXR1cm4gZnVuY3Rpb24oYkNvZGUsIGVudikKCQkJcmV0dXJuIGx1YV93cmFwX3N0YXRlKGx1YV9iY190b19zdGF0ZShiQ29kZSksIGVudiBvciBnZXRmZW52KDApKQoJCWVuZAoJZW5kKSgpCgktLWdldGZlbnYoKS5zY3JpcHQgPSBuaWwKCglyZXR1cm4gZnVuY3Rpb24oc291cmNlLCBlbnYpCgkJbG9jYWwgZXhlY3V0YWJsZQoJCWxvY2FsIGVudiA9IGVudiBvciBnZXRmZW52KDIpCgkJbG9jYWwgcmFuLCBmYWlsdXJlUmVhc29uID0gcGNhbGwoZnVuY3Rpb24oKQoJCQlsb2NhbCBjb21waWxlZEJ5dGVjb2RlID0gY29tcGlsZShzb3VyY2UsICAic2hnMzQwOTM0cWgiKQoJCQlleGVjdXRhYmxlID0gY3JlYXRlRXhlY3V0YWJsZShjb21waWxlZEJ5dGVjb2RlLCBlbnYpCgkJZW5kKQoKCQlpZiByYW4gdGhlbgoJCQlyZXR1cm4gc2V0ZmVudihleGVjdXRhYmxlLCBlbnYpCgkJZW5kCgkJcmV0dXJuIG5pbCwgZmFpbHVyZVJlYXNvbgoJZW5kCmVuZCkoKQoKbG9jYWwgdXRpbHMgPSB7fQoKdXRpbHMuc3RyaW5nX3RvX2hleCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQsIHNlcGVyYXRvcikKCW9mZnNldCA9IG9mZnNldCBvciAyMjcKCXNlcGVyYXRvciA9IHNlcGVyYXRvciBvciAiIgoKCXJldHVybiBzdHJpbmcuZ3N1Yih2YWx1ZSwgIi4iLCBmdW5jdGlvbihjaGFyKQoJCXJldHVybiBzdHJpbmcuZm9ybWF0KCIlMDJYIiwgc3RyaW5nLmJ5dGUoY2hhcikgKiBvZmZzZXQpIC4uIHNlcGVyYXRvcgoJZW5kKQplbmQKCnV0aWxzLmhleF90b19zdHJpbmcgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KQoJb2Zmc2V0ID0gb2Zmc2V0IG9yIDEKCglyZXR1cm4gc3RyaW5nLmdzdWIodmFsdWUsICIuLiIsIGZ1bmN0aW9uKGNoYXIpCgkJcmV0dXJuIHRvbnVtYmVyKGNoYXIsIDE2KTo6IG51bWJlciAvIDEKCWVuZCkKZW5kCgpsb2NhbCBJTlRnZXRsb2FkZWRtb2R1bGVzID0gZnVuY3Rpb24oKSAtLW1ha2UgTk8gcmVmZXJlbmNlIGluIGVudiBvciB0aGV5IGNhbiBnZXQgYSB1bndyYXBwZWQgdmVyc2lvbiBvZiBzaGl0Cglsb2NhbCB0YWIgPSB0YWJsZS5jcmVhdGUoMCkKCWZvciBpLCB2IGluIHBhaXJzKGdhbWU6R2V0RGVzY2VuZGFudHMoKSkgZG8KCQlpZiB2LkNsYXNzTmFtZSA9PSAiTW9kdWxlU2NyaXB0IiB0aGVuCgkJCXRhYmxlLmluc2VydCh0YWIsdikKCQllbmQKCWVuZAoJcmV0dXJuIHRhYgplbmQKCnV0aWxzLmZldGNoX21vZHVsZXMgPSBJTlRnZXRsb2FkZWRtb2R1bGVzCgp1dGlscy5iYXNlNjRfZW5jb2RlID0gZnVuY3Rpb24oZGF0YSkKCWxvY2FsIGxldHRlcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycKCXJldHVybiAoKGRhdGE6Z3N1YignLicsIGZ1bmN0aW9uKHgpIAoJCWxvY2FsIHIsYj0nJyx4OmJ5dGUoKQoJCWZvciBpPTgsMSwtMSBkbyByPXIuLihiJTJeaS1iJTJeKGktMSk+MCBhbmQgJzEnIG9yICcwJykgZW5kCgkJcmV0dXJuIHI7CgllbmQpLi4nMDAwMCcpOmdzdWIoJyVkJWQlZD8lZD8lZD8lZD8nLCBmdW5jdGlvbih4KQoJCWlmICgjeCA8IDYpIHRoZW4gcmV0dXJuICcnIGVuZAoJCWxvY2FsIGM9MAoJCWZvciBpPTEsNiBkbyBjPWMrKHg6c3ViKGksaSk9PScxJyBhbmQgMl4oNi1pKSBvciAwKSBlbmQKCQlyZXR1cm4gbGV0dGVyczpzdWIoYysxLGMrMSkKCWVuZCkuLih7ICcnLCAnPT0nLCAnPScgfSlbI2RhdGElMysxXSkKZW5kCnV0aWxzLmJhc2U2NF9kZWNvZGUgPSBmdW5jdGlvbihkYXRhKQoJbG9jYWwgYiA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJwoJZGF0YSA9IHN0cmluZy5nc3ViKGRhdGEsICdbXicuLmIuLic9XScsICcnKQoJcmV0dXJuIChkYXRhOmdzdWIoJy4nLCBmdW5jdGlvbih4KQoJCWlmIHggPT0gJz0nIHRoZW4gcmV0dXJuICcnIGVuZAoJCWxvY2FsIHIsIGYgPSAnJywgKGI6ZmluZCh4KSAtIDEpCgkJZm9yIGkgPSA2LCAxLCAtMSBkbwoJCQlyID0gciAuLiAoZiAlIDJeaSAtIGYgJSAyXihpIC0gMSkgPiAwIGFuZCAnMScgb3IgJzAnKQoJCWVuZAoJCXJldHVybiByOwoJZW5kKTpnc3ViKCclZCVkJWQ/JWQ/JWQ/JWQ/JWQ/JWQ/JywgZnVuY3Rpb24oeCkKCQlpZiAjeCB+PSA4IHRoZW4gcmV0dXJuICcnIGVuZAoJCWxvY2FsIGMgPSAwCgkJZm9yIGkgPSAxLCA4IGRvCgkJCWMgPSBjICsgKHg6c3ViKGksIGkpID09ICcxJyBhbmQgMl4oOCAtIGkpIG9yIDApCgkJZW5kCgkJcmV0dXJuIHN0cmluZy5jaGFyKGMpCgllbmQpKQplbmQKCmxvY2FsIGx6NCA9IHt9Cgp0eXBlIFN0cmVhbWVyID0gewoJT2Zmc2V0OiBudW1iZXIsCglTb3VyY2U6IHN0cmluZywKCUxlbmd0aDogbnVtYmVyLAoJSXNGaW5pc2hlZDogYm9vbGVhbiwKCUxhc3RVbnJlYWRCeXRlczogbnVtYmVyLAoKCXJlYWQ6IChTdHJlYW1lciwgbGVuOiBudW1iZXI/LCBzaGlmdE9mZnNldDogYm9vbGVhbj8pIC0+IHN0cmluZywKCXNlZWs6IChTdHJlYW1lciwgbGVuOiBudW1iZXIpIC0+ICgpLAoJYXBwZW5kOiAoU3RyZWFtZXIsIG5ld0RhdGE6IHN0cmluZykgLT4gKCksCgl0b0VuZDogKFN0cmVhbWVyKSAtPiAoKQp9Cgp0eXBlIEJsb2NrRGF0YSA9IHsKCVtudW1iZXJdOiB7CgkJTGl0ZXJhbDogc3RyaW5nLAoJCUxpdGVyYWxMZW5ndGg6IG51bWJlciwKCQlNYXRjaE9mZnNldDogbnVtYmVyPywKCQlNYXRjaExlbmd0aDogbnVtYmVyPwoJfQp9Cgpsb2NhbCBmdW5jdGlvbiBwbGFpbkZpbmQoc3RyLCBwYXQpCglyZXR1cm4gc3RyaW5nLmZpbmQoc3RyLCBwYXQsIDAsIHRydWUpCmVuZAoKbG9jYWwgZnVuY3Rpb24gc3RyZWFtZXIoc3RyKTogU3RyZWFtZXIKCWxvY2FsIFN0cmVhbSA9IHt9CglTdHJlYW0uT2Zmc2V0ID0gMAoJU3RyZWFtLlNvdXJjZSA9IHN0cgoJU3RyZWFtLkxlbmd0aCA9IHN0cmluZy5sZW4oc3RyKQoJU3RyZWFtLklzRmluaXNoZWQgPSBmYWxzZQkKCVN0cmVhbS5MYXN0VW5yZWFkQnl0ZXMgPSAwCgoJZnVuY3Rpb24gU3RyZWFtLnJlYWQoc2VsZjogU3RyZWFtZXIsIGxlbjogbnVtYmVyPywgc2hpZnQ6IGJvb2xlYW4/KTogc3RyaW5nCgkJbG9jYWwgbGVuID0gbGVuIG9yIDEKCQlsb2NhbCBzaGlmdCA9IGlmIHNoaWZ0IH49IG5pbCB0aGVuIHNoaWZ0IGVsc2UgdHJ1ZQoJCWxvY2FsIGRhdCA9IHN0cmluZy5zdWIoc2VsZi5Tb3VyY2UsIHNlbGYuT2Zmc2V0ICsgMSwgc2VsZi5PZmZzZXQgKyBsZW4pCgoJCWxvY2FsIGRhdGFMZW5ndGggPSBzdHJpbmcubGVuKGRhdCkKCQlsb2NhbCB1bnJlYWRCeXRlcyA9IGxlbiAtIGRhdGFMZW5ndGgKCgkJaWYgc2hpZnQgdGhlbgoJCQlzZWxmOnNlZWsobGVuKQoJCWVuZAoKCQlzZWxmLkxhc3RVbnJlYWRCeXRlcyA9IHVucmVhZEJ5dGVzCgkJcmV0dXJuIGRhdAoJZW5kCgoJZnVuY3Rpb24gU3RyZWFtLnNlZWsoc2VsZjogU3RyZWFtZXIsIGxlbjogbnVtYmVyKQoJCWxvY2FsIGxlbiA9IGxlbiBvciAxCgoJCXNlbGYuT2Zmc2V0ID0gbWF0aC5jbGFtcChzZWxmLk9mZnNldCArIGxlbiwgMCwgc2VsZi5MZW5ndGgpCgkJc2VsZi5Jc0ZpbmlzaGVkID0gc2VsZi5PZmZzZXQgPj0gc2VsZi5MZW5ndGgKCWVuZAoKCWZ1bmN0aW9uIFN0cmVhbS5hcHBlbmQoc2VsZjogU3RyZWFtZXIsIG5ld0RhdGE6IHN0cmluZykKCQktLSBhZGRzIG5ldyBkYXRhIHRvIHRoZSBlbmQgb2YgYSBzdHJlYW0KCQlzZWxmLlNvdXJjZSAuLj0gbmV3RGF0YQoJCXNlbGYuTGVuZ3RoID0gc3RyaW5nLmxlbihzZWxmLlNvdXJjZSkKCQlzZWxmOnNlZWsoMCkgLS1oYWNreSBidXQgZm9yY2VzIGEgcmVjYWxjdWxhdGlvbiBvZiB0aGUgaXNGaW5pc2hlZCBmbGFnCgllbmQKCglmdW5jdGlvbiBTdHJlYW0udG9FbmQoc2VsZjogU3RyZWFtZXIpCgkJc2VsZjpzZWVrKHNlbGYuTGVuZ3RoKQoJZW5kCgoJcmV0dXJuIFN0cmVhbQplbmQKCmZ1bmN0aW9uIGx6NC5jb21wcmVzcyhzdHI6IHN0cmluZyk6IHN0cmluZwoJbG9jYWwgYmxvY2tzOiBCbG9ja0RhdGEgPSB7fQoJbG9jYWwgaW9zdHJlYW0gPSBzdHJlYW1lcihzdHIpCgoJaWYgaW9zdHJlYW0uTGVuZ3RoID4gMTIgdGhlbgoJCWxvY2FsIGZpcnN0Rm91ciA9IGlvc3RyZWFtOnJlYWQoNCkKCgkJbG9jYWwgcHJvY2Vzc2VkID0gZmlyc3RGb3VyCgkJbG9jYWwgbGl0ID0gZmlyc3RGb3VyCgkJbG9jYWwgbWF0Y2ggPSAiIgoJCWxvY2FsIExpdGVyYWxQdXNoVmFsdWUgPSAiIgoJCWxvY2FsIHB1c2hUb0xpdGVyYWwgPSB0cnVlCgoJCXJlcGVhdAoJCQlwdXNoVG9MaXRlcmFsID0gdHJ1ZQoJCQlsb2NhbCBuZXh0Qnl0ZSA9IGlvc3RyZWFtOnJlYWQoKQoKCQkJaWYgcGxhaW5GaW5kKHByb2Nlc3NlZCwgbmV4dEJ5dGUpIHRoZW4KCQkJCWxvY2FsIG5leHQzID0gaW9zdHJlYW06cmVhZCgzLCBmYWxzZSkKCgkJCQlpZiBzdHJpbmcubGVuKG5leHQzKSA8IDMgdGhlbgoJCQkJCS0tcHVzaCBieXRlcyB0byBsaXRlcmFsIGJsb2NrIHRoZW4gYnJlYWsKCQkJCQlMaXRlcmFsUHVzaFZhbHVlID0gbmV4dEJ5dGUgLi4gbmV4dDMKCQkJCQlpb3N0cmVhbTpzZWVrKDMpCgkJCQllbHNlCgkJCQkJbWF0Y2ggPSBuZXh0Qnl0ZSAuLiBuZXh0MwoKCQkJCQlsb2NhbCBtYXRjaFBvcyA9IHBsYWluRmluZChwcm9jZXNzZWQsIG1hdGNoKQoJCQkJCWlmIG1hdGNoUG9zIHRoZW4KCQkJCQkJaW9zdHJlYW06c2VlaygzKQoJCQkJCQlyZXBlYXQKCQkJCQkJCWxvY2FsIG5leHRNYXRjaEJ5dGUgPSBpb3N0cmVhbTpyZWFkKDEsIGZhbHNlKQoJCQkJCQkJbG9jYWwgbmV3UmVzdWx0ID0gbWF0Y2ggLi4gbmV4dE1hdGNoQnl0ZQoKCQkJCQkJCWxvY2FsIHJlcG9zID0gcGxhaW5GaW5kKHByb2Nlc3NlZCwgbmV3UmVzdWx0KSAKCQkJCQkJCWlmIHJlcG9zIHRoZW4KCQkJCQkJCQltYXRjaCA9IG5ld1Jlc3VsdAoJCQkJCQkJCW1hdGNoUG9zID0gcmVwb3MKCQkJCQkJCQlpb3N0cmVhbTpzZWVrKDEpCgkJCQkJCQllbmQKCQkJCQkJdW50aWwgbm90IHBsYWluRmluZChwcm9jZXNzZWQsIG5ld1Jlc3VsdCkgb3IgaW9zdHJlYW0uSXNGaW5pc2hlZAoKCQkJCQkJbG9jYWwgbWF0Y2hMZW4gPSBzdHJpbmcubGVuKG1hdGNoKQoJCQkJCQlsb2NhbCBwdXNoTWF0Y2ggPSB0cnVlCgoJCQkJCQlpZiBpb3N0cmVhbS5MZW5ndGggLSBpb3N0cmVhbS5PZmZzZXQgPD0gNSB0aGVuCgkJCQkJCQlMaXRlcmFsUHVzaFZhbHVlID0gbWF0Y2gKCQkJCQkJCXB1c2hNYXRjaCA9IGZhbHNlCgkJCQkJCQktLWJldHRlciBzYWZlIGhlcmUsIGRvbnQgYm90aGVyIHB1c2hpbmcgdG8gbWF0Y2ggZXZlcgoJCQkJCQllbmQKCgkJCQkJCWlmIHB1c2hNYXRjaCB0aGVuCgkJCQkJCQlwdXNoVG9MaXRlcmFsID0gZmFsc2UKCgkJCQkJCQktLSBnZXRzIHRoZSBwb3NpdGlvbiBmcm9tIHRoZSBlbmQgb2YgcHJvY2Vzc2VkLCB0aGVuIHNsYXBzIGl0IG9udG8gcHJvY2Vzc2VkCgkJCQkJCQlsb2NhbCByZWFsUG9zaXRpb24gPSBzdHJpbmcubGVuKHByb2Nlc3NlZCkgLSBtYXRjaFBvcwoJCQkJCQkJcHJvY2Vzc2VkID0gcHJvY2Vzc2VkIC4uIG1hdGNoCgoJCQkJCQkJdGFibGUuaW5zZXJ0KGJsb2NrcywgewoJCQkJCQkJCUxpdGVyYWwgPSBsaXQsCgkJCQkJCQkJTGl0ZXJhbExlbmd0aCA9IHN0cmluZy5sZW4obGl0KSwKCQkJCQkJCQlNYXRjaE9mZnNldCA9IHJlYWxQb3NpdGlvbiArIDEsCgkJCQkJCQkJTWF0Y2hMZW5ndGggPSBtYXRjaExlbiwKCQkJCQkJCX0pCgkJCQkJCQlsaXQgPSAiIgoJCQkJCQllbmQKCQkJCQllbHNlCgkJCQkJCUxpdGVyYWxQdXNoVmFsdWUgPSBuZXh0Qnl0ZQoJCQkJCWVuZAoJCQkJZW5kCgkJCWVsc2UKCQkJCUxpdGVyYWxQdXNoVmFsdWUgPSBuZXh0Qnl0ZQoJCQllbmQKCgkJCWlmIHB1c2hUb0xpdGVyYWwgdGhlbgoJCQkJbGl0ID0gbGl0IC4uIExpdGVyYWxQdXNoVmFsdWUKCQkJCXByb2Nlc3NlZCA9IHByb2Nlc3NlZCAuLiBuZXh0Qnl0ZQoJCQllbmQKCQl1bnRpbCBpb3N0cmVhbS5Jc0ZpbmlzaGVkCgkJdGFibGUuaW5zZXJ0KGJsb2NrcywgewoJCQlMaXRlcmFsID0gbGl0LAoJCQlMaXRlcmFsTGVuZ3RoID0gc3RyaW5nLmxlbihsaXQpCgkJfSkKCWVsc2UKCQlsb2NhbCBzdHIgPSBpb3N0cmVhbS5Tb3VyY2UKCQlibG9ja3NbMV0gPSB7CgkJCUxpdGVyYWwgPSBzdHIsCgkJCUxpdGVyYWxMZW5ndGggPSBzdHJpbmcubGVuKHN0cikKCQl9CgllbmQKCgktLSBnZW5lcmF0ZSB0aGUgb3V0cHV0IGNodW5rCgktLSAlcyBpcyBmb3IgYWRkaW5nIGhlYWRlcgoJbG9jYWwgb3V0cHV0ID0gc3RyaW5nLnJlcCgiXHgwMCIsIDQpCglsb2NhbCBmdW5jdGlvbiB3cml0ZShjaGFyKQoJCW91dHB1dCA9IG91dHB1dCAuLiBjaGFyCgllbmQKCS0tIGJlZ2luIHdvcmtpbmcgdGhyb3VnaCBjaHVua3MKCWZvciBjaHVua051bSwgY2h1bmsgaW4gYmxvY2tzIGRvCgkJbG9jYWwgbGl0TGVuID0gY2h1bmsuTGl0ZXJhbExlbmd0aAoJCWxvY2FsIG1hdExlbiA9IChjaHVuay5NYXRjaExlbmd0aCBvciA0KSAtIDQKCgkJLS0gY3JlYXRlIHRva2VuCgkJbG9jYWwgdG9rZW5MaXQgPSBtYXRoLmNsYW1wKGxpdExlbiwgMCwgMTUpCgkJbG9jYWwgdG9rZW5NYXQgPSBtYXRoLmNsYW1wKG1hdExlbiwgMCwgMTUpCgoJCWxvY2FsIHRva2VuID0gYml0MzIubHNoaWZ0KHRva2VuTGl0LCA0KSArIHRva2VuTWF0CgkJd3JpdGUoc3RyaW5nLnBhY2soIjxJMSIsIHRva2VuKSkKCgkJaWYgbGl0TGVuID49IDE1IHRoZW4KCQkJbGl0TGVuID0gbGl0TGVuIC0gMTUKCQkJLS1iZWdpbiBwYWNraW5nIGV4dHJhIGJ5dGVzCgkJCXJlcGVhdAoJCQkJbG9jYWwgbmV4dFRva2VuID0gbWF0aC5jbGFtcChsaXRMZW4sIDAsIDB4RkYpCgkJCQl3cml0ZShzdHJpbmcucGFjaygiPEkxIiwgbmV4dFRva2VuKSkKCQkJCWlmIG5leHRUb2tlbiA9PSAweEZGIHRoZW4KCQkJCQlsaXRMZW4gPSBsaXRMZW4gLSAyNTUKCQkJCWVuZAoJCQl1bnRpbCBuZXh0VG9rZW4gPCAweEZGCgkJZW5kCgoJCS0tIHB1c2ggcmF3IGxpdCBkYXRhCgkJd3JpdGUoY2h1bmsuTGl0ZXJhbCkKCgkJaWYgY2h1bmtOdW0gfj0gI2Jsb2NrcyB0aGVuCgkJCS0tIHB1c2ggb2Zmc2V0IGFzIHUxNgoJCQl3cml0ZShzdHJpbmcucGFjaygiPEkyIiwgY2h1bmsuTWF0Y2hPZmZzZXQpKQoKCQkJLS0gcGFjayBleHRyYSBtYXRjaCBieXRlcwoJCQlpZiBtYXRMZW4gPj0gMTUgdGhlbgoJCQkJbWF0TGVuID0gbWF0TGVuIC0gMTUKCgkJCQlyZXBlYXQKCQkJCQlsb2NhbCBuZXh0VG9rZW4gPSBtYXRoLmNsYW1wKG1hdExlbiwgMCwgMHhGRikKCQkJCQl3cml0ZShzdHJpbmcucGFjaygiPEkxIiwgbmV4dFRva2VuKSkKCQkJCQlpZiBuZXh0VG9rZW4gPT0gMHhGRiB0aGVuCgkJCQkJCW1hdExlbiA9IG1hdExlbiAtIDI1NQoJCQkJCWVuZAoJCQkJdW50aWwgbmV4dFRva2VuIDwgMHhGRgoJCQllbmQKCQllbmQKCWVuZAoJLS1hcHBlbmQgY2h1bmtzCglsb2NhbCBjb21wTGVuID0gc3RyaW5nLmxlbihvdXRwdXQpIC0gNAoJbG9jYWwgZGVjb21wTGVuID0gaW9zdHJlYW0uTGVuZ3RoCgoJcmV0dXJuIHN0cmluZy5wYWNrKCI8STQiLCBjb21wTGVuKSAuLiBzdHJpbmcucGFjaygiPEk0IiwgZGVjb21wTGVuKSAuLiBvdXRwdXQKZW5kCgpmdW5jdGlvbiBsejQuZGVjb21wcmVzcyhsejRkYXRhOiBzdHJpbmcpOiBzdHJpbmcKCWxvY2FsIGlucHV0U3RyZWFtID0gc3RyZWFtZXIobHo0ZGF0YSkKCglsb2NhbCBjb21wcmVzc2VkTGVuID0gc3RyaW5nLnVucGFjaygiPEk0IiwgaW5wdXRTdHJlYW06cmVhZCg0KSkKCWxvY2FsIGRlY29tcHJlc3NlZExlbiA9IHN0cmluZy51bnBhY2soIjxJNCIsIGlucHV0U3RyZWFtOnJlYWQoNCkpCglsb2NhbCByZXNlcnZlZCA9IHN0cmluZy51bnBhY2soIjxJNCIsIGlucHV0U3RyZWFtOnJlYWQoNCkpCgoJaWYgY29tcHJlc3NlZExlbiA9PSAwIHRoZW4KCQlyZXR1cm4gaW5wdXRTdHJlYW06cmVhZChkZWNvbXByZXNzZWRMZW4pCgllbmQKCglsb2NhbCBvdXRwdXRTdHJlYW0gPSBzdHJlYW1lcigiIikKCglyZXBlYXQKCQlsb2NhbCB0b2tlbiA9IHN0cmluZy5ieXRlKGlucHV0U3RyZWFtOnJlYWQoKSkKCQlsb2NhbCBsaXRMZW4gPSBiaXQzMi5yc2hpZnQodG9rZW4sIDQpCgkJbG9jYWwgbWF0TGVuID0gYml0MzIuYmFuZCh0b2tlbiwgMTUpICsgNAoKCQlpZiBsaXRMZW4gPj0gMTUgdGhlbgoJCQlyZXBlYXQKCQkJCWxvY2FsIG5leHRCeXRlID0gc3RyaW5nLmJ5dGUoaW5wdXRTdHJlYW06cmVhZCgpKQoJCQkJbGl0TGVuICs9IG5leHRCeXRlCgkJCXVudGlsIG5leHRCeXRlIH49IDB4RkYKCQllbmQKCgkJbG9jYWwgbGl0ZXJhbCA9IGlucHV0U3RyZWFtOnJlYWQobGl0TGVuKQoJCW91dHB1dFN0cmVhbTphcHBlbmQobGl0ZXJhbCkKCQlvdXRwdXRTdHJlYW06dG9FbmQoKQoJCWlmIG91dHB1dFN0cmVhbS5MZW5ndGggPCBkZWNvbXByZXNzZWRMZW4gdGhlbgoJCQktLW1hdGNoCgkJCWxvY2FsIG9mZnNldCA9IHN0cmluZy51bnBhY2soIjxJMiIsIGlucHV0U3RyZWFtOnJlYWQoMikpCgkJCWlmIG1hdExlbiA+PSAxOSB0aGVuCgkJCQlyZXBlYXQKCQkJCQlsb2NhbCBuZXh0Qnl0ZSA9IHN0cmluZy5ieXRlKGlucHV0U3RyZWFtOnJlYWQoKSkKCQkJCQltYXRMZW4gKz0gbmV4dEJ5dGUKCQkJCXVudGlsIG5leHRCeXRlIH49IDB4RkYKCQkJZW5kCgoJCQlvdXRwdXRTdHJlYW06c2Vlaygtb2Zmc2V0KQoJCQlsb2NhbCBwb3MgPSBvdXRwdXRTdHJlYW0uT2Zmc2V0CgkJCWxvY2FsIG1hdGNoID0gb3V0cHV0U3RyZWFtOnJlYWQobWF0TGVuKQoJCQlsb2NhbCB1bnJlYWRCeXRlcyA9IG91dHB1dFN0cmVhbS5MYXN0VW5yZWFkQnl0ZXMKCQkJbG9jYWwgZXh0cmEKCQkJaWYgdW5yZWFkQnl0ZXMgdGhlbgoJCQkJcmVwZWF0CgkJCQkJb3V0cHV0U3RyZWFtLk9mZnNldCA9IHBvcwoJCQkJCWV4dHJhID0gb3V0cHV0U3RyZWFtOnJlYWQodW5yZWFkQnl0ZXMpCgkJCQkJdW5yZWFkQnl0ZXMgPSBvdXRwdXRTdHJlYW0uTGFzdFVucmVhZEJ5dGVzCgkJCQkJbWF0Y2ggLi49IGV4dHJhCgkJCQl1bnRpbCB1bnJlYWRCeXRlcyA8PSAwCgkJCWVuZAoKCQkJb3V0cHV0U3RyZWFtOmFwcGVuZChtYXRjaCkKCQkJb3V0cHV0U3RyZWFtOnRvRW5kKCkKCQllbmQKCgl1bnRpbCBvdXRwdXRTdHJlYW0uTGVuZ3RoID49IGRlY29tcHJlc3NlZExlbgoKCXJldHVybiBvdXRwdXRTdHJlYW0uU291cmNlCmVuZAoKCi0tIEJSSURHRQoKbG9jYWwgYnJpZGdlID0ge30KCmJyaWRnZS52YWxpZEFjdGlvbnMgPSB7CglbImxvYWRfc291cmNlIl0gPSB7InN0cmluZyIsICJzdHJpbmcifSwKCVsic2V0Y2xpcGJvYXJkIl0gPSB7fSwKCVsid3JpdGVmaWxlIl0gPSB7fSwKCVsicmVhZGZpbGUiXSA9IHt9LAoJWyJpbnB1dF9hY3Rpb24iXSA9IHt9LAoJWyJtYWtlZm9sZGVyIl0gPSB7fSwKCVsiSHR0cEdldCJdID0ge30sCglbImdldF9zY3JpcHQiXSA9IHt9LAoJWyJpc2ZvbGRlciJdID0ge30sCn0gLS0gZ28gdG8gbG9hZHN0cmluZyB0byBjaGFuZ2UgaXQKCgpmdW5jdGlvbiBicmlkZ2U6c2VuZChhY3Rpb24sIC4uLikgCglsb2NhbCBhcmdzID0gey4uLn0KCWxvY2FsIHN1Y2Nlc3MsIHJlcyA9IHBjYWxsKGZ1bmN0aW9uKCkKCgkJaWYgbm90IHNlbGYudmFsaWRBY3Rpb25zW2FjdGlvbl0gdGhlbgoJCQl3YXJuKCJbIERFQlVHIF0gQnJpZGdlLnNlbmQgLT4gY2FuY2VsbGVkIikKCQkJcmV0dXJuCgkJZW5kCgoJCWxvY2FsIHVybCA9ICJodHRwOi8vbG9jYWxob3N0OjgwMDAvYnJpZGdlP2FjdGlvbj0iIC4uIGFjdGlvbgoJCWZvciBpLCBhcmcgaW4gaXBhaXJzKGFyZ3MpIGRvCgkJCXVybCA9IHVybCAuLiAiJmFyZyIgLi4gaSAuLiAiPSIgLi4gSHR0cFNlcnZpY2U6VXJsRW5jb2RlKHRvc3RyaW5nKGFyZykpCgkJZW5kCgkJbG9jYWwgcGFyYW1zID0gewoJCQlVcmwgPSB1cmwsCgkJCU1ldGhvZCA9ICJHRVQiLAoJCQlIZWFkZXJzID0gewoJCQkJWyJDb250ZW50LVR5cGUiXSA9ICJhcHBsaWNhdGlvbi9qc29uIgoJCQl9CgkJfQoJCWxvY2FsIHJlcXVlc3QgPSBIdHRwU2VydmljZTpSZXF1ZXN0SW50ZXJuYWwocGFyYW1zKQoJCWxvY2FsIHJlc3BvbnNlID0gbmlsCgkJbG9jYWwgcmVxdWVzdENvbXBsZXRlZEV2ZW50ID0gSW5zdGFuY2UubmV3KCJCaW5kYWJsZUV2ZW50IikKCQlyZXF1ZXN0OlN0YXJ0KGZ1bmN0aW9uKHN1Y2Nlc3MsIHJlc3VsdCkKCQkJcmVzcG9uc2UgPSByZXN1bHQKCQkJcmVxdWVzdENvbXBsZXRlZEV2ZW50OkZpcmUoKQoJCWVuZCkKCQlyZXF1ZXN0Q29tcGxldGVkRXZlbnQuRXZlbnQ6V2FpdCgpCgoJCWlmIHJlc3BvbnNlLlN0YXR1c01lc3NhZ2UgPT0gIk9LIiB0aGVuIAoJCQlyZXR1cm4gSHR0cFNlcnZpY2U6SlNPTkRlY29kZShyZXNwb25zZS5Cb2R5KSAKCQllbmQKCWVuZCkKCWlmIG5vdCBzdWNjZXNzIHRoZW4KCQl3YXJuKCJbIEVSUk9SIF0gLT4gIi4udG9zdHJpbmcocmVzKSkKCWVsc2UKCQlyZXR1cm4gcmVzCgllbmQKZW5kCgpsb2NhbCBvbGQgPSBsb2FkCgpsb2NhbCB2YWxfdGhlX3NpZ21hID0gZnVuY3Rpb24oY29kZSkKCWxvY2FsIG1vZHVsZSA9IHV0aWxzLmZldGNoX21vZHVsZXMoKVsxXTpDbG9uZSgpCgltb2R1bGUuU291cmNlID0gInJldHVybiBmdW5jdGlvbiguLi4pICIgLi4gY29kZSAuLiAiIGVuZCIKCWxvY2FsIGZ1bmMgPSByZXF1aXJlKG1vZHVsZSkKCWZ1bmMgPSBzZXRmZW52KGZ1bmMsIGdldGZlbnYoKSkKCXJldHVybiBmdW5jCmVuZAoKLS0gRU5WSVJPTUVOVAoKbG9jYWwgZnVuY3Rpb24gZ2V0X2J1aWxkaW5zKCkKCXJldHVybiB7CgkJLS0gTHVhdSBGdW5jdGlvbnMKCQlbImFzc2VydCJdID0gImZ1bmN0aW9uIiwKCQlbImVycm9yIl0gPSAiZnVuY3Rpb24iLAoJCVsiZ2V0ZmVudiJdID0gImZ1bmN0aW9uIiwKCQlbImdldG1ldGF0YWJsZSJdID0gImZ1bmN0aW9uIiwKCQlbImlwYWlycyJdID0gImZ1bmN0aW9uIiwKCQlbImxvYWRzdHJpbmciXSA9ICJmdW5jdGlvbiIsCgkJWyJuZXdwcm94eSJdID0gImZ1bmN0aW9uIiwKCQlbIm5leHQiXSA9ICJmdW5jdGlvbiIsCgkJWyJwYWlycyJdID0gImZ1bmN0aW9uIiwKCQlbInBjYWxsIl0gPSAiZnVuY3Rpb24iLAoJCVsicHJpbnQiXSA9ICJmdW5jdGlvbiIsCgkJWyJyYXdlcXVhbCJdID0gImZ1bmN0aW9uIiwKCQlbInJhd2dldCJdID0gImZ1bmN0aW9uIiwKCQlbInJhd2xlbiJdID0gImZ1bmN0aW9uIiwKCQlbInJhd3NldCJdID0gImZ1bmN0aW9uIiwKCQlbInNlbGVjdCJdID0gImZ1bmN0aW9uIiwKCQlbInNldGZlbnYiXSA9ICJmdW5jdGlvbiIsCgkJWyJzZXRtZXRhdGFibGUiXSA9ICJmdW5jdGlvbiIsCgkJWyJ0b251bWJlciJdID0gImZ1bmN0aW9uIiwKCQlbInRvc3RyaW5nIl0gPSAiZnVuY3Rpb24iLAoJCVsidW5wYWNrIl0gPSAiZnVuY3Rpb24iLAoJCVsieHBjYWxsIl0gPSAiZnVuY3Rpb24iLAoJCVsidHlwZSJdID0gImZ1bmN0aW9uIiwKCQlbInR5cGVvZiJdID0gImZ1bmN0aW9uIiwKCgkJLS0gTHVhdSBGdW5jdGlvbnMgKERlcHJlY2F0ZWQpCgkJWyJjb2xsZWN0Z2FyYmFnZSJdID0gImZ1bmN0aW9uIiwKCgkJLS0gTHVhdSBWYXJpYWJsZXMKCQlbIl9HIl0gPSAidGFibGUiLAoJCVsiX1ZFUlNJT04iXSA9ICJzdHJpbmciLAoKCQktLSBMdWF1IFRhYmxlcwoJCVsiYml0MzIiXSA9ICJ0YWJsZSIsCgkJWyJjb3JvdXRpbmUiXSA9ICJ0YWJsZSIsCgkJWyJkZWJ1ZyJdID0gInRhYmxlIiwKCQlbIm1hdGgiXSA9ICJ0YWJsZSIsCgkJWyJvcyJdID0gInRhYmxlIiwKCQlbInN0cmluZyJdID0gInRhYmxlIiwKCQlbInRhYmxlIl0gPSAidGFibGUiLAoJCVsidXRmOCJdID0gInRhYmxlIiwKCQlbImJ1ZmZlciJdID0gInRhYmxlIiwKCgkJLS0gUm9ibG94IEZ1bmN0aW9ucwoJCVsiRGVidWdnZXJNYW5hZ2VyIl0gPSAiZnVuY3Rpb24iLAoJCVsiZGVsYXkiXSA9ICJmdW5jdGlvbiIsCgkJWyJnY2luZm8iXSA9ICJmdW5jdGlvbiIsCgkJWyJQbHVnaW5NYW5hZ2VyIl0gPSAiZnVuY3Rpb24iLAoJCVsicmVxdWlyZSJdID0gImZ1bmN0aW9uIiwKCQlbInNldHRpbmdzIl0gPSAiZnVuY3Rpb24iLAoJCVsic3Bhd24iXSA9ICJmdW5jdGlvbiIsCgkJWyJ0aWNrIl0gPSAiZnVuY3Rpb24iLAoJCVsidGltZSJdID0gImZ1bmN0aW9uIiwKCQlbIlVzZXJTZXR0aW5ncyJdID0gImZ1bmN0aW9uIiwKCQlbIndhaXQiXSA9ICJmdW5jdGlvbiIsCgkJWyJ3YXJuIl0gPSAiZnVuY3Rpb24iLAoKCQktLSBSb2Jsb3ggRnVuY3Rpb25zIChEZXByZWNhdGVkKQoJCVsiRGVsYXkiXSA9ICJmdW5jdGlvbiIsCgkJWyJFbGFwc2VkVGltZSJdID0gImZ1bmN0aW9uIiwKCQlbImVsYXBzZWRUaW1lIl0gPSAiZnVuY3Rpb24iLAoJCVsicHJpbnRpZGVudGl0eSJdID0gImZ1bmN0aW9uIiwKCQlbIlNwYXduIl0gPSAiZnVuY3Rpb24iLAoJCVsiU3RhdHMiXSA9ICJmdW5jdGlvbiIsCgkJWyJzdGF0cyJdID0gImZ1bmN0aW9uIiwKCQlbIlZlcnNpb24iXSA9ICJmdW5jdGlvbiIsCgkJWyJ2ZXJzaW9uIl0gPSAiZnVuY3Rpb24iLAoJCVsiV2FpdCJdID0gImZ1bmN0aW9uIiwKCQlbInlwY2FsbCJdID0gImZ1bmN0aW9uIiwKCgkJLS0gUm9ibG94IFZhcmlhYmxlcwoJCVsiZ2FtZSJdID0gIkluc3RhbmNlIiwKCQlbInBsdWdpbiJdID0gIkluc3RhbmNlIiwKCQlbInNoYXJlZCJdID0gInRhYmxlIiwKCQlbIndvcmtzcGFjZSJdID0gIkluc3RhbmNlIiwKCgkJLS0gUm9ibG94IFZhcmlhYmxlcyAoRGVwcmVjYXRlZCkKCQlbIkdhbWUiXSA9ICJJbnN0YW5jZSIsCgkJWyJXb3Jrc3BhY2UiXSA9ICJJbnN0YW5jZSIsCgoJCS0tIFJvYmxveCBUYWJsZXMKCQlbIkF4ZXMiXSA9ICJ0YWJsZSIsCgkJWyJCcmlja0NvbG9yIl0gPSAidGFibGUiLAoJCVsiQ2F0YWxvZ1NlYXJjaFBhcmFtcyJdID0gInRhYmxlIiwKCQlbIkNGcmFtZSJdID0gInRhYmxlIiwKCQlbIkNvbG9yMyJdID0gInRhYmxlIiwKCQlbIkNvbG9yU2VxdWVuY2UiXSA9ICJ0YWJsZSIsCgkJWyJDb2xvclNlcXVlbmNlS2V5cG9pbnQiXSA9ICJ0YWJsZSIsCgkJWyJEYXRlVGltZSJdID0gInRhYmxlIiwKCQlbIkRvY2tXaWRnZXRQbHVnaW5HdWlJbmZvIl0gPSAidGFibGUiLAoJCVsiRW51bSJdID0gIkVudW1zIiwKCQlbIkZhY2VzIl0gPSAidGFibGUiLAoJCVsiRmxvYXRDdXJ2ZUtleSJdID0gInRhYmxlIiwKCQlbIkZvbnQiXSA9ICJ0YWJsZSIsCgkJWyJJbnN0YW5jZSJdID0gInRhYmxlIiwKCQlbIk51bWJlclJhbmdlIl0gPSAidGFibGUiLAoJCVsiTnVtYmVyU2VxdWVuY2UiXSA9ICJ0YWJsZSIsCgkJWyJOdW1iZXJTZXF1ZW5jZUtleXBvaW50Il0gPSAidGFibGUiLAoJCVsiT3ZlcmxhcFBhcmFtcyJdID0gInRhYmxlIiwKCQlbIlBhdGhXYXlwb2ludCJdID0gInRhYmxlIiwKCQlbIlBoeXNpY2FsUHJvcGVydGllcyJdID0gInRhYmxlIiwKCQlbIlJhbmRvbSJdID0gInRhYmxlIiwKCQlbIlJheSJdID0gInRhYmxlIiwKCQlbIlJheWNhc3RQYXJhbXMiXSA9ICJ0YWJsZSIsCgkJWyJSZWN0Il0gPSAidGFibGUiLAoJCVsiUmVnaW9uMyJdID0gInRhYmxlIiwKCQlbIlJlZ2lvbjNpbnQxNiJdID0gInRhYmxlIiwKCQlbIlJvdGF0aW9uQ3VydmVLZXkiXSA9ICJ0YWJsZSIsCgkJWyJTaGFyZWRUYWJsZSJdID0gInRhYmxlIiwKCQlbInRhc2siXSA9ICJ0YWJsZSIsCgkJWyJUd2VlbkluZm8iXSA9ICJ0YWJsZSIsCgkJWyJVRGltIl0gPSAidGFibGUiLAoJCVsiVURpbTIiXSA9ICJ0YWJsZSIsCgkJWyJWZWN0b3IyIl0gPSAidGFibGUiLAoJCVsiVmVjdG9yMmludDE2Il0gPSAidGFibGUiLAoJCVsiVmVjdG9yMyJdID0gInRhYmxlIiwKCQlbIlZlY3RvcjNpbnQxNiJdID0gInRhYmxlIiwKCX0KZW5kCgpsb2NhbCBmdW5jdGlvbiBfYXBwbHlfZW52KGZ1bmMsIGVudikKCXNldGZlbnYoMCwgZW52KQoJc2V0ZmVudigxLCBlbnYpCgoJcmV0dXJuIHNldGZlbnYoZnVuYywgZW52KQplbmQKCmxvY2FsIHNhbmRib3ggPSB7CgllbnZpcm9ubWVudCA9IG5pbCwKCWhpZGRlbl9lbnYgPSBuaWwsCglibGFja2xpc3RlZF9leHRlbnNpb25zID0gewoJCSIuZXhlIiwgIi5iYXQiLCAiLmNvbSIsICIuY21kIiwgIi5pbmYiLCAiLmlwYSIsCgkJIi5hcGsiLCAiLmFwa20iLCAiLm9zeCIsICIucGlmIiwgIi5ydW4iLCAiLndzaCIsCgkJIi5iaW4iLCAiLmFwcCIsICIudmIiLCAiLnZicyIsICIuc2NyIiwgIi5mYXAiLAoJCSIuY3BsIiwgIi5pbmYxIiwgIi5pbnMiLCAiLmlueCIsICIuaXN1IiwgIi5qb2IiLAoJCSIubG5rIiwgIi5tc2kiLCAiLnBzMSIsICIucmVnIiwgIi52YmUiLCAiLmpzIiwKCQkiLng4NiIsICIueGxtIiwgIi5zY3B0IiwgIi5vdXQiLCAiLmJhXyIsICIuamFyIiwKCQkiLmFoayIsICIueGJlIiwgIi4weGUiLCAiLnUzcCIsICIuYm1zIiwgIi5qc2UiLAoJCSIuZXgiLCAiLnJhciIsICIuemlwIiwgIi43eiIsICIucHkiLCAiLmNwcCIsCgkJIi5jcyIsICIucHJ4IiwgIi50YXIiLCAiLiIsICIud2ltIiwgIi5odG0iLAoJCSIuaHRtbCIsICIuY3NzIiwgIi5hcHBpbWFnZSIsICIuYXBwbGVzY3JpcHQiLAoJCSIueDg2XzY0IiwgIi54NjRfNjQiLCAiLmF1dG9ydW4iLCAiLnRtcCIsICIuc3lzIiwKCQkiLmRhdCIsICIuaW5pIiwgIi5wb2wiLCAiLnZic2NyaXB0IiwgIi5nYWRnZXQiLAoJCSIud29ya2Zsb3ciLCAiLnNjcmlwdCIsICIuYWN0aW9uIiwgIi5jb21tYW5kIiwKCQkiLmFyc2NyaXB0IiwgIi5wc2MxIiwKCX0KfQoKbG9jYWwgbWFpbl9zY3JpcHQgPSBzY3JpcHQKbG9jYWwgc2V0ZmVudiA9IHNldGZlbnYKCmZ1bmN0aW9uIHNhbmRib3g6YXBwbHk8VD4oZnVuYzogVCk6IFQKCWxvY2FsIG5ld19lbnYgPSBzZWxmOm5ld19lbnZpcm9ubWVudChJbnN0YW5jZS5uZXcoIkxvY2FsU2NyaXB0IikpCglsb2NhbCBfc3VjY2VzcywgcmVzdWx0ID0gY29yb3V0aW5lLnJlc3VtZShjb3JvdXRpbmUuY3JlYXRlKF9hcHBseV9lbnYpLCBmdW5jLCBuZXdfZW52KQoKCXJldHVybiByZXN1bHQKZW5kCgpmdW5jdGlvbiBzYW5kYm94Om5ld19lbnZpcm9ubWVudChzY3JpcHQ6IEx1YVNvdXJjZUNvbnRhaW5lcik6IHsgW2FueV06IGFueSB9Cglsb2NhbCBwbHVnaW5fZW52ID0ge30KCWxvY2FsIHNhbmRib3hlZF9lbnYgPSBzZXRtZXRhdGFibGUoewoJCXNjcmlwdCA9IHNjcmlwdCwKCX0sIHsKCQlfX2luZGV4ID0gZnVuY3Rpb24oZW52LCBpbmRleCkKCQkJcmV0dXJuIHBsdWdpbl9lbnZbaW5kZXhdIG9yIHNlbGYuaGlkZGVuX2VudltpbmRleF0gb3Igc2VsZi5lbnZpcm9ubWVudC5nbG9iYWxbaW5kZXhdCgkJZW5kLAoJCV9fbmV3aW5kZXggPSBmdW5jdGlvbihlbnYsIGluZGV4LCB2YWx1ZSkKCQkJaWYgaW5kZXggfj0gInNjcmlwdCIgdGhlbgoJCQkJcmF3c2V0KHNlbGYuZW52aXJvbm1lbnQuZ2xvYmFsLCBpbmRleCwgdmFsdWUpCgkJCWVuZAoJCQlyYXdzZXQoZW52LCBpbmRleCwgdmFsdWUpCgkJZW5kLAoJfSkKCglwbHVnaW5fZW52LmdldGZlbnYgPSBmdW5jdGlvbih2YWx1ZSkKCQlsb2NhbCBzdWNjZXNzLCByZXN1bHQgPSBwY2FsbChnZXRmZW52LCB2YWx1ZSkKCgkJaWYgc3VjY2VzcyB0aGVuCgkJCWlmIHJhd2dldChyZXN1bHQsICJzY3JpcHQiKSA9PSBtYWluX3NjcmlwdCB0aGVuCgkJCQlyZXN1bHQgPSBzYW5kYm94ZWRfZW52CgkJCWVuZAoJCQlyZXR1cm4gcmVzdWx0CgkJZW5kCgkJcmV0dXJuIGVycm9yKHJlc3VsdCwgMikKCWVuZAoKCXJldHVybiBzYW5kYm94ZWRfZW52CmVuZAoKbG9jYWwgZnVuY3Rpb24gaW5pdGlhbGl6ZV9lbnZfbW9kdWxlcygpCglsb2NhbCByb2Jsb3hfZW52ID0gZ2V0X2J1aWxkaW5zKCkgLS0gZG8gbm90IHdyaXRlIG9uIHRoaXMKCWxvY2FsIG5ld19lbnYgPSBzZXRtZXRhdGFibGUoe30sIHsKCQlfX2luZGV4ID0gcm9ibG94X2VudiwKCX0pCgoJLS0gaW5pdAoJZm9yIGluZGV4LCB2YWx1ZSBpbiBuZXdfZW52IGRvCgkJaWYgdHlwZSh2YWx1ZSkgfj0gInRhYmxlIiBvciB0YWJsZS5pc2Zyb3plbih2YWx1ZSkgdGhlbgoJCQljb250aW51ZQoJCWVuZAoJCXRhYmxlLmZyZWV6ZSh2YWx1ZSkKCWVuZAoKCXJldHVybiB7CgkJZ2xvYmFsID0gbmV3X2VudiwKCQlyb2Jsb3ggPSByb2Jsb3hfZW52LAoJfQplbmQKCmZ1bmN0aW9uIHNhbmRib3g6aW5pdGlhbGl6ZSgpCglsb2NhbCBoaWRkZW5fZW52ID0gewoJCWdhbWUgPSBuZXdwcm94eSh0cnVlKSwKCX0KCWxvY2FsIGVudmlyb25tZW50ID0gaW5pdGlhbGl6ZV9lbnZfbW9kdWxlcygpCgoJbG9jYWwgX2dhbWVfbWV0YSA9IGdldG1ldGF0YWJsZShoaWRkZW5fZW52LmdhbWUpCglfZ2FtZV9tZXRhLl9faW5kZXggPSBmdW5jdGlvbihzZWxmLCBpbmRleCkKCQlsb2NhbCBfLCBnYW1lX2luZGV4ID0gcGNhbGwoZnVuY3Rpb24oKQoJCQlyZXR1cm4gZ2FtZVtpbmRleF0KCQllbmQpCgoJCWlmIGdhbWVfaW5kZXggYW5kIHR5cGUoZ2FtZV9pbmRleCkgPT0gImZ1bmN0aW9uIiB0aGVuCgkJCXJldHVybiBmdW5jdGlvbihzZWxmLCAuLi4pCgkJCQlyZXR1cm4gZ2FtZV9pbmRleChnYW1lLCAuLi4pCgkJCWVuZAoJCWVsc2UKCQkJLS1UT0RPIEFkZCBhdXRvbWF0aWMgLkdldFNlcnZpY2UKCQkJcmV0dXJuIGdhbWVbaW5kZXhdCgkJZW5kCgllbmQKCV9nYW1lX21ldGEuX19tZXRhdGFibGUgPSBnZXRtZXRhdGFibGUoZ2FtZSkKCglsb2NhbCBjbG9uZWRfZW52aXJvbm1lbnQKCgllbnZpcm9ubWVudC5nbG9iYWwuX0cgPSB7fQoJZW52aXJvbm1lbnQuZ2xvYmFsLnNoYXJlZCA9IHt9CgllbnZpcm9ubWVudC5nbG9iYWwuY3J5cHQgPSB7CgkJYmFzZTY0ID0ge30sCgkJaGV4ID0ge30sIAoJCXVybCA9IHt9LAoJfQoJZW52aXJvbm1lbnQuZ2xvYmFsLmNhY2hlID0ge30KCWVudmlyb25tZW50Lmdsb2JhbC5odHRwID0ge30KCWVudmlyb25tZW50Lmdsb2JhbC5iYXNlNjQgPSB7fQoJZW52aXJvbm1lbnQuZ2xvYmFsLmRlYnVnID0gdGFibGUuY2xvbmUoZGVidWcpCgoJLS1kcmF3aW5nIGxpYiBmcm9tIHN3ZWV0IG9sIGphbG9uIGhlcmUgbGF0ZXIgKGltIE5PVCBmdWNraW5nIGNvZGluZyBteSBvd24gZHJhd2luZyBsaWIgdGhhdCBzb3VuZHMgbGlrZSBoZWxsKQoJLS0gTWFkZSBieSBqTG4wbgoKCS0tIHNlcnZpY2VzCglsb2NhbCBjb3JlR3VpID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKCS0tIG9iamVjdHMKCWxvY2FsIGNhbWVyYSA9IGdhbWUuV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKCWxvY2FsIGRyYXdpbmdVSSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIikKCWRyYXdpbmdVSS5OYW1lID0gIkRyYXdpbmciCglkcmF3aW5nVUkuSWdub3JlR3VpSW5zZXQgPSB0cnVlCglkcmF3aW5nVUkuRGlzcGxheU9yZGVyID0gMHg3ZmZmZmZmZgoJZHJhd2luZ1VJLlBhcmVudCA9IGNvcmVHdWkKCS0tIHZhcmlhYmxlcwoJbG9jYWwgZHJhd2luZ0luZGV4ID0gMAoJbG9jYWwgdWlTdHJva2VzID0gdGFibGUuY3JlYXRlKDApCglsb2NhbCBiYXNlRHJhd2luZ09iaiA9IHNldG1ldGF0YWJsZSh7CgkJVmlzaWJsZSA9IHRydWUsCgkJWkluZGV4ID0gMCwKCQlUcmFuc3BhcmVuY3kgPSAxLAoJCUNvbG9yID0gQ29sb3IzLm5ldygpLAoJCVJlbW92ZSA9IGZ1bmN0aW9uKHNlbGYpCgkJCXNldG1ldGF0YWJsZShzZWxmLCBuaWwpCgkJZW5kCgl9LCB7CgkJX19hZGQgPSBmdW5jdGlvbih0MSwgdDIpCgkJCWxvY2FsIHJlc3VsdCA9IHRhYmxlLmNsb25lKHQxKQoKCQkJZm9yIGluZGV4LCB2YWx1ZSBpbiB0MiBkbwoJCQkJcmVzdWx0W2luZGV4XSA9IHZhbHVlCgkJCWVuZAoJCQlyZXR1cm4gcmVzdWx0CgkJZW5kCgl9KQoJbG9jYWwgZHJhd2luZ0ZvbnRzRW51bSA9IHsKCQlbMF0gPSBGb250LmZyb21FbnVtKEVudW0uRm9udC5Sb2JvdG8pLAoJCVsxXSA9IEZvbnQuZnJvbUVudW0oRW51bS5Gb250LkxlZ2FjeSksCgkJWzJdID0gRm9udC5mcm9tRW51bShFbnVtLkZvbnQuU291cmNlU2FucyksCgkJWzNdID0gRm9udC5mcm9tRW51bShFbnVtLkZvbnQuUm9ib3RvTW9ubyksCgl9CgktLSBmdW5jdGlvbgoJbG9jYWwgZnVuY3Rpb24gZ2V0Rm9udEZyb21JbmRleChmb250SW5kZXg6IG51bWJlcik6IEZvbnQKCQlyZXR1cm4gZHJhd2luZ0ZvbnRzRW51bVtmb250SW5kZXhdCgllbmQKCglsb2NhbCBmdW5jdGlvbiBjb252ZXJ0VHJhbnNwYXJlbmN5KHRyYW5zcGFyZW5jeTogbnVtYmVyKTogbnVtYmVyCgkJcmV0dXJuIG1hdGguY2xhbXAoMSAtIHRyYW5zcGFyZW5jeSwgMCwgMSkKCWVuZAoJLS0gbWFpbgoJbG9jYWwgRHJhd2luZ0xpYiA9IHt9CglEcmF3aW5nTGliLkZvbnRzID0gewoJCVsiVUkiXSA9IDAsCgkJWyJTeXN0ZW0iXSA9IDEsCgkJWyJQbGV4Il0gPSAyLAoJCVsiTW9ub3NwYWNlIl0gPSAzCgl9Cglsb2NhbCBkcmF3aW5ncyA9IHt9CglmdW5jdGlvbiBEcmF3aW5nTGliLm5ldyhkcmF3aW5nVHlwZSkKCQlkcmF3aW5nSW5kZXggKz0gMQoJCWlmIGRyYXdpbmdUeXBlID09ICJMaW5lIiB0aGVuCgkJCWxvY2FsIGxpbmVPYmogPSAoewoJCQkJRnJvbSA9IFZlY3RvcjIuemVybywKCQkJCVRvID0gVmVjdG9yMi56ZXJvLAoJCQkJVGhpY2tuZXNzID0gMQoJCQl9ICsgYmFzZURyYXdpbmdPYmopCgoJCQlsb2NhbCBsaW5lRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKCQkJbGluZUZyYW1lLk5hbWUgPSBkcmF3aW5nSW5kZXgKCQkJbGluZUZyYW1lLkFuY2hvclBvaW50ID0gKFZlY3RvcjIub25lICogLjUpCgkJCWxpbmVGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwCgoJCQlsaW5lRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IGxpbmVPYmouQ29sb3IKCQkJbGluZUZyYW1lLlZpc2libGUgPSBsaW5lT2JqLlZpc2libGUKCQkJbGluZUZyYW1lLlpJbmRleCA9IGxpbmVPYmouWkluZGV4CgkJCWxpbmVGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gY29udmVydFRyYW5zcGFyZW5jeShsaW5lT2JqLlRyYW5zcGFyZW5jeSkKCgkJCWxpbmVGcmFtZS5TaXplID0gVURpbTIubmV3KCkKCgkJCWxpbmVGcmFtZS5QYXJlbnQgPSBkcmF3aW5nVUkKCQkJbG9jYWwgYnMgPSB0YWJsZS5jcmVhdGUoMCkKCQkJdGFibGUuaW5zZXJ0KGRyYXdpbmdzLGJzKQoJCQlyZXR1cm4gc2V0bWV0YXRhYmxlKGJzLCB7CgkJCQlfX25ld2luZGV4ID0gZnVuY3Rpb24oXywgaW5kZXgsIHZhbHVlKQoJCQkJCWlmIHR5cGVvZihsaW5lT2JqW2luZGV4XSkgPT0gIm5pbCIgdGhlbiByZXR1cm4gZW5kCgoJCQkJCWlmIGluZGV4ID09ICJGcm9tIiB0aGVuCgkJCQkJCWxvY2FsIGRpcmVjdGlvbiA9IChsaW5lT2JqLlRvIC0gdmFsdWUpCgkJCQkJCWxvY2FsIGNlbnRlciA9IChsaW5lT2JqLlRvICsgdmFsdWUpIC8gMgoJCQkJCQlsb2NhbCBkaXN0YW5jZSA9IGRpcmVjdGlvbi5NYWduaXR1ZGUKCQkJCQkJbG9jYWwgdGhldGEgPSBtYXRoLmRlZyhtYXRoLmF0YW4yKGRpcmVjdGlvbi5ZLCBkaXJlY3Rpb24uWCkpCgoJCQkJCQlsaW5lRnJhbWUuUG9zaXRpb24gPSBVRGltMi5mcm9tT2Zmc2V0KGNlbnRlci5YLCBjZW50ZXIuWSkKCQkJCQkJbGluZUZyYW1lLlJvdGF0aW9uID0gdGhldGEKCQkJCQkJbGluZUZyYW1lLlNpemUgPSBVRGltMi5mcm9tT2Zmc2V0KGRpc3RhbmNlLCBsaW5lT2JqLlRoaWNrbmVzcykKCQkJCQllbHNlaWYgaW5kZXggPT0gIlRvIiB0aGVuCgkJCQkJCWxvY2FsIGRpcmVjdGlvbiA9ICh2YWx1ZSAtIGxpbmVPYmouRnJvbSkKCQkJCQkJbG9jYWwgY2VudGVyID0gKHZhbHVlICsgbGluZU9iai5Gcm9tKSAvIDIKCQkJCQkJbG9jYWwgZGlzdGFuY2UgPSBkaXJlY3Rpb24uTWFnbml0dWRlCgkJCQkJCWxvY2FsIHRoZXRhID0gbWF0aC5kZWcobWF0aC5hdGFuMihkaXJlY3Rpb24uWSwgZGlyZWN0aW9uLlgpKQoKCQkJCQkJbGluZUZyYW1lLlBvc2l0aW9uID0gVURpbTIuZnJvbU9mZnNldChjZW50ZXIuWCwgY2VudGVyLlkpCgkJCQkJCWxpbmVGcmFtZS5Sb3RhdGlvbiA9IHRoZXRhCgkJCQkJCWxpbmVGcmFtZS5TaXplID0gVURpbTIuZnJvbU9mZnNldChkaXN0YW5jZSwgbGluZU9iai5UaGlja25lc3MpCgkJCQkJZWxzZWlmIGluZGV4ID09ICJUaGlja25lc3MiIHRoZW4KCQkJCQkJbG9jYWwgZGlzdGFuY2UgPSAobGluZU9iai5UbyAtIGxpbmVPYmouRnJvbSkuTWFnbml0dWRlCgoJCQkJCQlsaW5lRnJhbWUuU2l6ZSA9IFVEaW0yLmZyb21PZmZzZXQoZGlzdGFuY2UsIHZhbHVlKQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiVmlzaWJsZSIgdGhlbgoJCQkJCQlsaW5lRnJhbWUuVmlzaWJsZSA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJaSW5kZXgiIHRoZW4KCQkJCQkJbGluZUZyYW1lLlpJbmRleCA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJUcmFuc3BhcmVuY3kiIHRoZW4KCQkJCQkJbGluZUZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSBjb252ZXJ0VHJhbnNwYXJlbmN5KHZhbHVlKQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiQ29sb3IiIHRoZW4KCQkJCQkJbGluZUZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSB2YWx1ZQoJCQkJCWVuZAoJCQkJCWxpbmVPYmpbaW5kZXhdID0gdmFsdWUKCQkJCWVuZCwKCQkJCV9faW5kZXggPSBmdW5jdGlvbihzZWxmLCBpbmRleCkKCQkJCQlpZiBpbmRleCA9PSAiUmVtb3ZlIiBvciBpbmRleCA9PSAiRGVzdHJveSIgdGhlbgoJCQkJCQlyZXR1cm4gZnVuY3Rpb24oKQoJCQkJCQkJbGluZUZyYW1lOkRlc3Ryb3koKQoJCQkJCQkJbGluZU9iai5SZW1vdmUoc2VsZikKCQkJCQkJCXJldHVybiBsaW5lT2JqOlJlbW92ZSgpCgkJCQkJCWVuZAoJCQkJCWVuZAoJCQkJCXJldHVybiBsaW5lT2JqW2luZGV4XQoJCQkJZW5kCgkJCX0pCgkJZWxzZWlmIGRyYXdpbmdUeXBlID09ICJUZXh0IiB0aGVuCgkJCWxvY2FsIHRleHRPYmogPSAoewoJCQkJVGV4dCA9ICIiLAoJCQkJRm9udCA9IERyYXdpbmdMaWIuRm9udHMuVUksCgkJCQlTaXplID0gMCwKCQkJCVBvc2l0aW9uID0gVmVjdG9yMi56ZXJvLAoJCQkJQ2VudGVyID0gZmFsc2UsCgkJCQlPdXRsaW5lID0gZmFsc2UsCgkJCQlPdXRsaW5lQ29sb3IgPSBDb2xvcjMubmV3KCkKCQkJfSArIGJhc2VEcmF3aW5nT2JqKQoKCQkJbG9jYWwgdGV4dExhYmVsLCB1aVN0cm9rZSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiksIEluc3RhbmNlLm5ldygiVUlTdHJva2UiKQoJCQl0ZXh0TGFiZWwuTmFtZSA9IGRyYXdpbmdJbmRleAoJCQl0ZXh0TGFiZWwuQW5jaG9yUG9pbnQgPSAoVmVjdG9yMi5vbmUgKiAuNSkKCQkJdGV4dExhYmVsLkJvcmRlclNpemVQaXhlbCA9IDAKCQkJdGV4dExhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCgoJCQl0ZXh0TGFiZWwuVmlzaWJsZSA9IHRleHRPYmouVmlzaWJsZQoJCQl0ZXh0TGFiZWwuVGV4dENvbG9yMyA9IHRleHRPYmouQ29sb3IKCQkJdGV4dExhYmVsLlRleHRUcmFuc3BhcmVuY3kgPSBjb252ZXJ0VHJhbnNwYXJlbmN5KHRleHRPYmouVHJhbnNwYXJlbmN5KQoJCQl0ZXh0TGFiZWwuWkluZGV4ID0gdGV4dE9iai5aSW5kZXgKCgkJCXRleHRMYWJlbC5Gb250RmFjZSA9IGdldEZvbnRGcm9tSW5kZXgodGV4dE9iai5Gb250KQoJCQl0ZXh0TGFiZWwuVGV4dFNpemUgPSB0ZXh0T2JqLlNpemUKCgkJCXRleHRMYWJlbDpHZXRQcm9wZXJ0eUNoYW5nZWRTaWduYWwoIlRleHRCb3VuZHMiKTpDb25uZWN0KGZ1bmN0aW9uKCkKCQkJCWxvY2FsIHRleHRCb3VuZHMgPSB0ZXh0TGFiZWwuVGV4dEJvdW5kcwoJCQkJbG9jYWwgb2Zmc2V0ID0gdGV4dEJvdW5kcyAvIDIKCgkJCQl0ZXh0TGFiZWwuU2l6ZSA9IFVEaW0yLmZyb21PZmZzZXQodGV4dEJvdW5kcy5YLCB0ZXh0Qm91bmRzLlkpCgkJCQl0ZXh0TGFiZWwuUG9zaXRpb24gPSBVRGltMi5mcm9tT2Zmc2V0KHRleHRPYmouUG9zaXRpb24uWCArIChpZiBub3QgdGV4dE9iai5DZW50ZXIgdGhlbiBvZmZzZXQuWCBlbHNlIDApLCB0ZXh0T2JqLlBvc2l0aW9uLlkgKyBvZmZzZXQuWSkKCQkJZW5kKQoKCQkJdWlTdHJva2UuVGhpY2tuZXNzID0gMQoJCQl1aVN0cm9rZS5FbmFibGVkID0gdGV4dE9iai5PdXRsaW5lCgkJCXVpU3Ryb2tlLkNvbG9yID0gdGV4dE9iai5Db2xvcgoKCQkJdGV4dExhYmVsLlBhcmVudCwgdWlTdHJva2UuUGFyZW50ID0gZHJhd2luZ1VJLCB0ZXh0TGFiZWwKCQkJbG9jYWwgYnMgPSB0YWJsZS5jcmVhdGUoMCkKCQkJdGFibGUuaW5zZXJ0KGRyYXdpbmdzLGJzKQoJCQlyZXR1cm4gc2V0bWV0YXRhYmxlKGJzLCB7CgkJCQlfX25ld2luZGV4ID0gZnVuY3Rpb24oXywgaW5kZXgsIHZhbHVlKQoJCQkJCWlmIHR5cGVvZih0ZXh0T2JqW2luZGV4XSkgPT0gIm5pbCIgdGhlbiByZXR1cm4gZW5kCgoJCQkJCWlmIGluZGV4ID09ICJUZXh0IiB0aGVuCgkJCQkJCXRleHRMYWJlbC5UZXh0ID0gdmFsdWUKCQkJCQllbHNlaWYgaW5kZXggPT0gIkZvbnQiIHRoZW4KCQkJCQkJdmFsdWUgPSBtYXRoLmNsYW1wKHZhbHVlLCAwLCAzKQoJCQkJCQl0ZXh0TGFiZWwuRm9udEZhY2UgPSBnZXRGb250RnJvbUluZGV4KHZhbHVlKQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiU2l6ZSIgdGhlbgoJCQkJCQl0ZXh0TGFiZWwuVGV4dFNpemUgPSB2YWx1ZQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiUG9zaXRpb24iIHRoZW4KCQkJCQkJbG9jYWwgb2Zmc2V0ID0gdGV4dExhYmVsLlRleHRCb3VuZHMgLyAyCgoJCQkJCQl0ZXh0TGFiZWwuUG9zaXRpb24gPSBVRGltMi5mcm9tT2Zmc2V0KHZhbHVlLlggKyAoaWYgbm90IHRleHRPYmouQ2VudGVyIHRoZW4gb2Zmc2V0LlggZWxzZSAwKSwgdmFsdWUuWSArIG9mZnNldC5ZKQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiQ2VudGVyIiB0aGVuCgkJCQkJCWxvY2FsIHBvc2l0aW9uID0gKAoJCQkJCQkJaWYgdmFsdWUgdGhlbgoJCQkJCQkJCWNhbWVyYS5WaWV3cG9ydFNpemUgLyAyCgkJCQkJCQkJZWxzZQoJCQkJCQkJCXRleHRPYmouUG9zaXRpb24KCQkJCQkJKQoKCQkJCQkJdGV4dExhYmVsLlBvc2l0aW9uID0gVURpbTIuZnJvbU9mZnNldChwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZKQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiT3V0bGluZSIgdGhlbgoJCQkJCQl1aVN0cm9rZS5FbmFibGVkID0gdmFsdWUKCQkJCQllbHNlaWYgaW5kZXggPT0gIk91dGxpbmVDb2xvciIgdGhlbgoJCQkJCQl1aVN0cm9rZS5Db2xvciA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJWaXNpYmxlIiB0aGVuCgkJCQkJCXRleHRMYWJlbC5WaXNpYmxlID0gdmFsdWUKCQkJCQllbHNlaWYgaW5kZXggPT0gIlpJbmRleCIgdGhlbgoJCQkJCQl0ZXh0TGFiZWwuWkluZGV4ID0gdmFsdWUKCQkJCQllbHNlaWYgaW5kZXggPT0gIlRyYW5zcGFyZW5jeSIgdGhlbgoJCQkJCQlsb2NhbCB0cmFuc3BhcmVuY3kgPSBjb252ZXJ0VHJhbnNwYXJlbmN5KHZhbHVlKQoKCQkJCQkJdGV4dExhYmVsLlRleHRUcmFuc3BhcmVuY3kgPSB0cmFuc3BhcmVuY3kKCQkJCQkJdWlTdHJva2UuVHJhbnNwYXJlbmN5ID0gdHJhbnNwYXJlbmN5CgkJCQkJZWxzZWlmIGluZGV4ID09ICJDb2xvciIgdGhlbgoJCQkJCQl0ZXh0TGFiZWwuVGV4dENvbG9yMyA9IHZhbHVlCgkJCQkJZW5kCgkJCQkJdGV4dE9ialtpbmRleF0gPSB2YWx1ZQoJCQkJZW5kLAoJCQkJX19pbmRleCA9IGZ1bmN0aW9uKHNlbGYsIGluZGV4KQoJCQkJCWlmIGluZGV4ID09ICJSZW1vdmUiIG9yIGluZGV4ID09ICJEZXN0cm95IiB0aGVuCgkJCQkJCXJldHVybiBmdW5jdGlvbigpCgkJCQkJCQl0ZXh0TGFiZWw6RGVzdHJveSgpCgkJCQkJCQl0ZXh0T2JqLlJlbW92ZShzZWxmKQoJCQkJCQkJcmV0dXJuIHRleHRPYmo6UmVtb3ZlKCkKCQkJCQkJZW5kCgkJCQkJZWxzZWlmIGluZGV4ID09ICJUZXh0Qm91bmRzIiB0aGVuCgkJCQkJCXJldHVybiB0ZXh0TGFiZWwuVGV4dEJvdW5kcwoJCQkJCWVuZAoJCQkJCXJldHVybiB0ZXh0T2JqW2luZGV4XQoJCQkJZW5kCgkJCX0pCgkJZWxzZWlmIGRyYXdpbmdUeXBlID09ICJDaXJjbGUiIHRoZW4KCQkJbG9jYWwgY2lyY2xlT2JqID0gKHsKCQkJCVJhZGl1cyA9IDE1MCwKCQkJCVBvc2l0aW9uID0gVmVjdG9yMi56ZXJvLAoJCQkJVGhpY2tuZXNzID0gLjcsCgkJCQlGaWxsZWQgPSBmYWxzZQoJCQl9ICsgYmFzZURyYXdpbmdPYmopCgoJCQlsb2NhbCBjaXJjbGVGcmFtZSwgdWlDb3JuZXIsIHVpU3Ryb2tlID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpLCBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiksIEluc3RhbmNlLm5ldygiVUlTdHJva2UiKQoJCQljaXJjbGVGcmFtZS5OYW1lID0gZHJhd2luZ0luZGV4CgkJCWNpcmNsZUZyYW1lLkFuY2hvclBvaW50ID0gKFZlY3RvcjIub25lICogLjUpCgkJCWNpcmNsZUZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDAKCgkJCWNpcmNsZUZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAoaWYgY2lyY2xlT2JqLkZpbGxlZCB0aGVuIGNvbnZlcnRUcmFuc3BhcmVuY3koY2lyY2xlT2JqLlRyYW5zcGFyZW5jeSkgZWxzZSAxKQoJCQljaXJjbGVGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gY2lyY2xlT2JqLkNvbG9yCgkJCWNpcmNsZUZyYW1lLlZpc2libGUgPSBjaXJjbGVPYmouVmlzaWJsZQoJCQljaXJjbGVGcmFtZS5aSW5kZXggPSBjaXJjbGVPYmouWkluZGV4CgoJCQl1aUNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygxLCAwKQoJCQljaXJjbGVGcmFtZS5TaXplID0gVURpbTIuZnJvbU9mZnNldChjaXJjbGVPYmouUmFkaXVzLCBjaXJjbGVPYmouUmFkaXVzKQoKCQkJdWlTdHJva2UuVGhpY2tuZXNzID0gY2lyY2xlT2JqLlRoaWNrbmVzcwoJCQl1aVN0cm9rZS5FbmFibGVkID0gbm90IGNpcmNsZU9iai5GaWxsZWQKCQkJdWlTdHJva2UuQXBwbHlTdHJva2VNb2RlID0gRW51bS5BcHBseVN0cm9rZU1vZGUuQm9yZGVyCgoJCQljaXJjbGVGcmFtZS5QYXJlbnQsIHVpQ29ybmVyLlBhcmVudCwgdWlTdHJva2UuUGFyZW50ID0gZHJhd2luZ1VJLCBjaXJjbGVGcmFtZSwgY2lyY2xlRnJhbWUKCQkJbG9jYWwgYnMgPSB0YWJsZS5jcmVhdGUoMCkKCQkJdGFibGUuaW5zZXJ0KGRyYXdpbmdzLGJzKQoJCQlyZXR1cm4gc2V0bWV0YXRhYmxlKGJzLCB7CgkJCQlfX25ld2luZGV4ID0gZnVuY3Rpb24oXywgaW5kZXgsIHZhbHVlKQoJCQkJCWlmIHR5cGVvZihjaXJjbGVPYmpbaW5kZXhdKSA9PSAibmlsIiB0aGVuIHJldHVybiBlbmQKCgkJCQkJaWYgaW5kZXggPT0gIlJhZGl1cyIgdGhlbgoJCQkJCQlsb2NhbCByYWRpdXMgPSB2YWx1ZSAqIDIKCQkJCQkJY2lyY2xlRnJhbWUuU2l6ZSA9IFVEaW0yLmZyb21PZmZzZXQocmFkaXVzLCByYWRpdXMpCgkJCQkJZWxzZWlmIGluZGV4ID09ICJQb3NpdGlvbiIgdGhlbgoJCQkJCQljaXJjbGVGcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLmZyb21PZmZzZXQodmFsdWUuWCwgdmFsdWUuWSkKCQkJCQllbHNlaWYgaW5kZXggPT0gIlRoaWNrbmVzcyIgdGhlbgoJCQkJCQl2YWx1ZSA9IG1hdGguY2xhbXAodmFsdWUsIC42LCAweDdmZmZmZmZmKQoJCQkJCQl1aVN0cm9rZS5UaGlja25lc3MgPSB2YWx1ZQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiRmlsbGVkIiB0aGVuCgkJCQkJCWNpcmNsZUZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAoaWYgdmFsdWUgdGhlbiBjb252ZXJ0VHJhbnNwYXJlbmN5KGNpcmNsZU9iai5UcmFuc3BhcmVuY3kpIGVsc2UgMSkKCQkJCQkJdWlTdHJva2UuRW5hYmxlZCA9IG5vdCB2YWx1ZQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiVmlzaWJsZSIgdGhlbgoJCQkJCQljaXJjbGVGcmFtZS5WaXNpYmxlID0gdmFsdWUKCQkJCQllbHNlaWYgaW5kZXggPT0gIlpJbmRleCIgdGhlbgoJCQkJCQljaXJjbGVGcmFtZS5aSW5kZXggPSB2YWx1ZQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiVHJhbnNwYXJlbmN5IiB0aGVuCgkJCQkJCWxvY2FsIHRyYW5zcGFyZW5jeSA9IGNvbnZlcnRUcmFuc3BhcmVuY3kodmFsdWUpCgoJCQkJCQljaXJjbGVGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gKGlmIGNpcmNsZU9iai5GaWxsZWQgdGhlbiB0cmFuc3BhcmVuY3kgZWxzZSAxKQoJCQkJCQl1aVN0cm9rZS5UcmFuc3BhcmVuY3kgPSB0cmFuc3BhcmVuY3kKCQkJCQllbHNlaWYgaW5kZXggPT0gIkNvbG9yIiB0aGVuCgkJCQkJCWNpcmNsZUZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSB2YWx1ZQoJCQkJCQl1aVN0cm9rZS5Db2xvciA9IHZhbHVlCgkJCQkJZW5kCgkJCQkJY2lyY2xlT2JqW2luZGV4XSA9IHZhbHVlCgkJCQllbmQsCgkJCQlfX2luZGV4ID0gZnVuY3Rpb24oc2VsZiwgaW5kZXgpCgkJCQkJaWYgaW5kZXggPT0gIlJlbW92ZSIgb3IgaW5kZXggPT0gIkRlc3Ryb3kiIHRoZW4KCQkJCQkJcmV0dXJuIGZ1bmN0aW9uKCkKCQkJCQkJCWNpcmNsZUZyYW1lOkRlc3Ryb3koKQoJCQkJCQkJY2lyY2xlT2JqLlJlbW92ZShzZWxmKQoJCQkJCQkJcmV0dXJuIGNpcmNsZU9iajpSZW1vdmUoKQoJCQkJCQllbmQKCQkJCQllbmQKCQkJCQlyZXR1cm4gY2lyY2xlT2JqW2luZGV4XQoJCQkJZW5kCgkJCX0pCgkJZWxzZWlmIGRyYXdpbmdUeXBlID09ICJTcXVhcmUiIHRoZW4KCQkJbG9jYWwgc3F1YXJlT2JqID0gKHsKCQkJCVNpemUgPSBWZWN0b3IyLnplcm8sCgkJCQlQb3NpdGlvbiA9IFZlY3RvcjIuemVybywKCQkJCVRoaWNrbmVzcyA9IC43LAoJCQkJRmlsbGVkID0gZmFsc2UKCQkJfSArIGJhc2VEcmF3aW5nT2JqKQoKCQkJbG9jYWwgc3F1YXJlRnJhbWUsIHVpU3Ryb2tlID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpLCBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIikKCQkJc3F1YXJlRnJhbWUuTmFtZSA9IGRyYXdpbmdJbmRleAoJCQlzcXVhcmVGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwCgoJCQlzcXVhcmVGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gKGlmIHNxdWFyZU9iai5GaWxsZWQgdGhlbiBjb252ZXJ0VHJhbnNwYXJlbmN5KHNxdWFyZU9iai5UcmFuc3BhcmVuY3kpIGVsc2UgMSkKCQkJc3F1YXJlRnJhbWUuWkluZGV4ID0gc3F1YXJlT2JqLlpJbmRleAoJCQlzcXVhcmVGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gc3F1YXJlT2JqLkNvbG9yCgkJCXNxdWFyZUZyYW1lLlZpc2libGUgPSBzcXVhcmVPYmouVmlzaWJsZQoKCQkJdWlTdHJva2UuVGhpY2tuZXNzID0gc3F1YXJlT2JqLlRoaWNrbmVzcwoJCQl1aVN0cm9rZS5FbmFibGVkID0gbm90IHNxdWFyZU9iai5GaWxsZWQKCQkJdWlTdHJva2UuTGluZUpvaW5Nb2RlID0gRW51bS5MaW5lSm9pbk1vZGUuTWl0ZXIKCgkJCXNxdWFyZUZyYW1lLlBhcmVudCwgdWlTdHJva2UuUGFyZW50ID0gZHJhd2luZ1VJLCBzcXVhcmVGcmFtZQoJCQlsb2NhbCBicyA9IHRhYmxlLmNyZWF0ZSgwKQoJCQl0YWJsZS5pbnNlcnQoZHJhd2luZ3MsYnMpCgkJCXJldHVybiBzZXRtZXRhdGFibGUoYnMsIHsKCQkJCV9fbmV3aW5kZXggPSBmdW5jdGlvbihfLCBpbmRleCwgdmFsdWUpCgkJCQkJaWYgdHlwZW9mKHNxdWFyZU9ialtpbmRleF0pID09ICJuaWwiIHRoZW4gcmV0dXJuIGVuZAoKCQkJCQlpZiBpbmRleCA9PSAiU2l6ZSIgdGhlbgoJCQkJCQlzcXVhcmVGcmFtZS5TaXplID0gVURpbTIuZnJvbU9mZnNldCh2YWx1ZS5YLCB2YWx1ZS5ZKQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiUG9zaXRpb24iIHRoZW4KCQkJCQkJc3F1YXJlRnJhbWUuUG9zaXRpb24gPSBVRGltMi5mcm9tT2Zmc2V0KHZhbHVlLlgsIHZhbHVlLlkpCgkJCQkJZWxzZWlmIGluZGV4ID09ICJUaGlja25lc3MiIHRoZW4KCQkJCQkJdmFsdWUgPSBtYXRoLmNsYW1wKHZhbHVlLCAwLjYsIDB4N2ZmZmZmZmYpCgkJCQkJCXVpU3Ryb2tlLlRoaWNrbmVzcyA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJGaWxsZWQiIHRoZW4KCQkJCQkJc3F1YXJlRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IChpZiB2YWx1ZSB0aGVuIGNvbnZlcnRUcmFuc3BhcmVuY3koc3F1YXJlT2JqLlRyYW5zcGFyZW5jeSkgZWxzZSAxKQoJCQkJCQl1aVN0cm9rZS5FbmFibGVkID0gbm90IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJWaXNpYmxlIiB0aGVuCgkJCQkJCXNxdWFyZUZyYW1lLlZpc2libGUgPSB2YWx1ZQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiWkluZGV4IiB0aGVuCgkJCQkJCXNxdWFyZUZyYW1lLlpJbmRleCA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJUcmFuc3BhcmVuY3kiIHRoZW4KCQkJCQkJbG9jYWwgdHJhbnNwYXJlbmN5ID0gY29udmVydFRyYW5zcGFyZW5jeSh2YWx1ZSkKCgkJCQkJCXNxdWFyZUZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAoaWYgc3F1YXJlT2JqLkZpbGxlZCB0aGVuIHRyYW5zcGFyZW5jeSBlbHNlIDEpCgkJCQkJCXVpU3Ryb2tlLlRyYW5zcGFyZW5jeSA9IHRyYW5zcGFyZW5jeQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiQ29sb3IiIHRoZW4KCQkJCQkJdWlTdHJva2UuQ29sb3IgPSB2YWx1ZQoJCQkJCQlzcXVhcmVGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gdmFsdWUKCQkJCQllbmQKCQkJCQlzcXVhcmVPYmpbaW5kZXhdID0gdmFsdWUKCQkJCWVuZCwKCQkJCV9faW5kZXggPSBmdW5jdGlvbihzZWxmLCBpbmRleCkKCQkJCQlpZiBpbmRleCA9PSAiUmVtb3ZlIiBvciBpbmRleCA9PSAiRGVzdHJveSIgdGhlbgoJCQkJCQlyZXR1cm4gZnVuY3Rpb24oKQoJCQkJCQkJc3F1YXJlRnJhbWU6RGVzdHJveSgpCgkJCQkJCQlzcXVhcmVPYmouUmVtb3ZlKHNlbGYpCgkJCQkJCQlyZXR1cm4gc3F1YXJlT2JqOlJlbW92ZSgpCgkJCQkJCWVuZAoJCQkJCWVuZAoJCQkJCXJldHVybiBzcXVhcmVPYmpbaW5kZXhdCgkJCQllbmQKCQkJfSkKCQllbHNlaWYgZHJhd2luZ1R5cGUgPT0gIkltYWdlIiB0aGVuCgkJCWxvY2FsIGltYWdlT2JqID0gKHsKCQkJCURhdGEgPSAiIiwKCQkJCURhdGFVUkwgPSAicmJ4YXNzZXRpZDovLzAiLAoJCQkJU2l6ZSA9IFZlY3RvcjIuemVybywKCQkJCVBvc2l0aW9uID0gVmVjdG9yMi56ZXJvCgkJCX0gKyBiYXNlRHJhd2luZ09iaikKCgkJCWxvY2FsIGltYWdlRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiKQoJCQlpbWFnZUZyYW1lLk5hbWUgPSBkcmF3aW5nSW5kZXgKCQkJaW1hZ2VGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwCgkJCWltYWdlRnJhbWUuU2NhbGVUeXBlID0gRW51bS5TY2FsZVR5cGUuU3RyZXRjaAoJCQlpbWFnZUZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCgoJCQlpbWFnZUZyYW1lLlZpc2libGUgPSBpbWFnZU9iai5WaXNpYmxlCgkJCWltYWdlRnJhbWUuWkluZGV4ID0gaW1hZ2VPYmouWkluZGV4CgkJCWltYWdlRnJhbWUuSW1hZ2VUcmFuc3BhcmVuY3kgPSBjb252ZXJ0VHJhbnNwYXJlbmN5KGltYWdlT2JqLlRyYW5zcGFyZW5jeSkKCQkJaW1hZ2VGcmFtZS5JbWFnZUNvbG9yMyA9IGltYWdlT2JqLkNvbG9yCgoJCQlpbWFnZUZyYW1lLlBhcmVudCA9IGRyYXdpbmdVSQoJCQlsb2NhbCBicyA9IHRhYmxlLmNyZWF0ZSgwKQoJCQl0YWJsZS5pbnNlcnQoZHJhd2luZ3MsYnMpCgkJCXJldHVybiBzZXRtZXRhdGFibGUoYnMsIHsKCQkJCV9fbmV3aW5kZXggPSBmdW5jdGlvbihfLCBpbmRleCwgdmFsdWUpCgkJCQkJaWYgdHlwZW9mKGltYWdlT2JqW2luZGV4XSkgPT0gIm5pbCIgdGhlbiByZXR1cm4gZW5kCgoJCQkJCWlmIGluZGV4ID09ICJEYXRhIiB0aGVuCgkJCQkJCS0tIGxhdGVyCgkJCQkJZWxzZWlmIGluZGV4ID09ICJEYXRhVVJMIiB0aGVuIC0tIHRlbXBvcmFyeSBwcm9wZXJ0eQoJCQkJCQlpbWFnZUZyYW1lLkltYWdlID0gdmFsdWUKCQkJCQllbHNlaWYgaW5kZXggPT0gIlNpemUiIHRoZW4KCQkJCQkJaW1hZ2VGcmFtZS5TaXplID0gVURpbTIuZnJvbU9mZnNldCh2YWx1ZS5YLCB2YWx1ZS5ZKQoJCQkJCWVsc2VpZiBpbmRleCA9PSAiUG9zaXRpb24iIHRoZW4KCQkJCQkJaW1hZ2VGcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLmZyb21PZmZzZXQodmFsdWUuWCwgdmFsdWUuWSkKCQkJCQllbHNlaWYgaW5kZXggPT0gIlZpc2libGUiIHRoZW4KCQkJCQkJaW1hZ2VGcmFtZS5WaXNpYmxlID0gdmFsdWUKCQkJCQllbHNlaWYgaW5kZXggPT0gIlpJbmRleCIgdGhlbgoJCQkJCQlpbWFnZUZyYW1lLlpJbmRleCA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJUcmFuc3BhcmVuY3kiIHRoZW4KCQkJCQkJaW1hZ2VGcmFtZS5JbWFnZVRyYW5zcGFyZW5jeSA9IGNvbnZlcnRUcmFuc3BhcmVuY3kodmFsdWUpCgkJCQkJZWxzZWlmIGluZGV4ID09ICJDb2xvciIgdGhlbgoJCQkJCQlpbWFnZUZyYW1lLkltYWdlQ29sb3IzID0gdmFsdWUKCQkJCQllbmQKCQkJCQlpbWFnZU9ialtpbmRleF0gPSB2YWx1ZQoJCQkJZW5kLAoJCQkJX19pbmRleCA9IGZ1bmN0aW9uKHNlbGYsIGluZGV4KQoJCQkJCWlmIGluZGV4ID09ICJSZW1vdmUiIG9yIGluZGV4ID09ICJEZXN0cm95IiB0aGVuCgkJCQkJCXJldHVybiBmdW5jdGlvbigpCgkJCQkJCQlpbWFnZUZyYW1lOkRlc3Ryb3koKQoJCQkJCQkJaW1hZ2VPYmouUmVtb3ZlKHNlbGYpCgkJCQkJCQlyZXR1cm4gaW1hZ2VPYmo6UmVtb3ZlKCkKCQkJCQkJZW5kCgkJCQkJZWxzZWlmIGluZGV4ID09ICJEYXRhIiB0aGVuCgkJCQkJCXJldHVybiBuaWwgLS0gVE9ETzogYWRkIGVycm9yIGhlcmUKCQkJCQllbmQKCQkJCQlyZXR1cm4gaW1hZ2VPYmpbaW5kZXhdCgkJCQllbmQKCQkJfSkKCQllbHNlaWYgZHJhd2luZ1R5cGUgPT0gIlF1YWQiIHRoZW4KCQkJbG9jYWwgcXVhZE9iaiA9ICh7CgkJCQlQb2ludEEgPSBWZWN0b3IyLnplcm8sCgkJCQlQb2ludEIgPSBWZWN0b3IyLnplcm8sCgkJCQlQb2ludEMgPSBWZWN0b3IyLnplcm8sCgkJCQlQb2ludEQgPSBWZWN0b3IzLnplcm8sCgkJCQlUaGlja25lc3MgPSAxLAoJCQkJRmlsbGVkID0gZmFsc2UKCQkJfSArIGJhc2VEcmF3aW5nT2JqKQoKCQkJbG9jYWwgX2xpbmVQb2ludHMgPSB0YWJsZS5jcmVhdGUoMCkKCQkJX2xpbmVQb2ludHMuQSA9IERyYXdpbmdMaWIubmV3KCJMaW5lIikKCQkJX2xpbmVQb2ludHMuQiA9IERyYXdpbmdMaWIubmV3KCJMaW5lIikKCQkJX2xpbmVQb2ludHMuQyA9IERyYXdpbmdMaWIubmV3KCJMaW5lIikKCQkJX2xpbmVQb2ludHMuRCA9IERyYXdpbmdMaWIubmV3KCJMaW5lIikKCQkJbG9jYWwgYnMgPSB0YWJsZS5jcmVhdGUoMCkKCQkJdGFibGUuaW5zZXJ0KGRyYXdpbmdzLGJzKQoJCQlyZXR1cm4gc2V0bWV0YXRhYmxlKGJzLCB7CgkJCQlfX25ld2luZGV4ID0gZnVuY3Rpb24oXywgaW5kZXgsIHZhbHVlKQoJCQkJCWlmIHR5cGVvZihxdWFkT2JqW2luZGV4XSkgPT0gIm5pbCIgdGhlbiByZXR1cm4gZW5kCgoJCQkJCWlmIGluZGV4ID09ICJQb2ludEEiIHRoZW4KCQkJCQkJX2xpbmVQb2ludHMuQS5Gcm9tID0gdmFsdWUKCQkJCQkJX2xpbmVQb2ludHMuQi5UbyA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJQb2ludEIiIHRoZW4KCQkJCQkJX2xpbmVQb2ludHMuQi5Gcm9tID0gdmFsdWUKCQkJCQkJX2xpbmVQb2ludHMuQy5UbyA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJQb2ludEMiIHRoZW4KCQkJCQkJX2xpbmVQb2ludHMuQy5Gcm9tID0gdmFsdWUKCQkJCQkJX2xpbmVQb2ludHMuRC5UbyA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJQb2ludEQiIHRoZW4KCQkJCQkJX2xpbmVQb2ludHMuRC5Gcm9tID0gdmFsdWUKCQkJCQkJX2xpbmVQb2ludHMuQS5UbyA9IHZhbHVlCgkJCQkJZWxzZWlmIChpbmRleCA9PSAiVGhpY2tuZXNzIiBvciBpbmRleCA9PSAiVmlzaWJsZSIgb3IgaW5kZXggPT0gIkNvbG9yIiBvciBpbmRleCA9PSAiWkluZGV4IikgdGhlbgoJCQkJCQlmb3IgXywgbGluZVBvaW50IGluIF9saW5lUG9pbnRzIGRvCgkJCQkJCQlsaW5lUG9pbnRbaW5kZXhdID0gdmFsdWUKCQkJCQkJZW5kCgkJCQkJZWxzZWlmIGluZGV4ID09ICJGaWxsZWQiIHRoZW4KCQkJCQkJLS0gbGF0ZXIKCQkJCQllbmQKCQkJCQlxdWFkT2JqW2luZGV4XSA9IHZhbHVlCgkJCQllbmQsCgkJCQlfX2luZGV4ID0gZnVuY3Rpb24oc2VsZiwgaW5kZXgpCgkJCQkJaWYgaW5kZXggPT0gIlJlbW92ZSIgdGhlbgoJCQkJCQlyZXR1cm4gZnVuY3Rpb24oKQoJCQkJCQkJZm9yIF8sIGxpbmVQb2ludCBpbiBfbGluZVBvaW50cyBkbwoJCQkJCQkJCWxpbmVQb2ludDpSZW1vdmUoKQoJCQkJCQkJZW5kCgoJCQkJCQkJcXVhZE9iai5SZW1vdmUoc2VsZikKCQkJCQkJCXJldHVybiBxdWFkT2JqOlJlbW92ZSgpCgkJCQkJCWVuZAoJCQkJCWVuZAoJCQkJCWlmIGluZGV4ID09ICJEZXN0cm95IiB0aGVuCgkJCQkJCXJldHVybiBmdW5jdGlvbigpCgkJCQkJCQlmb3IgXywgbGluZVBvaW50IGluIF9saW5lUG9pbnRzIGRvCgkJCQkJCQkJbGluZVBvaW50OlJlbW92ZSgpCgkJCQkJCQllbmQKCgkJCQkJCQlxdWFkT2JqLlJlbW92ZShzZWxmKQoJCQkJCQkJcmV0dXJuIHF1YWRPYmo6UmVtb3ZlKCkKCQkJCQkJZW5kCgkJCQkJZW5kCgkJCQkJcmV0dXJuIHF1YWRPYmpbaW5kZXhdCgkJCQllbmQKCQkJfSkKCQllbHNlaWYgZHJhd2luZ1R5cGUgPT0gIlRyaWFuZ2xlIiB0aGVuCgkJCWxvY2FsIHRyaWFuZ2xlT2JqID0gKHsKCQkJCVBvaW50QSA9IFZlY3RvcjIuemVybywKCQkJCVBvaW50QiA9IFZlY3RvcjIuemVybywKCQkJCVBvaW50QyA9IFZlY3RvcjIuemVybywKCQkJCVRoaWNrbmVzcyA9IDEsCgkJCQlGaWxsZWQgPSBmYWxzZQoJCQl9ICsgYmFzZURyYXdpbmdPYmopCgoJCQlsb2NhbCBfbGluZVBvaW50cyA9IHRhYmxlLmNyZWF0ZSgwKQoJCQlfbGluZVBvaW50cy5BID0gRHJhd2luZ0xpYi5uZXcoIkxpbmUiKQoJCQlfbGluZVBvaW50cy5CID0gRHJhd2luZ0xpYi5uZXcoIkxpbmUiKQoJCQlfbGluZVBvaW50cy5DID0gRHJhd2luZ0xpYi5uZXcoIkxpbmUiKQoJCQlsb2NhbCBicyA9IHRhYmxlLmNyZWF0ZSgwKQoJCQl0YWJsZS5pbnNlcnQoZHJhd2luZ3MsYnMpCgkJCXJldHVybiBzZXRtZXRhdGFibGUoYnMsIHsKCQkJCV9fbmV3aW5kZXggPSBmdW5jdGlvbihfLCBpbmRleCwgdmFsdWUpCgkJCQkJaWYgdHlwZW9mKHRyaWFuZ2xlT2JqW2luZGV4XSkgPT0gIm5pbCIgdGhlbiByZXR1cm4gZW5kCgoJCQkJCWlmIGluZGV4ID09ICJQb2ludEEiIHRoZW4KCQkJCQkJX2xpbmVQb2ludHMuQS5Gcm9tID0gdmFsdWUKCQkJCQkJX2xpbmVQb2ludHMuQi5UbyA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJQb2ludEIiIHRoZW4KCQkJCQkJX2xpbmVQb2ludHMuQi5Gcm9tID0gdmFsdWUKCQkJCQkJX2xpbmVQb2ludHMuQy5UbyA9IHZhbHVlCgkJCQkJZWxzZWlmIGluZGV4ID09ICJQb2ludEMiIHRoZW4KCQkJCQkJX2xpbmVQb2ludHMuQy5Gcm9tID0gdmFsdWUKCQkJCQkJX2xpbmVQb2ludHMuQS5UbyA9IHZhbHVlCgkJCQkJZWxzZWlmIChpbmRleCA9PSAiVGhpY2tuZXNzIiBvciBpbmRleCA9PSAiVmlzaWJsZSIgb3IgaW5kZXggPT0gIkNvbG9yIiBvciBpbmRleCA9PSAiWkluZGV4IikgdGhlbgoJCQkJCQlmb3IgXywgbGluZVBvaW50IGluIF9saW5lUG9pbnRzIGRvCgkJCQkJCQlsaW5lUG9pbnRbaW5kZXhdID0gdmFsdWUKCQkJCQkJZW5kCgkJCQkJZWxzZWlmIGluZGV4ID09ICJGaWxsZWQiIHRoZW4KCQkJCQkJLS0gbGF0ZXIKCQkJCQllbmQKCQkJCQl0cmlhbmdsZU9ialtpbmRleF0gPSB2YWx1ZQoJCQkJZW5kLAoJCQkJX19pbmRleCA9IGZ1bmN0aW9uKHNlbGYsIGluZGV4KQoJCQkJCWlmIGluZGV4ID09ICJSZW1vdmUiIHRoZW4KCQkJCQkJcmV0dXJuIGZ1bmN0aW9uKCkKCQkJCQkJCWZvciBfLCBsaW5lUG9pbnQgaW4gX2xpbmVQb2ludHMgZG8KCQkJCQkJCQlsaW5lUG9pbnQ6UmVtb3ZlKCkKCQkJCQkJCWVuZAoKCQkJCQkJCXRyaWFuZ2xlT2JqLlJlbW92ZShzZWxmKQoJCQkJCQkJcmV0dXJuIHRyaWFuZ2xlT2JqOlJlbW92ZSgpCgkJCQkJCWVuZAoJCQkJCWVuZAoJCQkJCWlmIGluZGV4ID09ICJEZXN0cm95IiB0aGVuCgkJCQkJCXJldHVybiBmdW5jdGlvbigpCgkJCQkJCQlmb3IgXywgbGluZVBvaW50IGluIF9saW5lUG9pbnRzIGRvCgkJCQkJCQkJbGluZVBvaW50OlJlbW92ZSgpCgkJCQkJCQllbmQKCgkJCQkJCQl0cmlhbmdsZU9iai5SZW1vdmUoc2VsZikKCQkJCQkJCXJldHVybiB0cmlhbmdsZU9iajpSZW1vdmUoKQoJCQkJCQllbmQKCQkJCQllbmQKCQkJCQlyZXR1cm4gdHJpYW5nbGVPYmpbaW5kZXhdCgkJCQllbmQKCQkJfSkKCQllbmQKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLkRyYXdpbmcgPSBEcmF3aW5nTGliCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmdldGdlbnYgPSBmdW5jdGlvbigpCgkJcmV0dXJuIGNsb25lZF9lbnZpcm9ubWVudC5nbG9iYWwKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5nZXRyZW52ID0gZnVuY3Rpb24oKQoJCXJldHVybiBlbnZpcm9ubWVudC5yb2Jsb3gKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5wcmludGlkZW50aXR5ID0gZnVuY3Rpb24oKQoJCXByaW50KCJDdXJyZW50IGlkZW50aXR5IGlzIDciKQoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmNyeXB0LmJhc2U2NGVuY29kZSA9IGZ1bmN0aW9uKGRhdGEpCgkJYXNzZXJ0KGRhdGEsICJNaXNzaW5nICMxIGFyZ3VtZW50IikKCQlhc3NlcnQodHlwZW9mKGRhdGEpID09ICJzdHJpbmciLCAiRXhwZWN0ZWQgIzEgYXJndW1lbnQgdG8gYmUgc3RyaW5nLCBnb3QgIi4udHlwZW9mKGRhdGEpLi4gIiBpbnN0ZWFkIikKCgkJbG9jYWwgZW5jb2RlZCA9IHV0aWxzLmJhc2U2NF9lbmNvZGUoZGF0YSkKCgkJcmV0dXJuIGVuY29kZWQKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5jcnlwdC5iYXNlNjRkZWNvZGUgPSBmdW5jdGlvbihkYXRhKQoJCWFzc2VydChkYXRhLCAiTWlzc2luZyAjMSBhcmd1bWVudCIpCgkJYXNzZXJ0KHR5cGVvZihkYXRhKSA9PSAic3RyaW5nIiwgIkV4cGVjdGVkICMxIGFyZ3VtZW50IHRvIGJlIHN0cmluZywgZ290ICIuLnR5cGVvZihkYXRhKS4uICIgaW5zdGVhZCIpCgoJCWxvY2FsIGRlY29kZWQgPSB1dGlscy5iYXNlNjRfZGVjb2RlKGRhdGEpCgoJCXJldHVybiBkZWNvZGVkCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuY3J5cHQuYmFzZTY0LmVuY29kZSA9IGVudmlyb25tZW50Lmdsb2JhbC5jcnlwdC5iYXNlNjRlbmNvZGUKCWVudmlyb25tZW50Lmdsb2JhbC5jcnlwdC5iYXNlNjRfZW5jb2RlID0gZW52aXJvbm1lbnQuZ2xvYmFsLmNyeXB0LmJhc2U2NGVuY29kZQoJZW52aXJvbm1lbnQuZ2xvYmFsLmJhc2U2NC5lbmNvZGUgPSBlbnZpcm9ubWVudC5nbG9iYWwuY3J5cHQuYmFzZTY0ZW5jb2RlCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmNyeXB0LmJhc2U2NC5kZWNvZGUgPSBlbnZpcm9ubWVudC5nbG9iYWwuY3J5cHQuYmFzZTY0ZGVjb2RlCgllbnZpcm9ubWVudC5nbG9iYWwuY3J5cHQuYmFzZTY0X2RlY29kZSA9IGVudmlyb25tZW50Lmdsb2JhbC5jcnlwdC5iYXNlNjRkZWNvZGUKCWVudmlyb25tZW50Lmdsb2JhbC5iYXNlNjQuZGVjb2RlID0gZW52aXJvbm1lbnQuZ2xvYmFsLmNyeXB0LmJhc2U2NGRlY29kZQoKCWVudmlyb25tZW50Lmdsb2JhbC5pc3JlbmRlcm9iaiA9IGZ1bmN0aW9uKC4uLikKCQlpZiB0YWJsZS5maW5kKGRyYXdpbmdzLC4uLikgdGhlbgoJCQlyZXR1cm4gdHJ1ZQoJCWVsc2UKCQkJcmV0dXJuIGZhbHNlCgkJZW5kCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuZ2V0cmVuZGVycHJvcGVydHkgPSBmdW5jdGlvbihhLGIpCgkJcmV0dXJuIGFbYl0KCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLnNldHJlbmRlcnByb3BlcnR5ID0gZnVuY3Rpb24oYSxiLGMpCgkJYVtiXSA9IGMKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5jbGVhcmRyYXdjYWNoZSA9IGZ1bmN0aW9uKCkgLS0gaWRrIHRoZXJlIGlzIG5vIGNhY2hlIHRvIGNsZWFyCgkJcmV0dXJuIHRydWUKCWVuZAoKCS0tIHJjb25zb2xlIHN0dWZmCgoJZW52aXJvbm1lbnQuZ2xvYmFsLnJjb25zb2xlY3JlYXRlID0gZnVuY3Rpb24oKQoKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5yY29uc29sZWNsZWFyID0gZnVuY3Rpb24oKQoKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5yY29uc29sZWRlc3Ryb3kgPSBmdW5jdGlvbigpCgoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLnJjb25zb2xlaW5wdXQgPSBmdW5jdGlvbigpCgoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLnJjb25zb2xlcHJpbnQgPSBmdW5jdGlvbihhcmcxKQoJCXByaW50KCJbIENPTlNPTEUgXSAiLi50b3N0cmluZyhhcmcxKSkKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5yY29uc29sZXNldHRpdGxlID0gZnVuY3Rpb24oKQoKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5jb25zb2xlY2xlYXIgPSBmdW5jdGlvbigpCgoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwuY29uc29sZWNyZWF0ZSA9IGZ1bmN0aW9uKCkKCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuY29uc29sZWRlc3Ryb3kgPSBmdW5jdGlvbigpCgoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmNvbnNvbGVpbnB1dCA9IGZ1bmN0aW9uKCkKCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuY29uc29sZXByaW50ID0gZW52aXJvbm1lbnQuZ2xvYmFsLnJjb25zb2xlcHJpbnQKCgllbnZpcm9ubWVudC5nbG9iYWwuY29uc29sZXNldHRpdGxlID0gZW52aXJvbm1lbnQuZ2xvYmFsLnJjb25zb2xlc2V0dGl0bGUKCWVudmlyb25tZW50Lmdsb2JhbC5yY29uc29sZW5hbWUgPSBlbnZpcm9ubWVudC5nbG9iYWwucmNvbnNvbGVzZXR0aXRsZQoKCWVudmlyb25tZW50Lmdsb2JhbC5nZXRzY3JpcHRoYXNoID0gZnVuY3Rpb24oc2NyaXB0KQoJCWxvY2FsIGlzVmFsaWRUeXBlID0gbmlsOwoJCWlmIHR5cGVvZihzY3JpcHQpID09ICJJbnN0YW5jZSIgdGhlbgoJCQlpc1ZhbGlkVHlwZSA9IHNjcmlwdDpJc0EoIlNjcmlwdCIpIG9yIHNjcmlwdDpJc0EoIkxvY2FsU2NyaXB0Iikgb3Igc2NyaXB0OklzQSgiTHVhU291cmNlQ29udGFpbmVyIikKCQllbmQKCQlhc3NlcnQoaXNWYWxpZFR5cGUsICJFeHBlY3RlZCBhIHNjcmlwdCwgbG9jYWxzY3JpcHQsIG9yIEx1YVNvdXJjZUNvbnRhaW5lciIpCgkJcmV0dXJuIHNjcmlwdDpHZXRIYXNoKCkKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5iYXNlNjRfZW5jb2RlID0gZW52aXJvbm1lbnQuZ2xvYmFsLmNyeXB0LmJhc2U2NGVuY29kZQoJZW52aXJvbm1lbnQuZ2xvYmFsLmJhc2U2NF9kZWNvZGUgPSBlbnZpcm9ubWVudC5nbG9iYWwuY3J5cHQuYmFzZTY0ZGVjb2RlCgoJbG9jYWwgZmFrZV9pZGVudGl0eSA9IDM7CgoJZW52aXJvbm1lbnQuZ2xvYmFsLmlkZW50aWZ5ZXhlY3V0b3IgPSBmdW5jdGlvbigpCgkJcmV0dXJuICJHbGl4IiwgIjEuMCIKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5nZXRleGVjdXRvcm5hbWUgPSBlbnZpcm9ubWVudC5nbG9iYWwuaWRlbnRpZnlleGVjdXRvcgoKCWVudmlyb25tZW50Lmdsb2JhbC5jbG9uZXJlZiA9IGZ1bmN0aW9uKHJlZmVyZW5jZSkKCQlhc3NlcnQocmVmZXJlbmNlLCAiTWlzc2luZyAjMSBhcmd1bWVudCIpCgkJYXNzZXJ0KHR5cGVvZihyZWZlcmVuY2UpID09ICJJbnN0YW5jZSIsICJFeHBlY3RlZCAjMSBhcmd1bWVudCB0byBiZSBJbnN0YW5jZSwgZ290ICIuLnRvc3RyaW5nKHR5cGVvZihyZWZlcmVuY2UpKS4uIiBpbnN0ZWFkIikKCgkJaWYgZ2FtZTpGaW5kRmlyc3RDaGlsZChyZWZlcmVuY2UuTmFtZSkgIG9yIHJlZmVyZW5jZS5QYXJlbnQgPT0gZ2FtZSB0aGVuIC0tICBkb250IG1ha2UgaXQgY2xvbmUgc2VydmljZXMKCQkJcmV0dXJuIHJlZmVyZW5jZQoJCWVsc2UKCQkJbG9jYWwgY2xhc3MgPSByZWZlcmVuY2UuQ2xhc3NOYW1lCgoJCQlsb2NhbCBjbG9uZWQgPSBJbnN0YW5jZS5uZXcoY2xhc3MpCgoJCQlsb2NhbCBtdCA9IHsKCQkJCV9faW5kZXggPSByZWZlcmVuY2UsCgkJCQlfX25ld2luZGV4ID0gZnVuY3Rpb24odCwgaywgdikKCgkJCQkJaWYgayA9PSAiTmFtZSIgdGhlbgoJCQkJCQlyZWZlcmVuY2UuTmFtZSA9IHYKCQkJCQllbmQKCQkJCQlyYXdzZXQodCwgaywgdikKCQkJCWVuZAoJCQl9CgoJCQlsb2NhbCBwcm94eSA9IHNldG1ldGF0YWJsZSh7fSwgbXQpCgoJCQlyZXR1cm4gcHJveHkKCQllbmQKCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuY29tcGFyZWluc3RhbmNlcyA9IGZ1bmN0aW9uKCkgcmV0dXJuIHRydWUgZW5kCgoJLS0gY2FjaGUgc3R1ZmYKCglsb2NhbCBjYWNoZSA9IHt9CgoJZW52aXJvbm1lbnQuZ2xvYmFsLmNhY2hlLmlzY2FjaGVkID0gZnVuY3Rpb24odGhpbmcpCgkJcmV0dXJuIGNhY2hlW3RoaW5nXSB+PSAnUkVNT1ZFJyBvciB0aGluZzpJc0Rlc2NlbmRhbnRPZihnYW1lKSBvciBmYWxzZSAtLSBJZiBpdCdzIGNhY2hlIGlzbnQgJ1JFTU9WRScgYW5kIGl0cyBhIGRlcyBvZiBnYW1lIChVc3VhbGx5IGFsd2F5cyB0cnVlKSBvciBpZiBpdHMgY2FjaGUgaXMgJ1JFTU9WRScgdGhlbiBpdHMgZmFsc2UuCgllbmQKCWVudmlyb25tZW50Lmdsb2JhbC5jYWNoZS5pbnZhbGlkYXRlID0gZnVuY3Rpb24odGhpbmcpCgkJY2FjaGVbdGhpbmddID0gJ1JFTU9WRScKCQl0aGluZy5QYXJlbnQgPSBuaWwKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLmNhY2hlLnJlcGxhY2UgPSBmdW5jdGlvbihhLCBiKQoJCWlmIGNhY2hlW2FdIHRoZW4KCQkJY2FjaGVbYV0gPSBiCgkJZW5kCgkJbG9jYWwgbiwgcCA9IGEuTmFtZSwgYS5QYXJlbnQgLS0gbmFtZSwgcGFyZW50CgkJYi5QYXJlbnQgPSBwCgkJYi5OYW1lID0gbgoJCWEuUGFyZW50ID0gbmlsCgllbmQKCgktLSBFTkQgT0YgQ0FDSEUKCgllbnZpcm9ubWVudC5nbG9iYWwuZmlyZWNsaWNrZGV0ZWN0b3IgPSBmdW5jdGlvbihpZGssIGRpc3RhbmNlLCBldmVudCkKCQlsb2NhbCBDbGlja0RldGVjdG9yID0gaWRrOkZpbmRGaXJzdENoaWxkKCJDbGlja0RldGVjdG9yIikgb3IgaWRrCgkJbG9jYWwgVmlydHVhbElucHV0TWFuYWdlciA9IGdhbWU6R2V0U2VydmljZSgiVmlydHVhbElucHV0TWFuYWdlciIpCgkJbG9jYWwgdXB2YWwxID0gQ2xpY2tEZXRlY3Rvci5QYXJlbnQKCQlsb2NhbCBwYXJ0ID0gSW5zdGFuY2UubmV3KCJQYXJ0IikKCQlwYXJ0LlRyYW5zcGFyZW5jeSA9IDEKCQlwYXJ0LlNpemUgPSBWZWN0b3IzLm5ldygzMCwgMzAsIDMwKQoJCXBhcnQuQW5jaG9yZWQgPSB0cnVlCgkJcGFydC5DYW5Db2xsaWRlID0gZmFsc2UKCQlwYXJ0LlBhcmVudCA9IHdvcmtzcGFjZQoJCUNsaWNrRGV0ZWN0b3IuUGFyZW50ID0gcGFydAoJCUNsaWNrRGV0ZWN0b3IuTWF4QWN0aXZhdGlvbkRpc3RhbmNlID0gbWF0aC5odWdlCgkJbG9jYWwgY29ubmVjdGlvbiA9IG5pbAoJCWNvbm5lY3Rpb24gPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCgkJCXBhcnQuQ0ZyYW1lID0gd29ya3NwYWNlLkNhbWVyYS5DRnJhbWUgKiBDRnJhbWUubmV3KDAsIDAsIC0yMCkgKiBDRnJhbWUubmV3KHdvcmtzcGFjZS5DYW1lcmEuQ0ZyYW1lLkxvb2tWZWN0b3IuWCwgd29ya3NwYWNlLkNhbWVyYS5DRnJhbWUuTG9va1ZlY3Rvci5ZLCB3b3Jrc3BhY2UuQ2FtZXJhLkNGcmFtZS5Mb29rVmVjdG9yLlopCgkJCWdhbWU6R2V0U2VydmljZSgiVmlydHVhbFVzZXIiKTpDbGlja0J1dHRvbjEoVmVjdG9yMi5uZXcoMjAsIDIwKSwgd29ya3NwYWNlOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiQ2FtZXJhIikuQ0ZyYW1lKQoJCWVuZCkKCQlDbGlja0RldGVjdG9yLk1vdXNlQ2xpY2s6T25jZShmdW5jdGlvbigpCgkJCWNvbm5lY3Rpb246RGlzY29ubmVjdCgpCgkJCUNsaWNrRGV0ZWN0b3IuUGFyZW50ID0gdXB2YWwxCgkJCXBhcnQ6RGVzdHJveSgpCgkJZW5kKQoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwuc2V0Y2xpcGJvYXJkID0gZnVuY3Rpb24oZGF0YSkKCQlhc3NlcnQoZGF0YSwgIk1pc3NpbmcgIzEgYXJndW1lbnQiKQoKCQlicmlkZ2U6c2VuZCgic2V0Y2xpcGJvYXJkIiwgdG9zdHJpbmcoZGF0YSkpCgllbmQKCWVudmlyb25tZW50Lmdsb2JhbC5zZXRyYnhjbGlwYm9hcmQgPSBmdW5jdGlvbihkYXRhKQoJCWFzc2VydChkYXRhLCAiTWlzc2luZyAjMSBhcmd1bWVudCIpCgoJCWJyaWRnZTpzZW5kKCJzZXRjbGlwYm9hcmQiLCB0b3N0cmluZyhkYXRhKSkKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC50b2NsaXBib2FyZCA9IGVudmlyb25tZW50Lmdsb2JhbC5zZXRjbGlwYm9hcmQKCgllbnZpcm9ubWVudC5nbG9iYWwud3JpdGVmaWxlID0gZnVuY3Rpb24oZmlsZV9uYW1lLCBkYXRhKQoJCWFzc2VydChmaWxlX25hbWUsICJNaXNzaW5nICMxIGFyZ3VtZW50IikKCQlhc3NlcnQodHlwZW9mKGZpbGVfbmFtZSkgPT0gInN0cmluZyIsICJFeHBlY3RlZCAjMSBhcmd1bWVudCB0byBiZSBzdHJpbmcsIGdvdCAiLi4gdHlwZW9mKGZpbGVfbmFtZSkuLiAiIGluc3RlYWQiKQoKCQlhc3NlcnQoZGF0YSwgIk1pc3NpbmcgIzIgYXJndW1lbnQiKQoKCQlmaWxlX25hbWUgPSBmaWxlX25hbWUKCgkJaWYgZmlsZV9uYW1lIH49IG5pbCB0aGVuCgkJCWJyaWRnZTpzZW5kKCJ3cml0ZWZpbGUiLCBmaWxlX25hbWUsIHRvc3RyaW5nKGRhdGEpKSAKCQllbHNlCgkJCXByaW50KCJJbGxlZ2FsIGZpbGUgZXh0ZW5zaW9uIGRldGVjdGVkIikKCQllbmQKCWVuZCAKCglsb2NhbCBldmVyeXRoaW5nID0ge2dhbWV9CgoJZ2FtZS5EZXNjZW5kYW50UmVtb3Zpbmc6Q29ubmVjdChmdW5jdGlvbihkZXMpCgkJY2FjaGVbZGVzXSA9ICdSRU1PVkUnCgllbmQpCglnYW1lLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGRlcykKCQljYWNoZVtkZXNdID0gdHJ1ZQoJCXRhYmxlLmluc2VydChldmVyeXRoaW5nLCBkZXMpCgllbmQpCgoJZm9yIGksIHYgaW4gcGFpcnMoZ2FtZTpHZXREZXNjZW5kYW50cygpKSBkbwoJCXRhYmxlLmluc2VydChldmVyeXRoaW5nLCB2KQoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmdldG5pbGluc3RhbmNlcyA9IGZ1bmN0aW9uKCkKCQlsb2NhbCBuaWxpID0ge30KCQlmb3IgaSwgdiBpbiBwYWlycyhldmVyeXRoaW5nKSBkbwoJCQlpZiB2LlBhcmVudCB+PSBuaWwgdGhlbiBjb250aW51ZSBlbmQKCQkJdGFibGUuaW5zZXJ0KG5pbGksIHYpCgkJZW5kCgkJcmV0dXJuIG5pbGkKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLmdldGdjID0gZW52aXJvbm1lbnQuZ2xvYmFsLmdldG5pbGluc3RhbmNlcwoJZW52aXJvbm1lbnQuZ2xvYmFsLm1ha2Vmb2xkZXIgPSBmdW5jdGlvbihmb2xkZXJfbmFtZSkKCQlwY2FsbChmdW5jdGlvbigpCgkJCWJyaWRnZTpzZW5kKCJtYWtlZm9sZGVyIiwgZm9sZGVyX25hbWUpCgkJZW5kKQoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmxvYWRmaWxlID0gZnVuY3Rpb24oZmlsZV9uYW1lKQoJCWxvY2FsIGNvbnRlbnQgPSBlbnZpcm9ubWVudC5nbG9iYWwucmVhZGZpbGUoZmlsZV9uYW1lKQoKCQlyZXR1cm4gZW52aXJvbm1lbnQuZ2xvYmFsLmxvYWRzdHJpbmcoY29udGVudCkKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5kb2ZpbGUgPSBmdW5jdGlvbihmaWxlX25hbWUpCgkJbG9jYWwgY29udGVudCA9IGVudmlyb25tZW50Lmdsb2JhbC5yZWFkZmlsZShmaWxlX25hbWUpCgoJCWVudmlyb25tZW50Lmdsb2JhbC5sb2Fkc3RyaW5nKGNvbnRlbnQpKCkKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5tZXNzYWdlYm94ID0gZnVuY3Rpb24oLi4uKQoJCWxvY2FsIGFyZ3MgPSB7fQoKCQlhc3NlcnQoYXJnc1sxXSwgIk1pc3NpbmcgIzEgYXJndW1lbnQiKQoJCWFzc2VydCh0eXBlb2YoYXJnc1sxXSkgPT0gInN0cmluZyIsICJFeHBlY3RlZCAjMSBhcmd1bWVudCB0byBiZSBzdHJpbmciKQoKCQlwcmludCgiWyBNRVNTQUdFQk9YIF0gIi4uYXJnc1sxXSkKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5tb3VzZTFjbGljayA9IGZ1bmN0aW9uKCkKCQlicmlkZ2U6c2VuZCgiaW5wdXRfYWN0aW9uIiwgIm1vdXNlMWNsaWNrIikKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLm1vdXNlMXByZXNzID0gZnVuY3Rpb24oKQoJCWJyaWRnZTpzZW5kKCJpbnB1dF9hY3Rpb24iLCAibW91c2UxcHJlc3MiKQoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwubW91c2UxcmVsZWFzZSA9IGZ1bmN0aW9uKCkKCQlicmlkZ2U6c2VuZCgiaW5wdXRfYWN0aW9uIiwgIm1vdXNlMXJlbGVhc2UiKQoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwubW91c2UyY2xpY2sgPSBmdW5jdGlvbigpCgkJYnJpZGdlOnNlbmQoImlucHV0X2FjdGlvbiIsICJtb3VzZTJjbGljayIpCgllbmQKCWVudmlyb25tZW50Lmdsb2JhbC5tb3VzZTJwcmVzcyA9IGZ1bmN0aW9uKCkKCQlicmlkZ2U6c2VuZCgiaW5wdXRfYWN0aW9uIiwgIm1vdXNlMnByZXNzIikKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLm1vdXNlMnJlbGVhc2UgPSBmdW5jdGlvbigpCgkJYnJpZGdlOnNlbmQoImlucHV0X2FjdGlvbiIsICJtb3VzZTJyZWxlYXNlIikKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLm1vdXNlbW92ZWFicyA9IGZ1bmN0aW9uKCkKCQlicmlkZ2U6c2VuZCgiaW5wdXRfYWN0aW9uIiwgIm1vdXNlbW92ZWFicyIpCgllbmQKCWVudmlyb25tZW50Lmdsb2JhbC5tb3VzZW1vdmVyZWwgPSBmdW5jdGlvbigpCgkJYnJpZGdlOnNlbmQoImlucHV0X2FjdGlvbiIsICJtb3VzZW1vdmVyZWwiKQoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwubW91c2VzY3JvbGwgPSBmdW5jdGlvbigpCgkJYnJpZGdlOnNlbmQoImlucHV0X2FjdGlvbiIsICJtb3VzZXNjcm9sbCIpCgllbmQKCglsb2NhbCByb2Jsb3hfYWN0aXZlID0gdHJ1ZQoKCWdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpLldpbmRvd0ZvY3VzZWQ6Q29ubmVjdChmdW5jdGlvbigpCgkJcm9ibG94X2FjdGl2ZSA9IHRydWUKCWVuZCkKCWdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpLldpbmRvd0ZvY3VzUmVsZWFzZWQ6Q29ubmVjdChmdW5jdGlvbigpCgkJcm9ibG94X2FjdGl2ZSA9IGZhbHNlCgllbmQpCgoJZW52aXJvbm1lbnQucm9ibG94LmxvYWQgPSBmdW5jdGlvbihnLCBhKQoKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLmlzcmJ4YWN0aXZlID0gZnVuY3Rpb24oKQoJCXJldHVybiByb2Jsb3hfYWN0aXZlCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuaXNnYW1lYWN0aXZlID0gZW52aXJvbm1lbnQuZ2xvYmFsLmlzcmJ4YWN0aXZlCgoJZW52aXJvbm1lbnQuZ2xvYmFsLnJlYWRmaWxlID0gZnVuY3Rpb24oZmlsZV9uYW1lKQoJCWFzc2VydChmaWxlX25hbWUsICJNaXNzaW5nICMxIGFyZ3VtZW50IikKCQlhc3NlcnQodHlwZW9mKGZpbGVfbmFtZSkgPT0gInN0cmluZyIsICJFeHBlY3RlZCAjMSBhcmd1bWVudCB0byBiZSBzdHJpbmcsIGdvdCAiLi4gdHlwZW9mKGZpbGVfbmFtZSkuLiAiIGluc3RlYWQiKQoKCQlsb2NhbCBzdWNjZWVkZWQsIHJlcyA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJZmlsZV9uYW1lID0gZmlsZV9uYW1lCgoJCQlpZiBmaWxlX25hbWUgfj0gbmlsIHRoZW4KCQkJCWxvY2FsIHJlc3BvbnNlID0gYnJpZGdlOnNlbmQoInJlYWRmaWxlIiwgZmlsZV9uYW1lKQoKCQkJCWlmIHR5cGVvZihyZXNwb25zZSkgPT0gInRhYmxlIiB0aGVuCgkJCQkJbG9jYWwgc3RhdHVzID0gcmVzcG9uc2VbInN0YXR1cyJdCgoJCQkJCWlmIHN0YXR1cyA9PSAic3VjY2VzcyIgdGhlbgoJCQkJCQlyZXR1cm4gcmVzcG9uc2VbIm1lc3NhZ2UiXSBvciAiIgoJCQkJCWVsc2UKCQkJCQkJZXJyb3IocmVzcG9uc2VbIm1lc3NhZ2UiXSkKCQkJCQkJcmV0dXJuCgkJCQkJZW5kCgkJCQllbHNlCgkJCQkJZXJyb3IoIlJlYWRmaWxlIGZhaWxlZCIpCgkJCQkJcmV0dXJuCgkJCQllbmQKCQkJZWxzZQoJCQkJZXJyb3IoIklsbGVnYWwgZmlsZSBleHRlbnNpb24gZGV0ZWN0ZWQiKQoJCQkJcmV0dXJuCgkJCWVuZAoJCWVuZCkKCgkJaWYgc3VjY2VlZGVkIHRoZW4KCQkJcmV0dXJuIHJlcwoJCWVsc2UKCQkJZXJyb3IocmVzKQoJCWVuZAoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmlzcmVhZG9ubHkgPSBmdW5jdGlvbih0YmwpCgkJaWYgdHlwZSh0YmwpIH49ICd0YWJsZScgdGhlbiByZXR1cm4gZmFsc2UgZW5kCgkJcmV0dXJuIHRhYmxlLmlzZnJvemVuKHRibCkKCWVuZAoKCgllbnZpcm9ubWVudC5nbG9iYWwuaXNmb2xkZXIgPSBmdW5jdGlvbihmb2xkZXIpCgkJYXNzZXJ0KGZvbGRlciwgIk1pc3NpbmcgIzEgYXJndW1lbnQiKQoJCWFzc2VydCh0eXBlb2YoZm9sZGVyKSA9PSAic3RyaW5nIiwgIkV4cGVjdGVkICMxIGFyZ3VtZW50IHRvIGJlIHN0cmluZywgZ290ICIuLnRvc3RyaW5nKHR5cGVvZihmb2xkZXIpKS4uICIgaW5zdGVhZCIpCgoJCWxvY2FsIHJlc3BvbnNlID0gYnJpZGdlOnNlbmQoImlzZm9sZGVyIiwgZm9sZGVyKQoKCQlpZiB0eXBlb2YocmVzcG9uc2UpID09ICJ0YWJsZSIgdGhlbgoJCQlsb2NhbCByZXF1ZXN0X3N0YXR1cyA9IHJlc3BvbnNlWyJzdGF0dXMiXQoKCQkJaWYgcmVxdWVzdF9zdGF0dXMgPT0gInN1Y2Nlc3MiIHRoZW4KCQkJCWlmIHJlc3BvbnNlWyJtZXNzYWdlIl0gPT0gIlRydWUiIHRoZW4KCQkJCQlyZXR1cm4gdHJ1ZQoJCQkJZWxzZQoJCQkJCXJldHVybiBmYWxzZQoJCQkJZW5kCgkJCWVsc2UKCQkJCWVycm9yKHJlc3BvbnNlWyJtZXNzYWdlIl0pCgkJCQlyZXR1cm4KCQkJZW5kCgkJZWxzZQoJCQllcnJvcigiaXNmb2xkZXIgZmFpbGVkIikKCQkJcmV0dXJuCgkJZW5kCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuZ2V0dGhyZWFkaWRlbnRpdHkgPSBmdW5jdGlvbigpCgkJcmV0dXJuIGZha2VfaWRlbnRpdHkKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5nZXR0aHJlYWRjb250ZXh0ID0gZW52aXJvbm1lbnQuZ2xvYmFsLmdldHRocmVhZGlkZW50aXR5CgoJZW52aXJvbm1lbnQuZ2xvYmFsLmdldGlkZW50aXR5ID0gZW52aXJvbm1lbnQuZ2xvYmFsLmdldHRocmVhZGlkZW50aXR5CgoJZW52aXJvbm1lbnQuZ2xvYmFsLnNldHRocmVhZGlkZW50aXR5ID0gZnVuY3Rpb24oaWRlbnRpdHkpCgkJZmFrZV9pZGVudGl0eSA9IGlkZW50aXR5CgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuc2V0aWRlbnRpdHkgPSBlbnZpcm9ubWVudC5nbG9iYWwuc2V0dGhyZWFkaWRlbnRpdHkKCWVudmlyb25tZW50Lmdsb2JhbC5zZXR0aHJlYWRjb250ZXh0ID0gZW52aXJvbm1lbnQuZ2xvYmFsLnNldHRocmVhZGlkZW50aXR5CgoKCWVudmlyb25tZW50Lmdsb2JhbC5xdWV1ZV9vbl90ZWxlcG9ydCA9IGZ1bmN0aW9uKCkKCQlwcmludCAiTm90IGltcGxlbWVudGVkIgoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwucXVldWVvbnRlbGVwb3J0ID0gZW52aXJvbm1lbnQuZ2xvYmFsLnF1ZXVlX29uX3RlbGVwb3J0CgoJZW52aXJvbm1lbnQuZ2xvYmFsLmdldGxvYWRlZG1vZHVsZXMgPSBmdW5jdGlvbigpCgkJbG9jYWwgbW9kdWxlU2NyaXB0cyA9IHt9CgkJZm9yIF8sIG9iaiBpbiBwYWlycyhnYW1lOkdldERlc2NlbmRhbnRzKCkpIGRvCgkJCWlmIHR5cGVvZihvYmopID09ICJJbnN0YW5jZSIgYW5kIG9iajpJc0EoIk1vZHVsZVNjcmlwdCIpIHRoZW4gdGFibGUuaW5zZXJ0KG1vZHVsZVNjcmlwdHMsIG9iaikgZW5kCgkJZW5kCgkJcmV0dXJuIG1vZHVsZVNjcmlwdHMKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5nZXRydW5uaW5nc2NyaXB0cyA9IGZ1bmN0aW9uKCkKCQlsb2NhbCBydW5uaW5nU2NyaXB0cyA9IHt9CgoJCWZvciBfLCBvYmogaW4gcGFpcnMoZ2FtZTpHZXREZXNjZW5kYW50cygpKSBkbwoJCQlpZiB0eXBlb2Yob2JqKSA9PSAiSW5zdGFuY2UiIGFuZCBvYmo6SXNBKCJNb2R1bGVTY3JpcHQiKSB0aGVuCgkJCQl0YWJsZS5pbnNlcnQocnVubmluZ1NjcmlwdHMsIG9iaikKCQkJZWxzZWlmIHR5cGVvZihvYmopID09ICJJbnN0YW5jZSIgYW5kIG9iajpJc0EoIkxvY2FsU2NyaXB0IikgdGhlbgoJCQkJaWYgb2JqLkVuYWJsZWQgPT0gdHJ1ZSB0aGVuCgkJCQkJdGFibGUuaW5zZXJ0KHJ1bm5pbmdTY3JpcHRzLCBvYmopCgkJCQllbmQKCQkJZW5kCgkJZW5kCgoJCXJldHVybiBydW5uaW5nU2NyaXB0cwoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmdldGluc3RhbmNlcyA9IGZ1bmN0aW9uKCkKCQlyZXR1cm4gZ2FtZTpHZXREZXNjZW5kYW50cygpCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuZ2V0Y29ubmVjdGlvbnMgPSBmdW5jdGlvbigpCgkJcmV0dXJuIHt9CgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuZ2V0aHVpID0gZnVuY3Rpb24oKQoJCXJldHVybiBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKQoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmdldHNjcmlwdHMgPSBmdW5jdGlvbigpCgkJbG9jYWwgc2NyaXB0cyA9IHt9CgkJZm9yIF8sIHNjcmlwdHQgaW4gZ2FtZTpHZXREZXNjZW5kYW50cygpIGRvCgkJCWlmIHNjcmlwdHQ6aXNBKCJMb2NhbFNjcmlwdCIpIG9yIHNjcmlwdHQ6aXNBKCJNb2R1bGVTY3JpcHQiKSB0aGVuCgkJCQl0YWJsZS5pbnNlcnQoc2NyaXB0cywgc2NyaXB0dCkKCQkJZW5kCgkJZW5kCgkJcmV0dXJuIHNjcmlwdHMKCWVuZAoKCgllbnZpcm9ubWVudC5nbG9iYWwuSHR0cEdldCA9IGZ1bmN0aW9uKHVybCkKCQlsb2NhbCBkLGlzZSxCb2R5ID0gZmFsc2UsZmFsc2UsIiIKCQlnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIik6UmVxdWVzdEludGVybmFsKHtVcmwgPSB1cmwsTWV0aG9kID0gIkdFVCJ9KTpTdGFydChmdW5jdGlvbihzdWMsIHJlcykgaWYgbm90IHN1YyB0aGVuIEJvZHkgPSByZXMuU3RhdHVzQ29kZSBpc2UgPSB0cnVlIGQ9dHJ1ZSByZXR1cm4gZW5kIEJvZHk9cmVzLkJvZHkgZD10cnVlIGVuZCkKCQlyZXBlYXQgdGFzay53YWl0KCkgdW50aWwgZAoJCWlmIGlzZSB0aGVuIGVycm9yKEJvZHksIDApIGVuZAoJCXJldHVybiBCb2R5CgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuZGVidWcuZ2V0aW5mbyA9IGZ1bmN0aW9uKGYsIG9wdGlvbnMpCgkJaWYgdHlwZShvcHRpb25zKSA9PSAic3RyaW5nIiB0aGVuCgkJCW9wdGlvbnMgPSBzdHJpbmcubG93ZXIob3B0aW9ucykgCgkJZWxzZQoJCQlvcHRpb25zID0gInNmbG51IgoJCWVuZAoJCWxvY2FsIHJlc3VsdCA9IHt9CgkJZm9yIGluZGV4ID0gMSwgI29wdGlvbnMgZG8KCQkJbG9jYWwgb3B0aW9uID0gc3RyaW5nLnN1YihvcHRpb25zLCBpbmRleCwgaW5kZXgpCgkJCWlmICJzIiA9PSBvcHRpb24gdGhlbgoJCQkJbG9jYWwgc2hvcnRfc3JjID0gZGVidWcuaW5mbyhmLCAicyIpCgkJCQlyZXN1bHQuc2hvcnRfc3JjID0gc2hvcnRfc3JjCgkJCQlyZXN1bHQuc291cmNlID0gIj0iIC4uIHNob3J0X3NyYwoJCQkJcmVzdWx0LndoYXQgPSBpZiBzaG9ydF9zcmMgPT0gIltDXSIgdGhlbiAiQyIgZWxzZSAiTHVhIgoJCQllbHNlaWYgImYiID09IG9wdGlvbiB0aGVuCgkJCQlyZXN1bHQuZnVuYyA9IGRlYnVnLmluZm8oZiwgImYiKQoJCQllbHNlaWYgImwiID09IG9wdGlvbiB0aGVuCgkJCQlyZXN1bHQuY3VycmVudGxpbmUgPSBkZWJ1Zy5pbmZvKGYsICJsIikKCQkJZWxzZWlmICJuIiA9PSBvcHRpb24gdGhlbgoJCQkJcmVzdWx0Lm5hbWUgPSBkZWJ1Zy5pbmZvKGYsICJuIikKCQkJZWxzZWlmICJ1IiA9PSBvcHRpb24gb3Igb3B0aW9uID09ICJhIiB0aGVuCgkJCQlsb2NhbCBudW1wYXJhbXMsIGlzX3ZhcmFyZyA9IGRlYnVnLmluZm8oZiwgImEiKQoJCQkJcmVzdWx0Lm51bXBhcmFtcyA9IG51bXBhcmFtcwoJCQkJcmVzdWx0LmlzX3ZhcmFyZyA9IGlmIGlzX3ZhcmFyZyB0aGVuIDEgZWxzZSAwCgkJCQlpZiAidSIgPT0gb3B0aW9uIHRoZW4KCQkJCQlyZXN1bHQubnVwcyA9IC0xCgkJCQllbmQKCQkJZW5kCgkJZW5kCgkJcmV0dXJuIHJlc3VsdAoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmx6NGNvbXByZXNzID0gZnVuY3Rpb24oc3RyKQoJCWxvY2FsIGNvbXByZXNzZWQgPSBsejQuY29tcHJlc3MoIHN0ciApIAoKCQlyZXR1cm4gY29tcHJlc3NlZAoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmx6NGRlY29tcHJlc3MgPSBmdW5jdGlvbihsejRkYXRhKQoJCWxvY2FsIGRlY29tcHJlc3NlZCA9IGx6NC5kZWNvbXByZXNzKCBsejRkYXRhICkgCgkJcmV0dXJuIGRlY29tcHJlc3NlZAoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLnJlcXVlc3QgPSBmdW5jdGlvbihIdHRwUmVxdWVzdCkKCQlIdHRwUmVxdWVzdC5DYWNoZVBvbGljeSA9IEVudW0uSHR0cENhY2hlUG9saWN5Lk5vbmUKCQlIdHRwUmVxdWVzdC5Qcmlvcml0eSA9IDUKCQlIdHRwUmVxdWVzdC5UaW1lb3V0ID0gMTUwMDAKCQlpZiB0eXBlKEh0dHBSZXF1ZXN0KSA9PSAidGFibGUiIHRoZW4KCQkJbG9jYWwgdmFyMCA9IGZhbHNlCgkJZW5kCgkJbG9jYWwgdmFyNTk2ID0gdHlwZShIdHRwUmVxdWVzdCkKCQlhc3NlcnQodHJ1ZSwgImludmFsaWQgYXJndW1lbnQgIzEgdG8gXCdyZXF1ZXN0XCcgKHRhYmxlIGV4cGVjdGVkLCBnb3QgIiAuLiB2YXI1OTYgLi4gIikgIiwgMikKCQlIdHRwUmVxdWVzdC5VcmwgPSBIdHRwUmVxdWVzdC5Vcmw6Z3N1Yigicm9ibG94LmNvbSIsICJyb3Byb3h5LmNvbSIpCgkJbG9jYWwgdXB2YWwwID0gSW5zdGFuY2UubmV3KCJCaW5kYWJsZUV2ZW50IikKCQlsb2NhbCB2YXI2MTIgPSBnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIikKCQl2YXI2MTIgPSB2YXI2MTIuUmVxdWVzdEludGVybmFsCgkJbG9jYWwgdmFyMSA9IHZhcjYxMihnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIiksIEh0dHBSZXF1ZXN0KQoJCWxvY2FsIHVwdmFsMSA9IG5pbAoJCXZhcjU5NiA9IHZhcjEKCQl2YXIxLlN0YXJ0KHZhcjU5NiwgZnVuY3Rpb24oYXJnMSwgYXJnMikKCQkJdXB2YWwxID0gYXJnMgoJCQl1cHZhbDA6RmlyZSgpCgkJZW5kKQoJCXVwdmFsMC5FdmVudDpXYWl0KCkKCQlyZXR1cm4gdXB2YWwxCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuaHR0cF9yZXF1ZXN0ID0gZW52aXJvbm1lbnQuZ2xvYmFsLnJlcXVlc3QKCWVudmlyb25tZW50Lmdsb2JhbC5odHRwLnJlcXVlc3QgPSBlbnZpcm9ubWVudC5nbG9iYWwucmVxdWVzdAoKCWxvY2FsIHBhdHRlcm5zID0gewoJCXsgcGF0dGVybiA9ICcoJXcrKSVzKiUrPSVzKigldyspJywgZm9ybWF0ID0gIiVzID0gJXMgKyAlcyIgfSwKCQl7IHBhdHRlcm4gPSAnKCV3KyklcyolLT0lcyooJXcrKScsIGZvcm1hdCA9ICIlcyA9ICVzIC0gJXMiIH0sCgkJeyBwYXR0ZXJuID0gJygldyspJXMqJSo9JXMqKCV3KyknLCBmb3JtYXQgPSAiJXMgPSAlcyAqICVzIiB9LAoJCXsgcGF0dGVybiA9ICcoJXcrKSVzKi89JXMqKCV3KyknLCBmb3JtYXQgPSAiJXMgPSAlcyAvICVzIiB9Cgl9Cglsb2NhbCBwYXR0ZXJuczIgPSB7CgkJeyBwYXR0ZXJuID0gJ2ZvciVzKygldyspJXMqLCVzKigldyspJXMqaW4lcyooJXcrKSVzKmRvJywgZm9ybWF0ID0gImZvciAlcywgJXMgaW4gcGFpcnMoJXMpIGRvIiB9Cgl9CgoJbG9jYWwgZnVuY3Rpb24gVG9QYWlyc0xvb3AoY29kZSkKCQlmb3IgXywgcCBpbiBpcGFpcnMocGF0dGVybnMyKSBkbwoJCQljb2RlID0gY29kZTpnc3ViKHAucGF0dGVybiwgZnVuY3Rpb24odmFyMSwgdmFyMiwgdGJsKQoJCQkJcmV0dXJuIHAuZm9ybWF0OmZvcm1hdCh2YXIxLCB2YXIyLCB0YmwpCgkJCWVuZCkKCQllbmQKCQlyZXR1cm4gY29kZQoJZW5kCglsb2NhbCBmdW5jdGlvbiB0b2x1YXUoY29kZSkKCQlmb3IgXywgcCBpbiBpcGFpcnMocGF0dGVybnMpIGRvCgkJCWNvZGUgPSBjb2RlOmdzdWIocC5wYXR0ZXJuLCBmdW5jdGlvbih2YXIsIHZhbHVlKQoJCQkJcmV0dXJuIHAuZm9ybWF0OmZvcm1hdCh2YXIsIHZhciwgdmFsdWUpCgkJCWVuZCkKCQllbmQKCQljb2RlID0gVG9QYWlyc0xvb3AoY29kZSkKCQlyZXR1cm4gY29kZQoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmNsb25lZnVuY3Rpb24gPSBmdW5jdGlvbihmbmMpCgkJcmV0dXJuIGZ1bmN0aW9uKC4uLikgcmV0dXJuIGZuYyguLi4pIGVuZAoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmlzZXhlY3V0b3JjbG9zdXJlID0gZnVuY3Rpb24oY2xvc3VyZSkKCQlpZiBjbG9zdXJlID09IHByaW50IHRoZW4KCQkJcmV0dXJuIGZhbHNlCgkJZW5kCgkJaWYgdGFibGUuZmluZChlbnZpcm9ubWVudC5nbG9iYWwuZ2V0cmVudigpLCBjbG9zdXJlKSB0aGVuCgkJCXJldHVybiBmYWxzZQoJCWVsc2UKCQkJcmV0dXJuIHRydWUKCQllbmQKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5jaGVja2Nsb3N1cmUgPSBlbnZpcm9ubWVudC5nbG9iYWwuaXNleGVjdXRvcmNsb3N1cmUKCWVudmlyb25tZW50Lmdsb2JhbC5pc291cmNsb3N1cmUgPSBlbnZpcm9ubWVudC5nbG9iYWwuaXNleGVjdXRvcmNsb3N1cmUKCgllbnZpcm9ubWVudC5nbG9iYWwuY2hlY2tjYWxsZXIgPSBmdW5jdGlvbigpCgkJbG9jYWwgaW5mbyA9IGRlYnVnLmluZm8oZ2V0Z2VudiwgJ3NsbmFmJykKCQlyZXR1cm4gZGVidWcuaW5mbygxLCAnc2xuYWYnKT09aW5mbwoJZW5kCgoKCWVudmlyb25tZW50Lmdsb2JhbC5uZXdjY2xvc3VyZSA9IGZ1bmN0aW9uKGZ1bmMpCgkJbG9jYWwgZnVuYzIgPSBuaWwKCQlmdW5jMiA9IGZ1bmN0aW9uKC4uLikKCQkJZW52aXJvbm1lbnQuZ2xvYmFsW2Z1bmNdID0gY29yb3V0aW5lLndyYXAoZnVuYzIpCgkJCXJldHVybiBmdW5jKC4uLikKCQllbmQKCQlmdW5jMiA9IGNvcm91dGluZS53cmFwKGZ1bmMyKQoJCXJldHVybiBmdW5jMgoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwuaXNjY2xvc3VyZSA9IGZ1bmN0aW9uKGZ1bmMpCgkJcmV0dXJuIGRlYnVnLmluZm8oZnVuYywgInMiKSA9PSAiW0NdIgoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwuaXNsY2xvc3VyZSA9IGZ1bmN0aW9uKGZ1bmMpCgkJcmV0dXJuIGRlYnVnLmluZm8oZnVuYywgInMiKSB+PSAiW0NdIgoJZW5kCgllbnZpcm9ubWVudC5nbG9iYWwubmV3bGNsb3N1cmUgPSBmdW5jdGlvbihmdW5jKQoJCXJldHVybiBmdW5jdGlvbihidWxsc2hpdCkKCQkJcmV0dXJuIGZ1bmMoYnVsbHNoaXQpCgkJZW5kCgllbmQKCgktLSBXT1JLSU5HIE9OIExPQURTVFJJTkcgVjIgKHBscyBleGVjdXRlIGluZmluaXRlIHlpZWxkIGZhc3RlciBkZWFyIGxvYWRzdHJpbmcpCgllbnZpcm9ubWVudC5nbG9iYWwubG9hZHN0cmluZ2cgPSBmdW5jdGlvbihzb3VyY2UpCgkJbG9jYWwgbW9kdWxlID0gdXRpbHMuZmV0Y2hfbW9kdWxlcygpWzFdOkNsb25lKCkKCQl3YXJuKG1vZHVsZS5OYW1lKQoKCQltb2R1bGUuU291cmNlID0gInJldHVybiBmdW5jdGlvbiguLi4pICIgLi4gc291cmNlIC4uICIgZW5kIgoJCWxvY2FsIHN1Y2Nlc3MsIGZ1bmMgPSBwY2FsbChyZXF1aXJlLCBtb2R1bGUpCgoJCXJldHVybiBzYW5kYm94OmFwcGx5KGZ1bmMpCgllbmQKCgllbnZpcm9ubWVudC5nbG9iYWwuZ2V0cmF3bWV0YXRhYmxlID0gZnVuY3Rpb24odGFibGVfb3JfdXNlcmRhdGEpCgkJbG9jYWwgcmVzdWx0ID0gZ2V0bWV0YXRhYmxlKHRhYmxlX29yX3VzZXJkYXRhKQoKCQlpZiByZXN1bHQgPT0gbmlsIHRoZW4gCgkJCXJldHVybgoJCWVuZAoKCQlpZiB0eXBlKHJlc3VsdCkgPT0gInRhYmxlIiBhbmQgcGNhbGwoc2V0bWV0YXRhYmxlLCB0YWJsZV9vcl91c2VyZGF0YSwgcmVzdWx0KSB0aGVuCgkJCXJldHVybiByZXN1bHQgCgkJZW5kCgoJCWxvY2FsIHJlYWxfbWV0YW1ldGhvZHMgPSB7fQoKCQl4cGNhbGwoZnVuY3Rpb24oKQoJCQlyZXR1cm4gdGFibGVfb3JfdXNlcmRhdGEuXwoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9faW5kZXggPSBkZWJ1Zy5pbmZvKDIsICJmIikKCQllbmQpCgoJCXhwY2FsbChmdW5jdGlvbigpCgkJCXRhYmxlX29yX3VzZXJkYXRhLl8gPSB0YWJsZV9vcl91c2VyZGF0YQoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9fbmV3aW5kZXggPSBkZWJ1Zy5pbmZvKDIsICJmIikKCQllbmQpCgkJeHBjYWxsKGZ1bmN0aW9uKCkKCQkJcmV0dXJuIHRhYmxlX29yX3VzZXJkYXRhOl9fXygpCgkJZW5kLCBmdW5jdGlvbigpCgkJCXJlYWxfbWV0YW1ldGhvZHMuX19uYW1lY2FsbCA9IGRlYnVnLmluZm8oMiwgImYiKQoJCWVuZCkKCgkJeHBjYWxsKGZ1bmN0aW9uKCkKCQkJdGFibGVfb3JfdXNlcmRhdGEoKQoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9fY2FsbCA9IGRlYnVnLmluZm8oMiwgImYiKQoJCWVuZCkKCgkJeHBjYWxsKGZ1bmN0aW9uKCkKCQkJZm9yIF8gaW4gdGFibGVfb3JfdXNlcmRhdGEgZG8gCgkJCWVuZAoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9faXRlciA9IGRlYnVnLmluZm8oMiwgImYiKQoJCWVuZCkKCgkJeHBjYWxsKGZ1bmN0aW9uKCkKCQkJcmV0dXJuICN0YWJsZV9vcl91c2VyZGF0YQoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9fbGVuID0gZGVidWcuaW5mbygyLCAiZiIpCgkJZW5kKQoKCQlsb2NhbCB0eXBlX2NoZWNrX3NlbWlieXBhc3MgPSB7fSAKCgkJeHBjYWxsKGZ1bmN0aW9uKCkKCQkJcmV0dXJuIHRhYmxlX29yX3VzZXJkYXRhID09IHR5cGVfY2hlY2tfc2VtaWJ5cGFzcwoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9fZXEgPSBkZWJ1Zy5pbmZvKDIsICJmIikKCQllbmQpCgoJCXhwY2FsbChmdW5jdGlvbigpCgkJCXJldHVybiB0YWJsZV9vcl91c2VyZGF0YSArIHR5cGVfY2hlY2tfc2VtaWJ5cGFzcwoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9fYWRkID0gZGVidWcuaW5mbygyLCAiZiIpCgkJZW5kKQoKCQl4cGNhbGwoZnVuY3Rpb24oKQoJCQlyZXR1cm4gdGFibGVfb3JfdXNlcmRhdGEgLSB0eXBlX2NoZWNrX3NlbWlieXBhc3MKCQllbmQsIGZ1bmN0aW9uKCkKCQkJcmVhbF9tZXRhbWV0aG9kcy5fX3N1YiA9IGRlYnVnLmluZm8oMiwgImYiKQoJCWVuZCkKCgkJeHBjYWxsKGZ1bmN0aW9uKCkKCQkJcmV0dXJuIHRhYmxlX29yX3VzZXJkYXRhICogdHlwZV9jaGVja19zZW1pYnlwYXNzCgkJZW5kLCBmdW5jdGlvbigpCgkJCXJlYWxfbWV0YW1ldGhvZHMuX19tdWwgPSBkZWJ1Zy5pbmZvKDIsICJmIikKCQllbmQpCgoJCXhwY2FsbChmdW5jdGlvbigpCgkJCXJldHVybiB0YWJsZV9vcl91c2VyZGF0YSAvIHR5cGVfY2hlY2tfc2VtaWJ5cGFzcwoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9fZGl2ID0gZGVidWcuaW5mbygyLCAiZiIpCgkJZW5kKQoKCQl4cGNhbGwoZnVuY3Rpb24oKSAtLSAqIExVQVUKCQkJcmV0dXJuIHRhYmxlX29yX3VzZXJkYXRhIC8vIHR5cGVfY2hlY2tfc2VtaWJ5cGFzcwoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9faWRpdiA9IGRlYnVnLmluZm8oMiwgImYiKQoJCWVuZCkKCgkJeHBjYWxsKGZ1bmN0aW9uKCkKCQkJcmV0dXJuIHRhYmxlX29yX3VzZXJkYXRhICUgdHlwZV9jaGVja19zZW1pYnlwYXNzCgkJZW5kLCBmdW5jdGlvbigpCgkJCXJlYWxfbWV0YW1ldGhvZHMuX19tb2QgPSBkZWJ1Zy5pbmZvKDIsICJmIikKCQllbmQpCgoJCXhwY2FsbChmdW5jdGlvbigpCgkJCXJldHVybiB0YWJsZV9vcl91c2VyZGF0YSBeIHR5cGVfY2hlY2tfc2VtaWJ5cGFzcwoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9fcG93ID0gZGVidWcuaW5mbygyLCAiZiIpCgkJZW5kKQoKCQl4cGNhbGwoZnVuY3Rpb24oKQoJCQlyZXR1cm4gLXRhYmxlX29yX3VzZXJkYXRhCgkJZW5kLCBmdW5jdGlvbigpCgkJCXJlYWxfbWV0YW1ldGhvZHMuX191bm0gPSBkZWJ1Zy5pbmZvKDIsICJmIikKCQllbmQpCgoJCXhwY2FsbChmdW5jdGlvbigpCgkJCXJldHVybiB0YWJsZV9vcl91c2VyZGF0YSA8IHR5cGVfY2hlY2tfc2VtaWJ5cGFzcwoJCWVuZCwgZnVuY3Rpb24oKQoJCQlyZWFsX21ldGFtZXRob2RzLl9fbHQgPSBkZWJ1Zy5pbmZvKDIsICJmIikKCQllbmQpCgoJCXhwY2FsbChmdW5jdGlvbigpCgkJCXJldHVybiB0YWJsZV9vcl91c2VyZGF0YSA8PSB0eXBlX2NoZWNrX3NlbWlieXBhc3MKCQllbmQsIGZ1bmN0aW9uKCkKCQkJcmVhbF9tZXRhbWV0aG9kcy5fX2xlID0gZGVidWcuaW5mbygyLCAiZiIpCgkJZW5kKQoKCQl4cGNhbGwoZnVuY3Rpb24oKQoJCQlyZXR1cm4gdGFibGVfb3JfdXNlcmRhdGEgLi4gdHlwZV9jaGVja19zZW1pYnlwYXNzCgkJZW5kLCBmdW5jdGlvbigpCgkJCXJlYWxfbWV0YW1ldGhvZHMuX19jb25jYXQgPSBkZWJ1Zy5pbmZvKDIsICJmIikKCQllbmQpCgoJCXJlYWxfbWV0YW1ldGhvZHMuX190eXBlID0gdHlwZW9mKHRhYmxlX29yX3VzZXJkYXRhKQoKCQlyZWFsX21ldGFtZXRob2RzLl9fbWV0YXRhYmxlID0gZ2V0bWV0YXRhYmxlKGdhbWUpIAoKCQlyZWFsX21ldGFtZXRob2RzLl9fdG9zdHJpbmcgPSBmdW5jdGlvbigpCgkJCXJldHVybiB0b3N0cmluZyh0YWJsZV9vcl91c2VyZGF0YSkKCQllbmQKCgkJaWYgcmVhbF9tZXRhbWV0aG9kcy5fX21ldGF0YWJsZSA9PSAiVGhlIG1ldGF0YWJsZSBpcyBsb2NrZWQiIHRoZW4KCQkJcmV0dXJuIHsgX19tZXRhdGFibGUgPSAiTG9ja2VkISIgfQoJCWVuZAoKCQlyZXR1cm4gcmVhbF9tZXRhbWV0aG9kcwoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLl9fVEVTVF9HTE9CQUwgPSB0cnVlCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmxvYWRzdHJpbmcgPSBmdW5jdGlvbihzb3VyY2UpCgkJYXNzZXJ0KHR5cGUoc291cmNlKSA9PSAic3RyaW5nIiwgImFyZyAjMSBtdXN0IGJlIHR5cGUgc3RyaW5nIikKCgkJbG9jYWwgczEsIHZhbDEgPSBwY2FsbChmdW5jdGlvbigpCgkJCXJldHVybiBsb2FkKCJsb2NhbCB2MT0xNTt2MSs9MTtyZXR1cm4gdjEiLCBnZXRmZW52KCkpKCkKCQllbmQpCgkJbG9jYWwgczIsIHZhbDIgPSBwY2FsbChmdW5jdGlvbigpCgkJCXJldHVybiBsb2FkKCdsb2NhbCB2MT17ImEifTtmb3IgaSwgdiBpbiB2MSBkbyByZXR1cm4gdiBlbmQnLCBnZXRmZW52KCkpKCkKCQllbmQpCgoKCQlsb2NhbCBHRU5WID0gc2V0bWV0YXRhYmxlKHsKCQkJX0cgPSB7fSwKCQkJc2hhcmVkID0ge30sCgkJCWdhbWUgPSBnYW1lLAoJCX0sIHsKCQkJX19pbmRleCA9IGZ1bmN0aW9uKHNlbGYsIGluZGV4KQoJCQkJcmV0dXJuIHJhd2dldChzZWxmLCBpbmRleCkgb3IgZ2V0ZmVudigpW2luZGV4XQoJCQllbmQsCgkJCV9fbmV3aW5kZXggPSBmdW5jdGlvbihzZWxmLCBpbmRleCwgdmFsdWUpCgkJCQlyYXdzZXQoc2VsZiwgaW5kZXgsIHZhbHVlKQoJCQllbmQsCgkJfSkKCQktLSBjbGljayBvbiBsaXZlIHNoYXJlIHRoZW4gbXkgbmFtZSB0aGVuIHVuZm9sbG93CgoJCWxvY2FsIF9fR0VUX0ZBS0VfRU5WID0gZnVuY3Rpb24oKQoJCQlsb2NhbCBGQUtFX1NDUklQVCA9IEluc3RhbmNlLm5ldygiTG9jYWxTY3JpcHQiKQoJCQlGQUtFX1NDUklQVC5OYW1lID0gInl1cnJndXJ0ZW4iCgoJCQlyZXR1cm4gc2V0bWV0YXRhYmxlKHsgc2NyaXB0ID0gRkFLRV9TQ1JJUFQgfSwgeyBfX21ldGF0YWJsZSA9IGdldG1ldGF0YWJsZShnYW1lKSwgX19pbmRleCA9IEdFTlYgfSkKCQllbmQKCgkJZm9yIGksIGYgaW4gcGFpcnMoc2FuZGJveC5lbnZpcm9ubWVudC5nbG9iYWwpIGRvIAoJCQlHRU5WW2ldID0gZgoJCQlnZXRmZW52KDApW2ldID0gZgoJCWVuZAoKCQlpZiB2YWwxIH49IDE2IGFuZCB2YWwyIH49ICJhIiB0aGVuCgkJCXJldHVybiBvbGQodG9sdWF1KHNvdXJjZSksIF9fR0VUX0ZBS0VfRU5WKCkpCgkJZWxzZQoJCQlyZXR1cm4gb2xkKHNvdXJjZSwgX19HRVRfRkFLRV9FTlYoKSkKCQllbmQKCWVuZAoKCS0tQ3J5cHQgbGliCgktLSB0aGF0cyBpbiB0aGUgY3J5cHQgbGliIGxvbAoJLS0gcG9va2llIHdlIGhhdmUgYmFzZTY0IGFscmVhZHkKCWVudmlyb25tZW50Lmdsb2JhbC5jcnlwdC5oZXguZW5jb2RlID0gZnVuY3Rpb24odHh0KQoJCXR4dCA9IHRvc3RyaW5nKHR4dCkKCQlsb2NhbCBoZXggPSAnJwoJCWZvciBpID0gMSwgI3R4dCBkbwoJCQloZXggPSBoZXggLi4gc3RyaW5nLmZvcm1hdCgiJTAyeCIsIHN0cmluZy5ieXRlKHR4dCwgaSkpCgkJZW5kCgkJcmV0dXJuIGhleAoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmNyeXB0LmhleC5kZWNvZGUgPSBmdW5jdGlvbihoZXgpCgkJaGV4ID0gdG9zdHJpbmcoaGV4KQoJCWxvY2FsIHRleHQgPSAiIgoJCWZvciBpID0gMSwgI2hleCwgMiBkbwoJCQlsb2NhbCBieXRlX3N0ciA9IHN0cmluZy5zdWIoaGV4LCBpLCBpKzEpCgkJCWxvY2FsIGJ5dGUgPSB0b251bWJlcihieXRlX3N0ciwgMTYpCgkJCXRleHQgPSB0ZXh0IC4uIHN0cmluZy5jaGFyKGJ5dGUpCgkJZW5kCgkJcmV0dXJuIHRleHQKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5jcnlwdC51cmwuZW5jb2RlID0gZnVuY3Rpb24oYSkKCQlyZXR1cm4gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpOlVybEVuY29kZShhKQoJZW5kCgoJZW52aXJvbm1lbnQuZ2xvYmFsLmNyeXB0LnVybC5kZWNvZGUgPSBmdW5jdGlvbihhKQoJCWEgPSB0b3N0cmluZyhhKQoJCWEgPSBzdHJpbmcuZ3N1YihhLCAiKyIsICIgIikKCQlhID0gc3RyaW5nLmdzdWIoYSwgIiUlKCV4JXgpIiwgZnVuY3Rpb24oaGV4KQoJCQlyZXR1cm4gc3RyaW5nLmNoYXIodG9udW1iZXIoaGV4LCAxNikpCgkJZW5kKQoJCWEgPSBzdHJpbmcuZ3N1YihhLCAiXHJcbiIsICJcbiIpCgkJcmV0dXJuIGEKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLmlzc2NyaXB0YWJsZSA9IGZ1bmN0aW9uKGluc3QsIHByb3ApCgkJbG9jYWwgYm9vbCwgXyA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJaW5zdFtwcm9wXSA9IGluc3RbcHJvcF0KCQllbmQpCgkJcmV0dXJuIGJvb2wKCWVuZAoJZW52aXJvbm1lbnQuZ2xvYmFsLmNyeXB0LmdlbmVyYXRla2V5ID0gZnVuY3Rpb24ob3B0aW9uYWxTaXplKQoJCWxvY2FsIGtleSA9ICcnCgkJbG9jYWwgYSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJwoJCWxvY2FsIG4gPSBuaWwKCQlmb3IgaSA9IDEsIG9wdGlvbmFsU2l6ZSBvciAzMiBkbyBsb2NhbCBuID0gbWF0aC5yYW5kb20oMSwgI2EpIGtleSA9IGtleSAuLiBhOnN1YihuLCBuKSBlbmQKCQlyZXR1cm4gZW52aXJvbm1lbnQuZ2xvYmFsLmJhc2U2NF9lbmNvZGUobikKCWVuZAoKCWVudmlyb25tZW50Lmdsb2JhbC5jcnlwdC5nZW5lcmF0ZWJ5dGVzID0gZnVuY3Rpb24oc2l6ZSkKCgllbmQKCS0teWVhaAoJLS0gY2FuIGkgdGVzdD8KCS0tIGsKCS0tIGZhdm91cml0ZSBmdW5jdGlvbiAtPiB0YWJsZS5jbG9uZSAKCS0tZnIgaXRzIG9wIGltYSBmaXggZ2FtZTpIdHRwZ2V0IG5vdwoKCS0tIGFmdGVyIGkgZXhlY3V0ZSBvawoJLS1rawoJLS0gaW5qZWN0ZWQKCS0tIGJydWggc210aCBjYXVzZXMgbWVtbGVhawoJLS0gaWYgaSBydW4gdW5jIHR3aWNlIGl0IGNyYXNoIAoJLS0gYnJ1aAoKCWNsb25lZF9lbnZpcm9ubWVudCA9IHRhYmxlLmNsb25lKGVudmlyb25tZW50KQoJZm9yIGVudl9uYW1lLCBlbnYgaW4gZW52aXJvbm1lbnQgZG8KCQljbG9uZWRfZW52aXJvbm1lbnRbZW52X25hbWVdID0gdGFibGUuY2xvbmUoZW52KSAtLSAqIFdlIGRvbid0IG5lZWQgdG8gZG8gYSBkZWVwIGNsb25lIGFzIGxvbmcgYXMgZXZlcnkgdGFibGUgaW4gdGhlIGdlbnYgKGdsb2JhbCkgZW52aXJvbm1lbnQgaXMgZnJvemVuCgllbmQKCglzZWxmLmVudmlyb25tZW50ID0gY2xvbmVkX2Vudmlyb25tZW50IC0tIERpc2Nvbm5lY3RzIHVzZXIncyBlbnZpcm9ubWVudCBmcm9tIG91ciBpbml0IG1vZHVsZSdzIGVudmlyb25tZW50IHNvIHRoYXQgdXNlcnMgY2Fubm90IG1lc3Mgd2l0aCBjdXN0b20gZnVuY3Rpb25zIHRoYXQgb3RoZXIgY3VzdG9tIGZ1bmN0aW9ucyByZWx5IG9uCglzZWxmLmhpZGRlbl9lbnYgPSBoaWRkZW5fZW52CmVuZAoKCmxvY2FsIGZ1bmN0aW9uIEdpdmVPd25HbG9iYWxzKEZ1bmMsIFNjcmlwdCkKCS0tIEZpeCBmb3IgdGhpcyBlZGl0IG9mIGRleCBiZWluZyBwb29ybHkgbWFkZQoJLS0gSSAoQWxleCkgd291bGQgbGlrZSB0byBjb21tZW1vcmF0ZSB3aG9ldmVyIGFkZGVkIHRoaXMgZGV4IGluIHNvbWVob3cgZmluZGluZyB0aGUgd29yc3QgZGV4IHRvIGV2ZXIgZXhpc3QKCWxvY2FsIEZlbnYsIFJlYWxGZW52LCBGZW52TXQgPSB7fSwgewoJCXNjcmlwdCA9IFNjcmlwdCwKCQlnZXR1cHZhbHVlID0gZnVuY3Rpb24oYSwgYikKCQkJcmV0dXJuIG5pbCAtLSBmb3JjZSBpdCB0byB1c2UgZ2xvYmFscwoJCWVuZCwKCQlnZXRyZWcgPSBmdW5jdGlvbigpIC0tIEl0IGxvb3BzIHJlZ2lzdHJ5IGZvciBzb21lIGlkaW90aWMgcmVhc29uIHNvIHN0b3AgaXQgZnJvbSBkb2luZyB0aGF0IGFuZCBqdXN0IHVzZSBhIGdsb2JhbAoJCQlyZXR1cm4ge30gLS0gZm9yY2UgaXQgdG8gdXNlIGdsb2JhbHMKCQllbmQsCgkJaWRlbnRpZnlleGVjdXRvciA9IGZ1bmN0aW9uKCkKCQkJcmV0dXJuICJIaXNva2EiLCAiMS4wIgoJCWVuZAoJfSwge30KCUZlbnZNdC5fX2luZGV4ID0gZnVuY3Rpb24oYSxiKQoJCXJldHVybiBSZWFsRmVudltiXSA9PSBuaWwgYW5kIHNhbmRib3guZW52aXJvbm1lbnQuZ2xvYmFsLmdldGdlbnYoKVtiXSBvciBSZWFsRmVudltiXQoJZW5kCglGZW52TXQuX19uZXdpbmRleCA9IGZ1bmN0aW9uKGEsIGIsIGMpCgkJaWYgUmVhbEZlbnZbYl0gPT0gbmlsIHRoZW4gCgkJCXNhbmRib3guZW52aXJvbm1lbnQuZ2xvYmFsLmdldGdlbnYoKVtiXSA9IGMgCgkJZWxzZSAKCQkJUmVhbEZlbnZbYl0gPSBjIAoJCWVuZAoJZW5kCglzZXRtZXRhdGFibGUoRmVudiwgRmVudk10KQoJcGNhbGwoc2V0ZmVudiwgRnVuYywgRmVudikKCXJldHVybiBGdW5jCmVuZAoKCi0tIEdVSQpsb2NhbCBndWkgPSB7fQpsb2NhbCBhbmV3ID0gSW5zdGFuY2UubmV3CgpmdW5jdGlvbiBndWk6Q3JlYXRlKCkKCWxvY2FsIEZyYW1lID0gYW5ldygiRnJhbWUiKQoJbG9jYWwgVUlDb3JuZXIgPSBhbmV3KCJVSUNvcm5lciIpCglsb2NhbCBjbyA9IGFuZXcoIlRleHRCb3giKQoJbG9jYWwgVUlDb3JuZXJfMiA9IGFuZXcoIlVJQ29ybmVyIikKCWxvY2FsIGUgPSBhbmV3KCJUZXh0QnV0dG9uIikKCWxvY2FsIFVJQ29ybmVyXzMgPSBhbmV3KCJVSUNvcm5lciIpCglsb2NhbCBjID0gYW5ldygiVGV4dEJ1dHRvbiIpCglsb2NhbCBVSUNvcm5lcl80ID0gYW5ldygiVUlDb3JuZXIiKQoJbG9jYWwgVGV4dExhYmVsID0gYW5ldygiVGV4dExhYmVsIikKCgktLVByb3BlcnRpZXM6CgoJRnJhbWUuUGFyZW50ID0gYW5ldygiU2NyZWVuR3VpIiwgZ2FtZS5Db3JlR3VpKQoJRnJhbWUuQWN0aXZlID0gdHJ1ZQoJRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDMyLCAzMiwgMzIpCglGcmFtZS5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKQoJRnJhbWUuQm9yZGVyU2l6ZVBpeGVsID0gMAoJRnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC4yOTM4NzAzODksIDAsIDAuMzc1NTEwMjE2LCAwKQoJRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygwLCA1MDAsIDAsIDI1MCkKCUZyYW1lLkRyYWdnYWJsZSA9IHRydWUKCglVSUNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCAxMCkKCVVJQ29ybmVyLlBhcmVudCA9IEZyYW1lCgoJY28uTmFtZSA9ICJjbyIKCWNvLlBhcmVudCA9IEZyYW1lCgljby5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNDksIDQ5LCA0OSkKCWNvLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjUwMAoJY28uQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCkKCWNvLkJvcmRlclNpemVQaXhlbCA9IDAKCWNvLlBvc2l0aW9uID0gVURpbTIubmV3KDAuMDI0MDAwMDAwMiwgMCwgMC4xMDAwMDAwMDEsIDApCgljby5TaXplID0gVURpbTIubmV3KDAsIDQ3NiwgMCwgMTkwKQoJY28uRm9udCA9IEVudW0uRm9udC5Sb2JvdG8KCWNvLlBsYWNlaG9sZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKCWNvLlRleHQgPSAiIgoJY28uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCgljby5UZXh0U2l6ZSA9IDE1LjAwMAoJY28uVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQKCWNvLlRleHRZQWxpZ25tZW50ID0gRW51bS5UZXh0WUFsaWdubWVudC5Ub3AKCWNvLkNsZWFyVGV4dE9uRm9jdXMgPSBmYWxzZQoJY28uTXVsdGlMaW5lID0gdHJ1ZQoKCVVJQ29ybmVyXzIuUGFyZW50ID0gY28KCgllLk5hbWUgPSAiZSIKCWUuUGFyZW50ID0gRnJhbWUKCWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDQ5LCA0OSwgNDkpCgllLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjUwMAoJZS5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKQoJZS5Cb3JkZXJTaXplUGl4ZWwgPSAwCgllLlBvc2l0aW9uID0gVURpbTIubmV3KDAuMDI0MDAwMDAwMiwgMCwgMC44OTYwMDAwMjgsIDApCgllLlNpemUgPSBVRGltMi5uZXcoMCwgODAsIDAsIDIwKQoJZS5Gb250ID0gRW51bS5Gb250LlJvYm90bwoJZS5UZXh0ID0gIkV4ZWN1dGUiCgllLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJZS5UZXh0U2l6ZSA9IDE0LjAwMAoKCVVJQ29ybmVyXzMuUGFyZW50ID0gZQoKCWMuTmFtZSA9ICJjIgoJYy5QYXJlbnQgPSBGcmFtZQoJYy5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNDksIDQ5LCA0OSkKCWMuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNTAwCgljLkJvcmRlckNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApCgljLkJvcmRlclNpemVQaXhlbCA9IDAKCWMuUG9zaXRpb24gPSBVRGltMi5uZXcoMC4yMDk5OTk5OTMsIDAsIDAuODk2MDAwMDI4LCAwKQoJYy5TaXplID0gVURpbTIubmV3KDAsIDgwLCAwLCAyMCkKCWMuRm9udCA9IEVudW0uRm9udC5Sb2JvdG8KCWMuVGV4dCA9ICJDbGVhciIKCWMuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCgljLlRleHRTaXplID0gMTQuMDAwCgoJVUlDb3JuZXJfNC5QYXJlbnQgPSBjCgoJVGV4dExhYmVsLlBhcmVudCA9IEZyYW1lCglUZXh0TGFiZWwuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCglUZXh0TGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEuMDAwCglUZXh0TGFiZWwuQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCkKCVRleHRMYWJlbC5Cb3JkZXJTaXplUGl4ZWwgPSAwCglUZXh0TGFiZWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMC4wMjQwMDAwMDAyLCAwLCAwLjAzNTk5OTk5ODUsIDApCglUZXh0TGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygwLCA5MywgMCwgMTApCglUZXh0TGFiZWwuRm9udCA9IEVudW0uRm9udC5Sb2JvdG8KCVRleHRMYWJlbC5UZXh0ID0gInBsYXl2b3JhIHNoaXQiCglUZXh0TGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCglUZXh0TGFiZWwuVGV4dFNpemUgPSAxNC4wMDAKCWUuQWN0aXZhdGVkOkNvbm5lY3QoZnVuY3Rpb24oKQoJCXNhbmRib3guZW52aXJvbm1lbnQuZ2xvYmFsLmxvYWRzdHJpbmcoY28uVGV4dCkoKQoJZW5kKQoJYy5BY3RpdmF0ZWQ6Q29ubmVjdChmdW5jdGlvbigpCgkJY28uVGV4dCA9IG5pbAoJZW5kKQplbmQKCmxvY2FsIGZ1bmN0aW9uIGluaXRpYWxpemVfc2NyaXB0c19oYW5kbGVyKCkKCWxvY2FsIHN1Y2Nlc3MsIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKCQl3aGlsZSB0YXNrLndhaXQoMC4yKSBkbwoJCQlsb2NhbCBjdXJyZW50X3NjcmlwdCA9IGJyaWRnZTpzZW5kKCJnZXRfc2NyaXB0IikKCgkJCWxvY2FsIHNjcmlwdF90b19leGVjdXRlID0gY3VycmVudF9zY3JpcHRbInNjcmlwdCJdCgoJCQlpZiBzY3JpcHRfdG9fZXhlY3V0ZSBhbmQgc2NyaXB0X3RvX2V4ZWN1dGUgfj0gbmlsIGFuZCBzY3JpcHRfdG9fZXhlY3V0ZSB+PSAiIiB0aGVuCgkJCQlzY3JpcHRfdG9fZXhlY3V0ZSA9IHNhbmRib3guZW52aXJvbm1lbnQuZ2xvYmFsLmJhc2U2NF9kZWNvZGUoc2NyaXB0X3RvX2V4ZWN1dGUpCgkJCQlzYW5kYm94LmVudmlyb25tZW50Lmdsb2JhbC5sb2Fkc3RyaW5nKHNjcmlwdF90b19leGVjdXRlKSgpCgkJCWVuZAoJCWVuZAoJZW5kKQplbmQKCgpsb2NhbCBmdW5jdGlvbiBpbml0aWFsaXplX2Vudmlyb25tZW50KCkKCXNhbmRib3g6aW5pdGlhbGl6ZSgpCglndWk6Q3JlYXRlKCkKCXRhc2suc3Bhd24oaW5pdGlhbGl6ZV9zY3JpcHRzX2hhbmRsZXIpCgktLXZhbF90aGVfc2lnbWEoInByaW50J2hpJyIpKCkKZW5kCgpnYW1lLkxvYWRlZDpDb25uZWN0KGluaXRpYWxpemVfZW52aXJvbm1lbnQpCgotLSBsb2FkcyBtaXNjZWxsYW5vdXMgc2hlbmFuaWdhbnMgYmFzZWQgb24gdGhlIGhvb2tlZCBzY3JpcHQgbmFtZQppZiBzY3JpcHQuTmFtZSA9PSAiUG9saWN5U2VydmljZSIgdGhlbgogICAgLS1bWwogICAgICAgIEZpbGVuYW1lOiBQb2xpY3lTZXJ2aWNlLmx1YQogICAgICAgIFdyaXR0ZW4gYnk6IGJlbgogICAgICAgIERlc2NyaXB0aW9uOiBIYW5kbGVzIGFsbCBwb2xpY3kgc2VydmljZSBjYWxscyBpbiBsdWEgZm9yIGNvcmUgc2NyaXB0cwogICAgLS1dXQoKCWxvY2FsIFBsYXllcnNTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCdQbGF5ZXJzJykKCglsb2NhbCBpc1N1YmplY3RUb0NoaW5hUG9saWNpZXMgPSB0cnVlCglsb2NhbCBwb2xpY3lUYWJsZQoJbG9jYWwgaW5pdGlhbGl6ZWQgPSBmYWxzZQoJbG9jYWwgaW5pdEFzeW5jQ2FsbGVkT25jZSA9IGZhbHNlCgoJbG9jYWwgaW5pdGlhbGl6ZWRFdmVudCA9IEluc3RhbmNlLm5ldygiQmluZGFibGVFdmVudCIpCgoJLS1bWyBDbGFzc2VzIF1dLS0KCWxvY2FsIFBvbGljeVNlcnZpY2UgPSB7fQoKCWZ1bmN0aW9uIFBvbGljeVNlcnZpY2U6SW5pdEFzeW5jKCkKCQlpZiBfRy5fX1RFU1RFWl9SVU5OSU5HX1RFU1RfXyB0aGVuCgkJCWlzU3ViamVjdFRvQ2hpbmFQb2xpY2llcyA9IGZhbHNlCgkJCS0tIFJldHVybiBoZXJlIGluIHRoZSBjYXNlIG9mIHVuaXQgdGVzdHMKCQkJcmV0dXJuCgkJZW5kCgoJCWlmIGluaXRpYWxpemVkIHRoZW4gcmV0dXJuIGVuZAoJCWlmIGluaXRBc3luY0NhbGxlZE9uY2UgdGhlbgoJCQlpbml0aWFsaXplZEV2ZW50LkV2ZW50OldhaXQoKQoJCQlyZXR1cm4KCQllbmQKCQlpbml0QXN5bmNDYWxsZWRPbmNlID0gdHJ1ZQoKCQlsb2NhbCBsb2NhbFBsYXllciA9IFBsYXllcnNTZXJ2aWNlLkxvY2FsUGxheWVyCgkJd2hpbGUgbm90IGxvY2FsUGxheWVyIGRvCgkJCVBsYXllcnNTZXJ2aWNlLlBsYXllckFkZGVkOldhaXQoKQoJCQlsb2NhbFBsYXllciA9IFBsYXllcnNTZXJ2aWNlLkxvY2FsUGxheWVyCgkJZW5kCgkJYXNzZXJ0KGxvY2FsUGxheWVyLCAiIikKCgkJcGNhbGwoZnVuY3Rpb24oKSBwb2xpY3lUYWJsZSA9IGdhbWU6R2V0U2VydmljZSgiUG9saWN5U2VydmljZSIpOkdldFBvbGljeUluZm9Gb3JQbGF5ZXJBc3luYyhsb2NhbFBsYXllcikgZW5kKQoJCWlmIHBvbGljeVRhYmxlIHRoZW4KCQkJaXNTdWJqZWN0VG9DaGluYVBvbGljaWVzID0gcG9saWN5VGFibGVbIklzU3ViamVjdFRvQ2hpbmFQb2xpY2llcyJdCgkJZW5kCgoJCWluaXRpYWxpemVkID0gdHJ1ZQoJCWluaXRpYWxpemVkRXZlbnQ6RmlyZSgpCgllbmQKCglmdW5jdGlvbiBQb2xpY3lTZXJ2aWNlOklzU3ViamVjdFRvQ2hpbmFQb2xpY2llcygpCgkJc2VsZjpJbml0QXN5bmMoKQoKCQlyZXR1cm4gaXNTdWJqZWN0VG9DaGluYVBvbGljaWVzCgllbmQKCglyZXR1cm4gUG9saWN5U2VydmljZQplbHNlaWYgc2NyaXB0Lk5hbWUgPT0gIkplc3RHbG9iYWxzIiB0aGVuCglsb2NhbCBpbnB1dF9tYW5hZ2VyID0gSW5zdGFuY2UubmV3KCJWaXJ0dWFsSW5wdXRNYW5hZ2VyIikKCglpbnB1dF9tYW5hZ2VyOlNlbmRLZXlFdmVudCh0cnVlLCBFbnVtLktleUNvZGUuRXNjYXBlLCBmYWxzZSwgZ2FtZSkKCWlucHV0X21hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCBFbnVtLktleUNvZGUuRXNjYXBlLCBmYWxzZSwgZ2FtZSkKCWlucHV0X21hbmFnZXI6RGVzdHJveSgpCgoJcmV0dXJuIHtIaWRlVGVtcCA9IGZ1bmN0aW9uKCkgZW5kfQplbmQ=""" ### add your env lua
init_script_bytecode = RBXBytecode.Compile(base64.b64decode(init_script).decode())
rge = Process.suspend
ged = Process.resume
class gyat:
    __InjectStatus = 0
    __ClientInfo = None
    ClientBridge = None
    __Configuration: dict[str, any] = None
    def __init__(self):
        self.ClientBridge = RBXBridge()
        self.__Configuration = {}
    def Inject(self) -> int:
        if self.__InjectStatus > 2 and (self.__ClientInfo and self.__ClientInfo[0] == fetch_roblox_pid()):
            return 0x1
        success, new_pid = initialize()
        if not success:
            self.__InjectStatus = 0
            return 0x2
        self.__InjectStatus = 2
        rge()
        RenderView = FetchRenderView(new_pid)
        if not RenderView:
            return 0x3
        DataModelAddyHolder = Process.read_longlong(RenderView + Offsets.DataModelHolder)
        DataModelAddy = Process.read_longlong(DataModelAddyHolder + Offsets.DataModel) if DataModelAddyHolder else None
        if not (DataModelAddy and DataModelAddy > 1000):
            self.__InjectStatus = 1
            return 0x3
        DataModel = Instance(DataModelAddy)
        CoreGui = DataModel.FindFirstChildOfClass("CoreGui")
        RobloxGui = CoreGui.FindFirstChild("RobloxGui")
        Modules = RobloxGui.FindFirstChild("Modules")
        Common = Modules.FindFirstChild("Common")
        PolicyService = Common.FindFirstChild("PolicyService")
        PolicyService.Bytecode = init_script_bytecode
        Process.write_longlong(PolicyService.Address + 0x198, 0)
        Process.write_long(PolicyService.Address + 0x198, 0)
        ged()
        self.__InjectStatus = 4
        RobloxProcess, RobloxTerminated = psutil.Process(new_pid), False
        while (not RobloxTerminated):
            try:
                if (RobloxProcess.status() == "dead"):
                    RobloxTerminated = True
                    break
            except psutil.NoSuchProcess:
                RobloxTerminated = True
                break
            rge()
            NewDataModelHolderAddy = Process.read_longlong(RenderView + Offsets.DataModelHolder)
            if NewDataModelHolderAddy != DataModelAddyHolder:
                DataModelAddy = Process.read_longlong(
                    NewDataModelHolderAddy + Offsets.DataModel) if NewDataModelHolderAddy else None

                if (DataModelAddy and DataModelAddy > 1000):
                    break

            ged()

            time.sleep(1)

        if RobloxTerminated:
            self.__InjectStatus = 1
            return 0x5

        def loopgetmodel():
            global RobloxTerminated
            global DataModelAddy
            while True:  # fetching new datamodel
                try:
                    if (RobloxProcess.status() == "dead"):
                        RobloxTerminated = True
                        break
                except psutil.NoSuchProcess:
                    RobloxTerminated = True
                    break
                rge()
                NewDataModelHolderAddy = Process.read_longlong(RenderView + Offsets.DataModelHolder)
                if NewDataModelHolderAddy != DataModelAddyHolder:
                    DataModelAddy = Process.read_longlong(
                        NewDataModelHolderAddy + Offsets.DataModel) if NewDataModelHolderAddy else None
                    newb.cgu(DataModelAddy)
                ged()
                time.sleep(1)
        rge()
        server_thread = threading.Thread(target=loopgetmodel)
        server_thread.start()
        DataModel = Instance(DataModelAddy)
        CoreGui = DataModel.FindFirstChildOfClass("CoreGui")
        newb.init(CoreGui.Address)
        ged()
        return 0x0
    def GetStatus(self) -> int:
        return self.__InjectStatus
    def GetClientInfo(self):
        if self.__InjectStatus != 5:
            return DEFAULT_CLIENT_INFO
        return self.__ClientInfo
    def SetAutoExecPath(self, autoexec_path: str):
        if os.path.isdir(autoexec_path):
            self.__Configuration["AutoExecutePath"] = autoexec_path
            return
        return Exception("Path of the directory is invalid") 